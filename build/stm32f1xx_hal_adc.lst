ARM GAS  /tmp/ccelol6o.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f1xx_hal_adc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c"
  18              		.section	.text.HAL_ADC_Init,"ax",%progbits
  19              		.align	1
  20              		.global	HAL_ADC_Init
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	HAL_ADC_Init:
  26              	.LFB65:
   1:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
   2:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ******************************************************************************
   3:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @file    stm32f1xx_hal_adc.c
   4:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @author  MCD Application Team
   5:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   6:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC)
   7:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          peripheral:
   8:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *           + Peripheral Control functions
  10:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *           + Peripheral State functions
  11:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          Other functions (extended functions) are available in file 
  12:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          "stm32f1xx_hal_adc_ex.c".
  13:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
  14:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ******************************************************************************
  15:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @attention
  16:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
  17:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * Copyright (c) 2016 STMicroelectronics.
  18:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * All rights reserved.
  19:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
  20:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * This software is licensed under terms that can be found in the LICENSE file
  21:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * in the root directory of this software component.
  22:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  23:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
  24:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ******************************************************************************
  25:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   @verbatim
  26:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ==============================================================================
  27:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                      ##### ADC peripheral features #####
  28:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ==============================================================================
  29:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   [..]
  30:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) 12-bit resolution
  31:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  32:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Interrupt generation at the end of regular conversion, end of injected
ARM GAS  /tmp/ccelol6o.s 			page 2


  33:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       conversion, and in case of analog watchdog or overrun events.
  34:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  35:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Single and continuous conversion modes.
  36:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  37:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Scan mode for conversion of several channels sequentially.
  38:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  39:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Data alignment with in-built data coherency.
  40:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  41:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Programmable sampling time (channel wise)
  42:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  43:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) ADC conversion of regular group and injected group.
  44:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  45:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) External trigger (timer or EXTI) 
  46:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       for both regular and injected groups.
  47:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  48:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) DMA request generation for transfer of conversions data of regular group.
  49:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  50:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Multimode Dual mode (available on devices with 2 ADCs or more).
  51:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  52:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Configurable DMA data storage in Multimode Dual mode (available on devices
  53:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       with 2 DCs or more).
  54:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  55:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) Configurable delay between conversions in Dual interleaved mode (available 
  56:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       on devices with 2 DCs or more).
  57:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  58:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) ADC calibration
  59:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  60:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) ADC supply requirements: 2.4 V to 3.6 V at full speed and down to 1.8 V at 
  61:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       slower speed.
  62:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
  63:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   (+) ADC input range: from Vref- (connected to Vssa) to Vref+ (connected to 
  64:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       Vdda or to an external voltage reference).
  65:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  66:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  67:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                      ##### How to use this driver #####
  68:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ==============================================================================
  69:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
  70:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  71:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      *** Configuration of top level parameters related to ADC ***
  72:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      ============================================================
  73:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
  74:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  75:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Enable the ADC interface
  76:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (++) As prerequisite, ADC clock must be configured at RCC top level.
  77:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****            Caution: On STM32F1, ADC clock frequency max is 14MHz (refer
  78:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                     to device datasheet).
  79:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                     Therefore, ADC clock prescaler must be configured in 
  80:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                     function of ADC clock source frequency to remain below
  81:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                     this maximum frequency.
  82:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) One clock setting is mandatory:
  83:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC clock (core clock, also possibly conversion clock).
  84:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              (+++) Example:
  85:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                    Into HAL_ADC_MspInit() (recommended code location) or with
  86:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                    other device clock parameters configuration:
  87:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) RCC_PeriphCLKInitTypeDef  PeriphClkInit;
  88:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) __ADC1_CLK_ENABLE();
  89:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
ARM GAS  /tmp/ccelol6o.s 			page 3


  90:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
  91:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
  92:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  93:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) ADC pins configuration
  94:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Enable the clock for the ADC GPIOs
  95:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_ENABLE()
  96:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Configure these ADC pins in analog mode
  97:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_GPIO_Init()
  98:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
  99:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Configure the NVIC for ADC
 101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler() 
 103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               into the function of corresponding ADC interruption vector 
 104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               ADCx_IRQHandler().
 105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Configure the DMA (DMA channel, mode normal or circular, ...)
 108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_DMA_Init().
 109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Configure the NVIC for DMA
 110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler() 
 112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               into the function of corresponding DMA interruption vector 
 113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               DMAx_Channelx_IRQHandler().
 114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      *** Configuration of ADC, groups regular/injected, channels parameters ***
 116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      ==========================================================================
 117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
 118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Configure the ADC parameters (resolution, data alignment, ...)
 120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         and regular group parameters (conversion trigger, sequencer, ...)
 121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADC_Init().
 122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Configure the channels for regular group parameters (channel number, 
 124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         channel rank into sequencer, ..., into regular group)
 125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADC_ConfigChannel().
 126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, configure the injected group parameters (conversion trigger, 
 128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         sequencer, ..., of injected group)
 129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         and the channels for injected group parameters (channel number, 
 130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         channel rank into sequencer, ..., into injected group)
 131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADCEx_InjectedConfigChannel().
 132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, configure the analog watchdog parameters (channels
 134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         monitored, thresholds, ...)
 135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADC_AnalogWDGConfig().
 136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, for devices with several ADC instances: configure the 
 138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         multimode parameters
 139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADCEx_MultiModeConfigChannel().
 140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      *** Execution of ADC conversions ***
 142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      ====================================
 143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
 144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, perform an automatic ADC calibration to improve the
 146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         conversion accuracy
ARM GAS  /tmp/ccelol6o.s 			page 4


 147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         using function HAL_ADCEx_Calibration_Start().
 148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) ADC driver can be used among three modes: polling, interruption,
 150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         transfer by DMA.
 151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) ADC conversion by polling:
 153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Start()
 155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion 
 156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_PollForConversion()
 157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedPollForConversion() )
 158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Retrieve conversion results 
 159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedGetValue() )
 161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Stop()
 163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) ADC conversion by interruption: 
 165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Start_IT()
 167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback()
 169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (this function must be implemented in user program)
 170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedConvCpltCallback() )
 171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Retrieve conversion results 
 172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (or for injected group: HAL_ADCEx_InjectedGetValue() )
 174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Stop_IT()
 176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) ADC conversion with transfer by DMA:
 178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Start_DMA()
 180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback() or HAL_ADC_ConvHalfCpltCallback()
 182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (these functions must be implemented in user program)
 183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Conversion results are automatically transferred by DMA into
 184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 destination variable address.
 185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral 
 186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Stop_DMA()
 187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) For devices with several ADCs: ADC multimode conversion 
 189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              with transfer by DMA:
 190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral (slave) and start conversions
 191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Start()
 192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Activate the ADC peripheral (master) and start conversions
 193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADCEx_MultiModeStart_DMA()
 194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback() or HAL_ADC_ConvHalfCpltCallback()
 196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 (these functions must be implemented in user program)
 197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Conversion results are automatically transferred by DMA into
 198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 destination variable address.
 199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral (master)
 200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADCEx_MultiModeStop_DMA()
 201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral (slave)
 202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 using function HAL_ADC_Stop_IT()
 203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
ARM GAS  /tmp/ccelol6o.s 			page 5


 204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
 205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (@) Callback functions must be implemented in user program:
 207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADC_ErrorCallback()
 208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADC_LevelOutOfWindowCallback() (callback of analog watchdog)
 209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADC_ConvCpltCallback()
 210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADC_ConvHalfCpltCallback
 211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+@) HAL_ADCEx_InjectedConvCpltCallback()
 212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      *** Deinitialization of ADC ***
 214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      ============================================================
 215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
 216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Disable the ADC interface
 218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (++) ADC clock can be hard reset and disabled at RCC top level.
 219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) Hard reset of ADC peripherals
 220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              using macro __ADCx_FORCE_RESET(), __ADCx_RELEASE_RESET().
 221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         (++) ADC clock disable
 222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              using the equivalent macro/functions as configuration step.
 223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              (+++) Example:
 224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                    Into HAL_ADC_MspDeInit() (recommended code location) or with
 225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                    other device clock parameters configuration:
 226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC
 227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) PeriphClkInit.AdcClockSelection = RCC_ADCPLLCLK2_OFF
 228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                (+++) HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit)
 229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) ADC pins configuration
 231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Disable the clock for the ADC GPIOs
 232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_DISABLE()
 233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Disable the NVIC for ADC
 236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Deinitialize the DMA
 240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_DMA_Init().
 241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (++) Disable the NVIC for DMA
 242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
 245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     *** Callback registration ***
 247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     =============================================
 248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
 249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      The compilation flag USE_HAL_ADC_REGISTER_CALLBACKS, when set to 1,
 251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      allows the user to configure dynamically the driver callbacks.
 252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      Use Functions HAL_ADC_RegisterCallback()
 253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      to register an interrupt callback.
 254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
 255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      Function HAL_ADC_RegisterCallback() allows to register following callbacks:
 257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) ConvCpltCallback               : ADC conversion complete callback
 258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) ConvHalfCpltCallback           : ADC conversion DMA half-transfer callback
 259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) LevelOutOfWindowCallback       : ADC analog watchdog 1 callback
 260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) ErrorCallback                  : ADC error callback
ARM GAS  /tmp/ccelol6o.s 			page 6


 261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) InjectedConvCpltCallback       : ADC group injected conversion complete callback
 262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) MspInitCallback                : ADC Msp Init callback
 263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) MspDeInitCallback              : ADC Msp DeInit callback
 264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      This function takes as parameters the HAL peripheral handle, the Callback ID
 265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      and a pointer to the user callback function.
 266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
 267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      Use function HAL_ADC_UnRegisterCallback to reset a callback to the default
 269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      weak function.
 270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
 271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      HAL_ADC_UnRegisterCallback takes as parameters the HAL peripheral handle,
 273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      and the Callback ID.
 274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      This function allows to reset following callbacks:
 275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) ConvCpltCallback               : ADC conversion complete callback
 276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) ConvHalfCpltCallback           : ADC conversion DMA half-transfer callback
 277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) LevelOutOfWindowCallback       : ADC analog watchdog 1 callback
 278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) ErrorCallback                  : ADC error callback
 279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) InjectedConvCpltCallback       : ADC group injected conversion complete callback
 280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) MspInitCallback                : ADC Msp Init callback
 281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (+) MspDeInitCallback              : ADC Msp DeInit callback
 282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
 283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      By default, after the HAL_ADC_Init() and when the state is HAL_ADC_STATE_RESET
 285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      all callbacks are set to the corresponding weak functions:
 286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      examples HAL_ADC_ConvCpltCallback(), HAL_ADC_ErrorCallback().
 287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      Exception done for MspInit and MspDeInit functions that are
 288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      reset to the legacy weak functions in the HAL_ADC_Init()/ HAL_ADC_DeInit() only when
 289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      these callbacks are null (not registered beforehand).
 290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
 291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      If MspInit or MspDeInit are not null, the HAL_ADC_Init()/ HAL_ADC_DeInit()
 293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      keep and use the user MspInit/MspDeInit callbacks (registered beforehand) whatever the state.
 294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
 295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      Callbacks can be registered/unregistered in HAL_ADC_STATE_READY state only.
 297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      Exception done MspInit/MspDeInit functions that can be registered/unregistered
 298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      in HAL_ADC_STATE_READY or HAL_ADC_STATE_RESET state,
 299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
 300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
 301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      Then, the user first registers the MspInit/MspDeInit user callbacks
 303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      using HAL_ADC_RegisterCallback() before calling HAL_ADC_DeInit()
 304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      or HAL_ADC_Init() function.
 305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      [..]
 306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      When the compilation flag USE_HAL_ADC_REGISTER_CALLBACKS is set to 0 or
 308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      not defined, the callback registration feature is not available and all callbacks
 309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      are set to the corresponding weak functions.
 310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   @endverbatim
 312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Includes ------------------------------------------------------------------*/
 315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #include "stm32f1xx_hal.h"
 316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @addtogroup STM32F1xx_HAL_Driver
ARM GAS  /tmp/ccelol6o.s 			page 7


 318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC ADC
 322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief ADC HAL module driver
 323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #ifdef HAL_ADC_MODULE_ENABLED
 327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Private typedef -----------------------------------------------------------*/
 329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Private define ------------------------------------------------------------*/
 330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Private_Constants ADC Private Constants
 331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Timeout values for ADC enable and disable settling time.                 */
 335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Values defined to be higher than worst cases: low clocks freq,           */
 336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* maximum prescaler.                                                       */
 337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Ex of profile low frequency : Clock source at 0.1 MHz, ADC clock         */
 338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* prescaler 4, sampling time 12.5 ADC clock cycles, resolution 12 bits.    */
 339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Unit: ms                                                                 */
 340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   #define ADC_ENABLE_TIMEOUT              2U
 341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   #define ADC_DISABLE_TIMEOUT             2U
 342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Delay for ADC stabilization time.                                        */
 344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Maximum delay is 1us (refer to device datasheet, parameter tSTAB).       */
 345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Unit: us                                                                 */
 346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   #define ADC_STAB_DELAY_US               1U
 347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Delay for temperature sensor stabilization time.                         */
 349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Maximum delay is 10us (refer to device datasheet, parameter tSTART).     */
 350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Unit: us                                                                 */
 351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   #define ADC_TEMPSENSOR_DELAY_US         10U
 352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
 355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Private macro -------------------------------------------------------------*/
 358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Private variables ---------------------------------------------------------*/
 359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Private function prototypes -----------------------------------------------*/
 360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
 361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
 365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /* Exported functions --------------------------------------------------------*/
 368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions ADC Exported Functions
 370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group1 Initialization/de-initialization functions 
 374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief    Initialization and Configuration functions
ARM GAS  /tmp/ccelol6o.s 			page 8


 375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *
 376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @verbatim    
 377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
 378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****               ##### Initialization and de-initialization functions #####
 379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
 380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Initialize and configure the ADC. 
 382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) De-initialize the ADC.
 383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @endverbatim
 385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
 386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Initializes the ADC peripheral and regular group according to  
 390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         parameters specified in structure "ADC_InitTypeDef".
 391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   As prerequisite, ADC clock must be configured at RCC top level
 392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         (clock source APB2).
 393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         See commented example code below that can be copied and uncommented 
 394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         into HAL_ADC_MspInit().
 395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
 396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         This function initializes the ADC MSP (HAL_ADC_MspInit()) only when
 397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         coming from ADC state reset. Following calls to this function can
 398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         be used to reconfigure some parameters of ADC_InitTypeDef  
 399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         structure on the fly, without modifying MSP configuration. If ADC  
 400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         MSP has to be modified again, HAL_ADC_DeInit() must be called
 401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         before HAL_ADC_Init().
 402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
 403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
 404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         "ADC_InitTypeDef".
 405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   This function configures the ADC within 2 scopes: scope of entire 
 406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         ADC and scope of regular group. For parameters details, see comments 
 407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         of structure "ADC_InitTypeDef".
 408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
 410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
 412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
  27              		.loc 1 412 1
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 24
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 86B0     		sub	sp, sp, #24
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 32
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 7860     		str	r0, [r7, #4]
 413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  43              		.loc 1 413 21
  44 0008 0023     		movs	r3, #0
ARM GAS  /tmp/ccelol6o.s 			page 9


  45 000a FB75     		strb	r3, [r7, #23]
 414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tmp_cr1 = 0U;
  46              		.loc 1 414 12
  47 000c 0023     		movs	r3, #0
  48 000e 3B61     		str	r3, [r7, #16]
 415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tmp_cr2 = 0U;
  49              		.loc 1 415 12
  50 0010 0023     		movs	r3, #0
  51 0012 BB60     		str	r3, [r7, #8]
 416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tmp_sqr1 = 0U;
  52              		.loc 1 416 12
  53 0014 0023     		movs	r3, #0
  54 0016 FB60     		str	r3, [r7, #12]
 417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check ADC handle */
 419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(hadc == NULL)
  55              		.loc 1 419 5
  56 0018 7B68     		ldr	r3, [r7, #4]
  57 001a 002B     		cmp	r3, #0
  58 001c 01D1     		bne	.L2
 420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     return HAL_ERROR;
  59              		.loc 1 421 12
  60 001e 0123     		movs	r3, #1
  61 0020 BEE0     		b	.L3
  62              	.L2:
 422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
  63              		.loc 1 431 16
  64 0022 7B68     		ldr	r3, [r7, #4]
  65 0024 9B68     		ldr	r3, [r3, #8]
  66              		.loc 1 431 5
  67 0026 002B     		cmp	r3, #0
 432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(hadc->Init.DiscontinuousConvMode != DISABLE)
 436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* As prerequisite, into HAL_ADC_MspInit(), ADC clock must be configured    */
 442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* at RCC top level.                                                        */
 443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Refer to header of this file for more details on clock enabling          */
 444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* procedure.                                                               */
 445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Actions performed only if ADC is coming from state reset:                */
 447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* - Initialization of ADC MSP                                              */
ARM GAS  /tmp/ccelol6o.s 			page 10


 448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (hadc->State == HAL_ADC_STATE_RESET)
  68              		.loc 1 448 11
  69 0028 7B68     		ldr	r3, [r7, #4]
  70 002a 9B6A     		ldr	r3, [r3, #40]
  71              		.loc 1 448 6
  72 002c 002B     		cmp	r3, #0
  73 002e 09D1     		bne	.L5
 449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Initialize ADC error code */
 451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
  74              		.loc 1 451 5
  75 0030 7B68     		ldr	r3, [r7, #4]
  76 0032 0022     		movs	r2, #0
  77 0034 DA62     		str	r2, [r3, #44]
 452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Allocate lock resource and initialize it */
 454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->Lock = HAL_UNLOCKED;
  78              		.loc 1 454 16
  79 0036 7B68     		ldr	r3, [r7, #4]
  80 0038 0022     		movs	r2, #0
  81 003a 83F82420 		strb	r2, [r3, #36]
 455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Init the ADC Callback settings */
 458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak 
 459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak 
 460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak 
 461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak 
 462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak 
 463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (hadc->MspInitCallback == NULL)
 465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Init the low level hardware */
 470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->MspInitCallback(hadc);
 471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #else
 472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Init the low level hardware */
 473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     HAL_ADC_MspInit(hadc);
  82              		.loc 1 473 5
  83 003e 7868     		ldr	r0, [r7, #4]
  84 0040 FFF7FEFF 		bl	HAL_ADC_MspInit
  85              	.L5:
 474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
 478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
 479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Note: In case of ADC already enabled, precaution to not launch an        */
 480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*       unwanted conversion while modifying register CR2 by writing 1 to   */
 481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*       bit ADON.                                                          */
 482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
  86              		.loc 1 482 20
  87 0044 7868     		ldr	r0, [r7, #4]
  88 0046 FFF7FEFF 		bl	ADC_ConversionStop_Disable
  89 004a 0346     		mov	r3, r0
ARM GAS  /tmp/ccelol6o.s 			page 11


  90 004c FB75     		strb	r3, [r7, #23]
 483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* correctly completed.                                                     */
 487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
  91              		.loc 1 487 7
  92 004e 7B68     		ldr	r3, [r7, #4]
  93 0050 9B6A     		ldr	r3, [r3, #40]
  94 0052 03F01003 		and	r3, r3, #16
  95              		.loc 1 487 6
  96 0056 002B     		cmp	r3, #0
  97 0058 40F09980 		bne	.L6
  98              		.loc 1 487 65 discriminator 1
  99 005c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 100 005e 002B     		cmp	r3, #0
 101 0060 40F09580 		bne	.L6
 488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (tmp_hal_status == HAL_OK)                                  )
 489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
 491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 102              		.loc 1 491 5
 103 0064 7B68     		ldr	r3, [r7, #4]
 104 0066 9B6A     		ldr	r3, [r3, #40]
 105 0068 23F48853 		bic	r3, r3, #4352
 106 006c 23F00203 		bic	r3, r3, #2
 107 0070 43F00202 		orr	r2, r3, #2
 108 0074 7B68     		ldr	r3, [r7, #4]
 109 0076 9A62     		str	r2, [r3, #40]
 492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_BUSY_INTERNAL);
 494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC parameters */
 496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Configuration of ADC:                                                  */
 498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - data alignment                                                      */
 499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - external trigger to start conversion                                */
 500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - external trigger polarity (always set to 1, because needed for all  */
 501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*    triggers: external trigger of SW start)                             */
 502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - continuous conversion mode                                          */
 503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
 504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       HAL_ADC_Start_xxx functions because if set in this function,     */
 505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       a conversion on injected group would start a conversion also on  */
 506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       regular group after ADC enabling.                                */
 507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_cr2 |= (hadc->Init.DataAlign                                          |
 110              		.loc 1 507 27
 111 0078 7B68     		ldr	r3, [r7, #4]
 112 007a 5A68     		ldr	r2, [r3, #4]
 508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 113              		.loc 1 508 17
 114 007c 7B68     		ldr	r3, [r7, #4]
 115 007e DB69     		ldr	r3, [r3, #28]
 507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 116              		.loc 1 507 79
 117 0080 1A43     		orrs	r2, r2, r3
 509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 118              		.loc 1 509 17
ARM GAS  /tmp/ccelol6o.s 			page 12


 119 0082 7B68     		ldr	r3, [r7, #4]
 120 0084 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 121 0086 5B00     		lsls	r3, r3, #1
 508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 122              		.loc 1 508 79
 123 0088 1343     		orrs	r3, r3, r2
 507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                 ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 124              		.loc 1 507 13
 125 008a BA68     		ldr	r2, [r7, #8]
 126 008c 1343     		orrs	r3, r3, r2
 127 008e BB60     		str	r3, [r7, #8]
 510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Configuration of ADC:                                                  */
 512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - scan mode                                                           */
 513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - discontinuous mode disable/enable                                   */
 514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - discontinuous mode number of conversions                            */
 515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 128              		.loc 1 515 17
 129 0090 7B68     		ldr	r3, [r7, #4]
 130 0092 9B68     		ldr	r3, [r3, #8]
 131 0094 B3F5807F 		cmp	r3, #256
 132 0098 03D0     		beq	.L7
 133              		.loc 1 515 17 is_stmt 0 discriminator 2
 134 009a 7B68     		ldr	r3, [r7, #4]
 135 009c 9B68     		ldr	r3, [r3, #8]
 136 009e 012B     		cmp	r3, #1
 137 00a0 02D1     		bne	.L8
 138              	.L7:
 139              		.loc 1 515 17 discriminator 3
 140 00a2 4FF48073 		mov	r3, #256
 141 00a6 00E0     		b	.L9
 142              	.L8:
 143              		.loc 1 515 17 discriminator 4
 144 00a8 0023     		movs	r3, #0
 145              	.L9:
 146              		.loc 1 515 13 is_stmt 1 discriminator 6
 147 00aa 3A69     		ldr	r2, [r7, #16]
 148 00ac 1343     		orrs	r3, r3, r2
 149 00ae 3B61     		str	r3, [r7, #16]
 516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable discontinuous mode only if continuous mode is disabled */
 518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
 519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
 520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (hadc->Init.DiscontinuousConvMode == ENABLE)
 150              		.loc 1 520 19 discriminator 6
 151 00b0 7B68     		ldr	r3, [r7, #4]
 152 00b2 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 153              		.loc 1 520 8 discriminator 6
 154 00b4 012B     		cmp	r3, #1
 155 00b6 19D1     		bne	.L10
 521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (hadc->Init.ContinuousConvMode == DISABLE)
 156              		.loc 1 522 21
 157 00b8 7B68     		ldr	r3, [r7, #4]
 158 00ba 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 159              		.loc 1 522 10
 160 00bc 002B     		cmp	r3, #0
ARM GAS  /tmp/ccelol6o.s 			page 13


 161 00be 09D1     		bne	.L11
 523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Enable the selected ADC regular discontinuous mode */
 525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set the number of channels to be converted in discontinuous mode */
 526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 162              		.loc 1 526 9
 163 00c0 7B68     		ldr	r3, [r7, #4]
 164 00c2 9B69     		ldr	r3, [r3, #24]
 165 00c4 013B     		subs	r3, r3, #1
 166 00c6 5A03     		lsls	r2, r3, #13
 167 00c8 3B69     		ldr	r3, [r7, #16]
 168 00ca 1343     		orrs	r3, r3, r2
 169 00cc 43F40063 		orr	r3, r3, #2048
 170 00d0 3B61     		str	r3, [r7, #16]
 171 00d2 0BE0     		b	.L10
 172              	.L11:
 527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                          ADC_CR1_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion)  );
 528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       else
 530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* ADC regular group settings continuous and sequencer discontinuous*/
 532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* cannot be enabled simultaneously.                                */
 533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Update ADC state machine to error */
 535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 173              		.loc 1 535 9
 174 00d4 7B68     		ldr	r3, [r7, #4]
 175 00d6 9B6A     		ldr	r3, [r3, #40]
 176 00d8 43F02002 		orr	r2, r3, #32
 177 00dc 7B68     		ldr	r3, [r7, #4]
 178 00de 9A62     		str	r2, [r3, #40]
 536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC error code to ADC IP internal error */
 538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 179              		.loc 1 538 9
 180 00e0 7B68     		ldr	r3, [r7, #4]
 181 00e2 DB6A     		ldr	r3, [r3, #44]
 182 00e4 43F00102 		orr	r2, r3, #1
 183 00e8 7B68     		ldr	r3, [r7, #4]
 184 00ea DA62     		str	r2, [r3, #44]
 185              	.L10:
 539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
 540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update ADC configuration register CR1 with previous settings */
 543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CR1,
 186              		.loc 1 543 7
 187 00ec 7B68     		ldr	r3, [r7, #4]
 188 00ee 1B68     		ldr	r3, [r3]
 189 00f0 5B68     		ldr	r3, [r3, #4]
 190 00f2 23F46941 		bic	r1, r3, #59648
 191 00f6 7B68     		ldr	r3, [r7, #4]
 192 00f8 1B68     		ldr	r3, [r3]
 193 00fa 3A69     		ldr	r2, [r7, #16]
 194 00fc 0A43     		orrs	r2, r2, r1
 195 00fe 5A60     		str	r2, [r3, #4]
 544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR1_SCAN    |
ARM GAS  /tmp/ccelol6o.s 			page 14


 545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR1_DISCEN  |
 546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR1_DISCNUM    ,
 547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  tmp_cr1             );
 548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update ADC configuration register CR2 with previous settings */
 550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CR2,
 196              		.loc 1 550 7
 197 0100 7B68     		ldr	r3, [r7, #4]
 198 0102 1B68     		ldr	r3, [r3]
 199 0104 9A68     		ldr	r2, [r3, #8]
 200 0106 284B     		ldr	r3, .L17
 201 0108 1340     		ands	r3, r3, r2
 202 010a 7A68     		ldr	r2, [r7, #4]
 203 010c 1268     		ldr	r2, [r2]
 204 010e B968     		ldr	r1, [r7, #8]
 205 0110 0B43     		orrs	r3, r3, r1
 206 0112 9360     		str	r3, [r2, #8]
 551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR2_ALIGN   |
 552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR2_EXTSEL  |
 553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR2_EXTTRIG |
 554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  ADC_CR2_CONT       ,
 555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                  tmp_cr2             );
 556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Configuration of regular group sequencer:                              */
 558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - if scan mode is disabled, regular channels sequence length is set to */
 559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   0x00: 1 channel converted (channel on regular rank 1)                */
 560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   Parameter "NbrOfConversion" is discarded.                            */
 561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   Note: Scan mode is present by hardware on this device and, if        */
 562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
 563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
 564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - if scan mode is enabled, regular channels sequence length is set to  */
 565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*   parameter "NbrOfConversion"                                          */
 566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 207              		.loc 1 566 9
 208 0114 7B68     		ldr	r3, [r7, #4]
 209 0116 9B68     		ldr	r3, [r3, #8]
 210              		.loc 1 566 8
 211 0118 B3F5807F 		cmp	r3, #256
 212 011c 03D0     		beq	.L12
 213              		.loc 1 566 9 discriminator 1
 214 011e 7B68     		ldr	r3, [r7, #4]
 215 0120 9B68     		ldr	r3, [r3, #8]
 216              		.loc 1 566 51 discriminator 1
 217 0122 012B     		cmp	r3, #1
 218 0124 04D1     		bne	.L13
 219              	.L12:
 567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 220              		.loc 1 568 18
 221 0126 7B68     		ldr	r3, [r7, #4]
 222 0128 1B69     		ldr	r3, [r3, #16]
 223 012a 013B     		subs	r3, r3, #1
 224              		.loc 1 568 16
 225 012c 1B05     		lsls	r3, r3, #20
 226 012e FB60     		str	r3, [r7, #12]
 227              	.L13:
 569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
ARM GAS  /tmp/ccelol6o.s 			page 15


 570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR1,
 228              		.loc 1 571 5
 229 0130 7B68     		ldr	r3, [r7, #4]
 230 0132 1B68     		ldr	r3, [r3]
 231 0134 DB6A     		ldr	r3, [r3, #44]
 232 0136 23F47001 		bic	r1, r3, #15728640
 233 013a 7B68     		ldr	r3, [r7, #4]
 234 013c 1B68     		ldr	r3, [r3]
 235 013e FA68     		ldr	r2, [r7, #12]
 236 0140 0A43     		orrs	r2, r2, r1
 237 0142 DA62     		str	r2, [r3, #44]
 572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR1_L          ,
 573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                tmp_sqr1             );
 574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Check back that ADC registers have effectively been configured to      */
 576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* ensure of no potential problem of ADC core IP clocking.                */
 577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Check through register CR2 (excluding bits set in other functions:     */
 578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
 579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
 580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* measurement path bit (TSVREFE).                                        */
 581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 238              		.loc 1 581 9
 239 0144 7B68     		ldr	r3, [r7, #4]
 240 0146 1B68     		ldr	r3, [r3]
 241 0148 9A68     		ldr	r2, [r3, #8]
 242 014a 184B     		ldr	r3, .L17+4
 243 014c 1340     		ands	r3, r3, r2
 244              		.loc 1 581 8
 245 014e BA68     		ldr	r2, [r7, #8]
 246 0150 9A42     		cmp	r2, r3
 247 0152 0BD1     		bne	.L14
 582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
 583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
 584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_TSVREFE                     ))
 585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          == tmp_cr2)
 586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC error code to none */
 588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 248              		.loc 1 588 7
 249 0154 7B68     		ldr	r3, [r7, #4]
 250 0156 0022     		movs	r2, #0
 251 0158 DA62     		str	r2, [r3, #44]
 589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set the ADC state */
 591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 252              		.loc 1 591 7
 253 015a 7B68     		ldr	r3, [r7, #4]
 254 015c 9B6A     		ldr	r3, [r3, #40]
 255 015e 23F00303 		bic	r3, r3, #3
 256 0162 43F00102 		orr	r2, r3, #1
 257 0166 7B68     		ldr	r3, [r7, #4]
 258 0168 9A62     		str	r2, [r3, #40]
 581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
 259              		.loc 1 581 8
 260 016a 18E0     		b	.L16
 261              	.L14:
ARM GAS  /tmp/ccelol6o.s 			page 16


 592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
 594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
 596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Update ADC state machine to error */
 598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 262              		.loc 1 598 7
 263 016c 7B68     		ldr	r3, [r7, #4]
 264 016e 9B6A     		ldr	r3, [r3, #40]
 265 0170 23F01203 		bic	r3, r3, #18
 266 0174 43F01002 		orr	r2, r3, #16
 267 0178 7B68     		ldr	r3, [r7, #4]
 268 017a 9A62     		str	r2, [r3, #40]
 599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_BUSY_INTERNAL,
 600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_ERROR_INTERNAL);
 601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC error code to ADC IP internal error */
 603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 269              		.loc 1 603 7
 270 017c 7B68     		ldr	r3, [r7, #4]
 271 017e DB6A     		ldr	r3, [r3, #44]
 272 0180 43F00102 		orr	r2, r3, #1
 273 0184 7B68     		ldr	r3, [r7, #4]
 274 0186 DA62     		str	r2, [r3, #44]
 604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       tmp_hal_status = HAL_ERROR;
 275              		.loc 1 605 22
 276 0188 0123     		movs	r3, #1
 277 018a FB75     		strb	r3, [r7, #23]
 581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                         ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
 278              		.loc 1 581 8
 279 018c 07E0     		b	.L16
 280              	.L6:
 606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
 610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update ADC state machine to error */
 612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 281              		.loc 1 612 5
 282 018e 7B68     		ldr	r3, [r7, #4]
 283 0190 9B6A     		ldr	r3, [r3, #40]
 284 0192 43F01002 		orr	r2, r3, #16
 285 0196 7B68     		ldr	r3, [r7, #4]
 286 0198 9A62     		str	r2, [r3, #40]
 613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 287              		.loc 1 614 20
 288 019a 0123     		movs	r3, #1
 289 019c FB75     		strb	r3, [r7, #23]
 290              	.L16:
 615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
 618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
ARM GAS  /tmp/ccelol6o.s 			page 17


 291              		.loc 1 618 10
 292 019e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 293              	.L3:
 619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 294              		.loc 1 619 1
 295 01a0 1846     		mov	r0, r3
 296 01a2 1837     		adds	r7, r7, #24
 297              	.LCFI3:
 298              		.cfi_def_cfa_offset 8
 299 01a4 BD46     		mov	sp, r7
 300              	.LCFI4:
 301              		.cfi_def_cfa_register 13
 302              		@ sp needed
 303 01a6 80BD     		pop	{r7, pc}
 304              	.L18:
 305              		.align	2
 306              	.L17:
 307 01a8 FDF7E1FF 		.word	-1968131
 308 01ac FE0E1FFF 		.word	-14741762
 309              		.cfi_endproc
 310              	.LFE65:
 312              		.section	.text.HAL_ADC_DeInit,"ax",%progbits
 313              		.align	1
 314              		.global	HAL_ADC_DeInit
 315              		.syntax unified
 316              		.thumb
 317              		.thumb_func
 319              	HAL_ADC_DeInit:
 320              	.LFB66:
 620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Deinitialize the ADC peripheral registers to their default reset
 623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         values, with deinitialization of the ADC MSP.
 624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         If needed, the example code can be copied and uncommented into
 625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         function HAL_ADC_MspDeInit().
 626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
 628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
 630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 321              		.loc 1 630 1
 322              		.cfi_startproc
 323              		@ args = 0, pretend = 0, frame = 16
 324              		@ frame_needed = 1, uses_anonymous_args = 0
 325 0000 80B5     		push	{r7, lr}
 326              	.LCFI5:
 327              		.cfi_def_cfa_offset 8
 328              		.cfi_offset 7, -8
 329              		.cfi_offset 14, -4
 330 0002 84B0     		sub	sp, sp, #16
 331              	.LCFI6:
 332              		.cfi_def_cfa_offset 24
 333 0004 00AF     		add	r7, sp, #0
 334              	.LCFI7:
 335              		.cfi_def_cfa_register 7
 336 0006 7860     		str	r0, [r7, #4]
 631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
ARM GAS  /tmp/ccelol6o.s 			page 18


 337              		.loc 1 631 21
 338 0008 0023     		movs	r3, #0
 339 000a FB73     		strb	r3, [r7, #15]
 632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check ADC handle */
 634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(hadc == NULL)
 340              		.loc 1 634 5
 341 000c 7B68     		ldr	r3, [r7, #4]
 342 000e 002B     		cmp	r3, #0
 343 0010 01D1     		bne	.L20
 635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      return HAL_ERROR;
 344              		.loc 1 636 13
 345 0012 0123     		movs	r3, #1
 346 0014 ADE0     		b	.L21
 347              	.L20:
 637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
 640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set ADC state */
 643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 348              		.loc 1 643 3
 349 0016 7B68     		ldr	r3, [r7, #4]
 350 0018 9B6A     		ldr	r3, [r3, #40]
 351 001a 43F00202 		orr	r2, r3, #2
 352 001e 7B68     		ldr	r3, [r7, #4]
 353 0020 9A62     		str	r2, [r3, #40]
 644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
 646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
 647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 354              		.loc 1 647 20
 355 0022 7868     		ldr	r0, [r7, #4]
 356 0024 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 357 0028 0346     		mov	r3, r0
 358 002a FB73     		strb	r3, [r7, #15]
 648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* correctly completed.                                                     */
 652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 359              		.loc 1 652 6
 360 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 361 002e 002B     		cmp	r3, #0
 362 0030 40F09A80 		bne	.L22
 653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* ========== Reset ADC registers ========== */
 655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SR */
 660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 363              		.loc 1 660 5
 364 0034 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccelol6o.s 			page 19


 365 0036 1B68     		ldr	r3, [r3]
 366 0038 6FF01F02 		mvn	r2, #31
 367 003c 1A60     		str	r2, [r3]
 661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                 ADC_FLAG_JSTRT | ADC_FLAG_STRT));
 662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                          
 663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register CR1 */
 664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_AWDEN   | ADC_CR1_JAWDEN | ADC_CR1_DISCNUM | 
 368              		.loc 1 664 5
 369 003e 7B68     		ldr	r3, [r7, #4]
 370 0040 1B68     		ldr	r3, [r3]
 371 0042 5968     		ldr	r1, [r3, #4]
 372 0044 7B68     		ldr	r3, [r7, #4]
 373 0046 1A68     		ldr	r2, [r3]
 374 0048 4C4B     		ldr	r3, .L23
 375 004a 0B40     		ands	r3, r3, r1
 376 004c 5360     		str	r3, [r2, #4]
 665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR1_JDISCEN | ADC_CR1_DISCEN | ADC_CR1_JAUTO   | 
 666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR1_AWDSGL  | ADC_CR1_SCAN   | ADC_CR1_JEOCIE  |   
 667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR1_AWDIE   | ADC_CR1_EOCIE  | ADC_CR1_AWDCH    ));
 668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register CR2 */
 670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->CR2, (ADC_CR2_TSVREFE | ADC_CR2_SWSTART | ADC_CR2_JSWSTART | 
 377              		.loc 1 670 5
 378 004e 7B68     		ldr	r3, [r7, #4]
 379 0050 1B68     		ldr	r3, [r3]
 380 0052 9968     		ldr	r1, [r3, #8]
 381 0054 7B68     		ldr	r3, [r7, #4]
 382 0056 1A68     		ldr	r2, [r3]
 383 0058 494B     		ldr	r3, .L23+4
 384 005a 0B40     		ands	r3, r3, r1
 385 005c 9360     		str	r3, [r2, #8]
 671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR2_EXTTRIG | ADC_CR2_EXTSEL  | ADC_CR2_JEXTTRIG |  
 672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR2_JEXTSEL | ADC_CR2_ALIGN   | ADC_CR2_DMA      |        
 673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR2_RSTCAL  | ADC_CR2_CAL     | ADC_CR2_CONT     |         
 674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_CR2_ADON                                          ));
 675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SMPR1 */
 677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SMPR1, (ADC_SMPR1_SMP17 | ADC_SMPR1_SMP16 | ADC_SMPR1_SMP15 | 
 386              		.loc 1 677 5
 387 005e 7B68     		ldr	r3, [r7, #4]
 388 0060 1B68     		ldr	r3, [r3]
 389 0062 DA68     		ldr	r2, [r3, #12]
 390 0064 7B68     		ldr	r3, [r7, #4]
 391 0066 1B68     		ldr	r3, [r3]
 392 0068 02F07F42 		and	r2, r2, #-16777216
 393 006c DA60     		str	r2, [r3, #12]
 678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR1_SMP14 | ADC_SMPR1_SMP13 | ADC_SMPR1_SMP12 | 
 679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR1_SMP11 | ADC_SMPR1_SMP10                    ));
 680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SMPR2 */
 682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP9 | ADC_SMPR2_SMP8 | ADC_SMPR2_SMP7 | 
 394              		.loc 1 682 5
 395 006e 7B68     		ldr	r3, [r7, #4]
 396 0070 1B68     		ldr	r3, [r3]
 397 0072 1A69     		ldr	r2, [r3, #16]
 398 0074 7B68     		ldr	r3, [r7, #4]
 399 0076 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccelol6o.s 			page 20


 400 0078 02F04042 		and	r2, r2, #-1073741824
 401 007c 1A61     		str	r2, [r3, #16]
 683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR2_SMP6 | ADC_SMPR2_SMP5 | ADC_SMPR2_SMP4 | 
 684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR2_SMP3 | ADC_SMPR2_SMP2 | ADC_SMPR2_SMP1 | 
 685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                       ADC_SMPR2_SMP0                                    ));
 686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR1 */
 688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 402              		.loc 1 688 5
 403 007e 7B68     		ldr	r3, [r7, #4]
 404 0080 1B68     		ldr	r3, [r3]
 405 0082 5B69     		ldr	r3, [r3, #20]
 406 0084 7A68     		ldr	r2, [r7, #4]
 407 0086 1268     		ldr	r2, [r2]
 408 0088 23F47F63 		bic	r3, r3, #4080
 409 008c 23F00F03 		bic	r3, r3, #15
 410 0090 5361     		str	r3, [r2, #20]
 689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR2 */
 690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 411              		.loc 1 690 5
 412 0092 7B68     		ldr	r3, [r7, #4]
 413 0094 1B68     		ldr	r3, [r3]
 414 0096 9B69     		ldr	r3, [r3, #24]
 415 0098 7A68     		ldr	r2, [r7, #4]
 416 009a 1268     		ldr	r2, [r2]
 417 009c 23F47F63 		bic	r3, r3, #4080
 418 00a0 23F00F03 		bic	r3, r3, #15
 419 00a4 9361     		str	r3, [r2, #24]
 691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR3 */
 692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 420              		.loc 1 692 5
 421 00a6 7B68     		ldr	r3, [r7, #4]
 422 00a8 1B68     		ldr	r3, [r3]
 423 00aa DB69     		ldr	r3, [r3, #28]
 424 00ac 7A68     		ldr	r2, [r7, #4]
 425 00ae 1268     		ldr	r2, [r2]
 426 00b0 23F47F63 		bic	r3, r3, #4080
 427 00b4 23F00F03 		bic	r3, r3, #15
 428 00b8 D361     		str	r3, [r2, #28]
 693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JOFR4 */
 694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 429              		.loc 1 694 5
 430 00ba 7B68     		ldr	r3, [r7, #4]
 431 00bc 1B68     		ldr	r3, [r3]
 432 00be 1B6A     		ldr	r3, [r3, #32]
 433 00c0 7A68     		ldr	r2, [r7, #4]
 434 00c2 1268     		ldr	r2, [r2]
 435 00c4 23F47F63 		bic	r3, r3, #4080
 436 00c8 23F00F03 		bic	r3, r3, #15
 437 00cc 1362     		str	r3, [r2, #32]
 695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register HTR */
 697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 438              		.loc 1 697 5
 439 00ce 7B68     		ldr	r3, [r7, #4]
 440 00d0 1B68     		ldr	r3, [r3]
 441 00d2 5B6A     		ldr	r3, [r3, #36]
ARM GAS  /tmp/ccelol6o.s 			page 21


 442 00d4 7A68     		ldr	r2, [r7, #4]
 443 00d6 1268     		ldr	r2, [r2]
 444 00d8 23F47F63 		bic	r3, r3, #4080
 445 00dc 23F00F03 		bic	r3, r3, #15
 446 00e0 5362     		str	r3, [r2, #36]
 698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register LTR */
 699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 447              		.loc 1 699 5
 448 00e2 7B68     		ldr	r3, [r7, #4]
 449 00e4 1B68     		ldr	r3, [r3]
 450 00e6 9B6A     		ldr	r3, [r3, #40]
 451 00e8 7A68     		ldr	r2, [r7, #4]
 452 00ea 1268     		ldr	r2, [r2]
 453 00ec 23F47F63 		bic	r3, r3, #4080
 454 00f0 23F00F03 		bic	r3, r3, #15
 455 00f4 9362     		str	r3, [r2, #40]
 700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SQR1 */
 702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 456              		.loc 1 702 5
 457 00f6 7B68     		ldr	r3, [r7, #4]
 458 00f8 1B68     		ldr	r3, [r3]
 459 00fa DA6A     		ldr	r2, [r3, #44]
 460 00fc 7B68     		ldr	r3, [r7, #4]
 461 00fe 1B68     		ldr	r3, [r3]
 462 0100 02F07F42 		and	r2, r2, #-16777216
 463 0104 DA62     		str	r2, [r3, #44]
 703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
 704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
 705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SQR1 */
 707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 464              		.loc 1 707 5
 465 0106 7B68     		ldr	r3, [r7, #4]
 466 0108 1B68     		ldr	r3, [r3]
 467 010a DA6A     		ldr	r2, [r3, #44]
 468 010c 7B68     		ldr	r3, [r7, #4]
 469 010e 1B68     		ldr	r3, [r3]
 470 0110 02F07F42 		and	r2, r2, #-16777216
 471 0114 DA62     		str	r2, [r3, #44]
 708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
 709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
 710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SQR2 */
 712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ12 | ADC_SQR2_SQ11 | ADC_SQR2_SQ10 | 
 472              		.loc 1 712 5
 473 0116 7B68     		ldr	r3, [r7, #4]
 474 0118 1B68     		ldr	r3, [r3]
 475 011a 1A6B     		ldr	r2, [r3, #48]
 476 011c 7B68     		ldr	r3, [r7, #4]
 477 011e 1B68     		ldr	r3, [r3]
 478 0120 02F04042 		and	r2, r2, #-1073741824
 479 0124 1A63     		str	r2, [r3, #48]
 713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR2_SQ9  | ADC_SQR2_SQ8  | ADC_SQR2_SQ7   );
 714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register SQR3 */
 716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ6 | ADC_SQR3_SQ5 | ADC_SQR3_SQ4 | 
ARM GAS  /tmp/ccelol6o.s 			page 22


 480              		.loc 1 716 5
 481 0126 7B68     		ldr	r3, [r7, #4]
 482 0128 1B68     		ldr	r3, [r3]
 483 012a 5A6B     		ldr	r2, [r3, #52]
 484 012c 7B68     		ldr	r3, [r7, #4]
 485 012e 1B68     		ldr	r3, [r3]
 486 0130 02F04042 		and	r2, r2, #-1073741824
 487 0134 5A63     		str	r2, [r3, #52]
 717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_SQR3_SQ3 | ADC_SQR3_SQ2 | ADC_SQR3_SQ1  );
 718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JSQR */
 720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 488              		.loc 1 720 5
 489 0136 7B68     		ldr	r3, [r7, #4]
 490 0138 1B68     		ldr	r3, [r3]
 491 013a 9B6B     		ldr	r3, [r3, #56]
 492 013c 7A68     		ldr	r2, [r7, #4]
 493 013e 1268     		ldr	r2, [r2]
 494 0140 9B0D     		lsrs	r3, r3, #22
 495 0142 9B05     		lsls	r3, r3, #22
 496 0144 9363     		str	r3, [r2, #56]
 721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
 722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ2 | ADC_JSQR_JSQ1  );
 723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register JSQR */
 725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 497              		.loc 1 725 5
 498 0146 7B68     		ldr	r3, [r7, #4]
 499 0148 1B68     		ldr	r3, [r3]
 500 014a 9B6B     		ldr	r3, [r3, #56]
 501 014c 7A68     		ldr	r2, [r7, #4]
 502 014e 1268     		ldr	r2, [r2]
 503 0150 9B0D     		lsrs	r3, r3, #22
 504 0152 9B05     		lsls	r3, r3, #22
 505 0154 9363     		str	r3, [r2, #56]
 726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
 727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                     ADC_JSQR_JSQ2 | ADC_JSQR_JSQ1  );
 728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset register DR */
 730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* bits in access mode read only, no direct reset applicable*/
 731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Reset registers JDR1, JDR2, JDR3, JDR4 */
 733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* bits in access mode read only, no direct reset applicable*/
 734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* ========== Hard reset ADC peripheral ========== */
 736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Performs a global reset of the entire ADC peripheral: ADC state is     */
 737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* forced to a similar state after device power-on.                       */
 738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If needed, copy-paste and uncomment the following reset code into      */
 739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* function "void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)":              */
 740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*                                                                        */
 741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  __HAL_RCC_ADC1_FORCE_RESET()                                          */
 742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  __HAL_RCC_ADC1_RELEASE_RESET()                                        */
 743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (hadc->MspDeInitCallback == NULL)
 746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit  */
ARM GAS  /tmp/ccelol6o.s 			page 23


 748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* DeInit the low level hardware */
 751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->MspDeInitCallback(hadc);
 752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #else
 753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* DeInit the low level hardware */
 754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     HAL_ADC_MspDeInit(hadc);
 506              		.loc 1 754 5
 507 0156 7868     		ldr	r0, [r7, #4]
 508 0158 FFF7FEFF 		bl	HAL_ADC_MspDeInit
 755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC error code to none */
 758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 509              		.loc 1 758 5
 510 015c 7B68     		ldr	r3, [r7, #4]
 511 015e 0022     		movs	r2, #0
 512 0160 DA62     		str	r2, [r3, #44]
 759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
 761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->State = HAL_ADC_STATE_RESET; 
 513              		.loc 1 761 17
 514 0162 7B68     		ldr	r3, [r7, #4]
 515 0164 0022     		movs	r2, #0
 516 0166 9A62     		str	r2, [r3, #40]
 517              	.L22:
 762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
 766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 518              		.loc 1 766 3
 519 0168 7B68     		ldr	r3, [r7, #4]
 520 016a 0022     		movs	r2, #0
 521 016c 83F82420 		strb	r2, [r3, #36]
 767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
 769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 522              		.loc 1 769 10
 523 0170 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 524              	.L21:
 770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 525              		.loc 1 770 1
 526 0172 1846     		mov	r0, r3
 527 0174 1037     		adds	r7, r7, #16
 528              	.LCFI8:
 529              		.cfi_def_cfa_offset 8
 530 0176 BD46     		mov	sp, r7
 531              	.LCFI9:
 532              		.cfi_def_cfa_register 13
 533              		@ sp needed
 534 0178 80BD     		pop	{r7, pc}
 535              	.L24:
 536 017a 00BF     		.align	2
 537              	.L23:
 538 017c 00003FFF 		.word	-12648448
 539 0180 F00601FF 		.word	-16709904
ARM GAS  /tmp/ccelol6o.s 			page 24


 540              		.cfi_endproc
 541              	.LFE66:
 543              		.section	.text.HAL_ADC_MspInit,"ax",%progbits
 544              		.align	1
 545              		.weak	HAL_ADC_MspInit
 546              		.syntax unified
 547              		.thumb
 548              		.thumb_func
 550              	HAL_ADC_MspInit:
 551              	.LFB67:
 771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Initializes the ADC MSP.
 774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
 776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
 778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 552              		.loc 1 778 1
 553              		.cfi_startproc
 554              		@ args = 0, pretend = 0, frame = 8
 555              		@ frame_needed = 1, uses_anonymous_args = 0
 556              		@ link register save eliminated.
 557 0000 80B4     		push	{r7}
 558              	.LCFI10:
 559              		.cfi_def_cfa_offset 4
 560              		.cfi_offset 7, -4
 561 0002 83B0     		sub	sp, sp, #12
 562              	.LCFI11:
 563              		.cfi_def_cfa_offset 16
 564 0004 00AF     		add	r7, sp, #0
 565              	.LCFI12:
 566              		.cfi_def_cfa_register 7
 567 0006 7860     		str	r0, [r7, #4]
 779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
 781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_MspInit must be implemented in the user file.
 783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    */ 
 784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 568              		.loc 1 784 1
 569 0008 00BF     		nop
 570 000a 0C37     		adds	r7, r7, #12
 571              	.LCFI13:
 572              		.cfi_def_cfa_offset 4
 573 000c BD46     		mov	sp, r7
 574              	.LCFI14:
 575              		.cfi_def_cfa_register 13
 576              		@ sp needed
 577 000e 80BC     		pop	{r7}
 578              	.LCFI15:
 579              		.cfi_restore 7
 580              		.cfi_def_cfa_offset 0
 581 0010 7047     		bx	lr
 582              		.cfi_endproc
 583              	.LFE67:
 585              		.section	.text.HAL_ADC_MspDeInit,"ax",%progbits
ARM GAS  /tmp/ccelol6o.s 			page 25


 586              		.align	1
 587              		.weak	HAL_ADC_MspDeInit
 588              		.syntax unified
 589              		.thumb
 590              		.thumb_func
 592              	HAL_ADC_MspDeInit:
 593              	.LFB68:
 785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  DeInitializes the ADC MSP.
 788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
 789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
 790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
 792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 594              		.loc 1 792 1
 595              		.cfi_startproc
 596              		@ args = 0, pretend = 0, frame = 8
 597              		@ frame_needed = 1, uses_anonymous_args = 0
 598              		@ link register save eliminated.
 599 0000 80B4     		push	{r7}
 600              	.LCFI16:
 601              		.cfi_def_cfa_offset 4
 602              		.cfi_offset 7, -4
 603 0002 83B0     		sub	sp, sp, #12
 604              	.LCFI17:
 605              		.cfi_def_cfa_offset 16
 606 0004 00AF     		add	r7, sp, #0
 607              	.LCFI18:
 608              		.cfi_def_cfa_register 7
 609 0006 7860     		str	r0, [r7, #4]
 793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
 795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_MspDeInit must be implemented in the user file.
 797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    */ 
 798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 610              		.loc 1 798 1
 611 0008 00BF     		nop
 612 000a 0C37     		adds	r7, r7, #12
 613              	.LCFI19:
 614              		.cfi_def_cfa_offset 4
 615 000c BD46     		mov	sp, r7
 616              	.LCFI20:
 617              		.cfi_def_cfa_register 13
 618              		@ sp needed
 619 000e 80BC     		pop	{r7}
 620              	.LCFI21:
 621              		.cfi_restore 7
 622              		.cfi_def_cfa_offset 0
 623 0010 7047     		bx	lr
 624              		.cfi_endproc
 625              	.LFE68:
 627              		.section	.text.HAL_ADC_Start,"ax",%progbits
 628              		.align	1
 629              		.global	HAL_ADC_Start
 630              		.syntax unified
ARM GAS  /tmp/ccelol6o.s 			page 26


 631              		.thumb
 632              		.thumb_func
 634              	HAL_ADC_Start:
 635              	.LFB69:
 799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Register a User ADC Callback
 803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         To be used instead of the weak predefined callback
 804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc Pointer to a ADC_HandleTypeDef structure that contains
 805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *                the configuration information for the specified ADC.
 806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  CallbackID ID of the callback to be registered
 807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         This parameter can be one of the following values:
 808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_COMPLETE_CB_ID      ADC conversion complete callback ID
 809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_HALF_CB_ID          ADC conversion complete callback ID
 810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID    ADC analog watchdog 1 callback ID
 811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_ERROR_CB_ID                    ADC error callback ID
 812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID  ADC group injected conversion complet
 813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID                  ADC Msp Init callback ID
 814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID                ADC Msp DeInit callback ID
 815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID MspInit callback ID
 816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID MspDeInit callback ID
 817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  pCallback pointer to the Callback function
 818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
 819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef Callb
 821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef status = HAL_OK;
 823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (pCallback == NULL)
 825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update the error code */
 827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     return HAL_ERROR;
 830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if ((hadc->State & HAL_ADC_STATE_READY) != 0)
 833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     switch (CallbackID)
 835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
 837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->ConvCpltCallback = pCallback;
 838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_CONVERSION_HALF_CB_ID :
 841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->ConvHalfCpltCallback = pCallback;
 842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
 845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->LevelOutOfWindowCallback = pCallback;
 846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_ERROR_CB_ID :
 849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->ErrorCallback = pCallback;
 850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
ARM GAS  /tmp/ccelol6o.s 			page 27


 852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID :
 853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->InjectedConvCpltCallback = pCallback;
 854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
 857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->MspInitCallback = pCallback;
 858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
 861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->MspDeInitCallback = pCallback;
 862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       default :
 865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Update the error code */
 866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Return error status */
 869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         status = HAL_ERROR;
 870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else if (HAL_ADC_STATE_RESET == hadc->State)
 874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     switch (CallbackID)
 876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
 878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->MspInitCallback = pCallback;
 879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
 882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->MspDeInitCallback = pCallback;
 883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       default :
 886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Update the error code */
 887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Return error status */
 890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         status = HAL_ERROR;
 891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
 895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update the error code */
 897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Return error status */
 900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     status =  HAL_ERROR;
 901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return status;
 904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
 906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
 907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Unregister a ADC Callback
 908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         ADC callback is redirected to the weak predefined callback
ARM GAS  /tmp/ccelol6o.s 			page 28


 909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc Pointer to a ADC_HandleTypeDef structure that contains
 910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *                the configuration information for the specified ADC.
 911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  CallbackID ID of the callback to be unregistered
 912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         This parameter can be one of the following values:
 913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_COMPLETE_CB_ID      ADC conversion complete callback ID
 914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_HALF_CB_ID          ADC conversion complete callback ID
 915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID    ADC analog watchdog 1 callback ID
 916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_ERROR_CB_ID                    ADC error callback ID
 917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID  ADC group injected conversion complet
 918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID                  ADC Msp Init callback ID
 919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID                ADC Msp DeInit callback ID
 920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID MspInit callback ID
 921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID MspDeInit callback ID
 922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
 923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
 924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_UnRegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef Cal
 925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef status = HAL_OK;
 927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if ((hadc->State & HAL_ADC_STATE_READY) != 0)
 929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     switch (CallbackID)
 931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
 933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->ConvCpltCallback = HAL_ADC_ConvCpltCallback;
 934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_CONVERSION_HALF_CB_ID :
 937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->ConvHalfCpltCallback = HAL_ADC_ConvHalfCpltCallback;
 938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
 941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->LevelOutOfWindowCallback = HAL_ADC_LevelOutOfWindowCallback;
 942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_ERROR_CB_ID :
 945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->ErrorCallback = HAL_ADC_ErrorCallback;
 946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID :
 949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->InjectedConvCpltCallback = HAL_ADCEx_InjectedConvCpltCallback;
 950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
 953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit              */
 954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
 957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit            */
 958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
 960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       default :
 961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Update the error code */
 962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Return error status */
 965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         status =  HAL_ERROR;
ARM GAS  /tmp/ccelol6o.s 			page 29


 966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else if (HAL_ADC_STATE_RESET == hadc->State)
 970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     switch (CallbackID)
 972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
 974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->MspInitCallback = HAL_ADC_MspInit;                   /* Legacy weak MspInit          
 975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
 978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->MspDeInitCallback = HAL_ADC_MspDeInit;               /* Legacy weak MspDeInit        
 979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       default :
 982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Update the error code */
 983:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
 985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Return error status */
 986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         status =  HAL_ERROR;
 987:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         break;
 988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
 989:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
 991:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update the error code */
 993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
 995:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Return error status */
 996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     status =  HAL_ERROR;
 997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 998:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
 999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return status;
1000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
1001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
1006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1007:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group2 IO operation functions
1009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *  @brief    Input and Output operation functions
1010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *
1011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @verbatim   
1012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
1013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       ##### IO operation functions #####
1014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
1015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]  This section provides functions allowing to:
1016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Start conversion of regular group.
1017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Stop conversion of regular group.
1018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Poll for conversion complete on regular group.
1019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Poll for conversion event.
1020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Get result of regular channel conversion.
1021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Start conversion of regular group and enable interruptions.
1022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Stop conversion of regular group and disable interruptions.
ARM GAS  /tmp/ccelol6o.s 			page 30


1023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Handle ADC interrupt request
1024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Start conversion of regular group and enable DMA transfer.
1025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Stop conversion of regular group and disable ADC DMA transfer.
1026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @endverbatim
1027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
1028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group.
1032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Interruptions enabled in this function: None.
1033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
1035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
1037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 636              		.loc 1 1037 1
 637              		.cfi_startproc
 638              		@ args = 0, pretend = 0, frame = 16
 639              		@ frame_needed = 1, uses_anonymous_args = 0
 640 0000 80B5     		push	{r7, lr}
 641              	.LCFI22:
 642              		.cfi_def_cfa_offset 8
 643              		.cfi_offset 7, -8
 644              		.cfi_offset 14, -4
 645 0002 84B0     		sub	sp, sp, #16
 646              	.LCFI23:
 647              		.cfi_def_cfa_offset 24
 648 0004 00AF     		add	r7, sp, #0
 649              	.LCFI24:
 650              		.cfi_def_cfa_register 7
 651 0006 7860     		str	r0, [r7, #4]
1038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 652              		.loc 1 1038 21
 653 0008 0023     		movs	r3, #0
 654 000a FB73     		strb	r3, [r7, #15]
1039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
1044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 655              		.loc 1 1044 3
 656 000c 7B68     		ldr	r3, [r7, #4]
 657 000e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 658 0012 012B     		cmp	r3, #1
 659 0014 01D1     		bne	.L28
 660              		.loc 1 1044 3 is_stmt 0 discriminator 1
 661 0016 0223     		movs	r3, #2
 662 0018 98E0     		b	.L29
 663              	.L28:
 664              		.loc 1 1044 3 discriminator 2
 665 001a 7B68     		ldr	r3, [r7, #4]
 666 001c 0122     		movs	r2, #1
 667 001e 83F82420 		strb	r2, [r3, #36]
1045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    
1046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Enable the ADC peripheral */
1047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_Enable(hadc);
ARM GAS  /tmp/ccelol6o.s 			page 31


 668              		.loc 1 1047 20 is_stmt 1 discriminator 2
 669 0022 7868     		ldr	r0, [r7, #4]
 670 0024 FFF7FEFF 		bl	ADC_Enable
 671 0028 0346     		mov	r3, r0
 672 002a FB73     		strb	r3, [r7, #15]
1048:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
1050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 673              		.loc 1 1050 6 discriminator 2
 674 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 675 002e 002B     		cmp	r3, #0
 676 0030 40F08780 		bne	.L30
1051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1052:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state                                                          */
1053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
1054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - Set state bitfield related to regular operation                      */
1055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 677              		.loc 1 1055 5
 678 0034 7B68     		ldr	r3, [r7, #4]
 679 0036 9B6A     		ldr	r3, [r3, #40]
 680 0038 23F44073 		bic	r3, r3, #768
 681 003c 23F00103 		bic	r3, r3, #1
 682 0040 43F48072 		orr	r2, r3, #256
 683 0044 7B68     		ldr	r3, [r7, #4]
 684 0046 9A62     		str	r2, [r3, #40]
1056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC,
1057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
1058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set group injected state (from auto-injection) and multimode state     */
1060:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* for all cases of multimode: independent mode, multimode ADC master     */
1061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* or multimode ADC slave (for devices with several ADCs):                */
1062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 685              		.loc 1 1062 9
 686 0048 7B68     		ldr	r3, [r7, #4]
 687 004a 1B68     		ldr	r3, [r3]
 688              		.loc 1 1062 8
 689 004c 414A     		ldr	r2, .L42
 690 004e 9342     		cmp	r3, r2
 691 0050 05D1     		bne	.L31
 692              		.loc 1 1062 9 discriminator 1
 693 0052 414B     		ldr	r3, .L42+4
 694 0054 5B68     		ldr	r3, [r3, #4]
 695 0056 03F47023 		and	r3, r3, #983040
 696 005a 002B     		cmp	r3, #0
 697 005c 15D1     		bne	.L32
 698              	.L31:
1063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC independent or master) */
1065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 699              		.loc 1 1065 7
 700 005e 7B68     		ldr	r3, [r7, #4]
 701 0060 9B6A     		ldr	r3, [r3, #40]
 702 0062 23F48012 		bic	r2, r3, #1048576
 703 0066 7B68     		ldr	r3, [r7, #4]
 704 0068 9A62     		str	r2, [r3, #40]
1066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
ARM GAS  /tmp/ccelol6o.s 			page 32


1068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 705              		.loc 1 1069 11
 706 006a 7B68     		ldr	r3, [r7, #4]
 707 006c 1B68     		ldr	r3, [r3]
 708 006e 5B68     		ldr	r3, [r3, #4]
 709 0070 03F48063 		and	r3, r3, #1024
 710              		.loc 1 1069 10
 711 0074 002B     		cmp	r3, #0
 712 0076 26D0     		beq	.L34
1070:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 713              		.loc 1 1071 9
 714 0078 7B68     		ldr	r3, [r7, #4]
 715 007a 9B6A     		ldr	r3, [r3, #40]
 716 007c 23F44053 		bic	r3, r3, #12288
 717 0080 43F48052 		orr	r2, r3, #4096
 718 0084 7B68     		ldr	r3, [r7, #4]
 719 0086 9A62     		str	r2, [r3, #40]
1069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 720              		.loc 1 1069 10
 721 0088 1DE0     		b	.L34
 722              	.L32:
1072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1076:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC slave) */
1077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 723              		.loc 1 1077 7
 724 008a 7B68     		ldr	r3, [r7, #4]
 725 008c 9B6A     		ldr	r3, [r3, #40]
 726 008e 43F48012 		orr	r2, r3, #1048576
 727 0092 7B68     		ldr	r3, [r7, #4]
 728 0094 9A62     		str	r2, [r3, #40]
1078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 729              		.loc 1 1081 11
 730 0096 7B68     		ldr	r3, [r7, #4]
 731 0098 1B68     		ldr	r3, [r3]
 732              		.loc 1 1081 10
 733 009a 2F4A     		ldr	r2, .L42+4
 734 009c 9342     		cmp	r3, r2
 735 009e 04D0     		beq	.L35
 736              		.loc 1 1081 11 discriminator 2
 737 00a0 7B68     		ldr	r3, [r7, #4]
 738 00a2 1B68     		ldr	r3, [r3]
 739 00a4 2B4A     		ldr	r2, .L42
 740 00a6 9342     		cmp	r3, r2
 741 00a8 0DD1     		bne	.L34
 742              	.L35:
 743              		.loc 1 1081 11 is_stmt 0 discriminator 3
 744 00aa 2B4B     		ldr	r3, .L42+4
 745 00ac 5B68     		ldr	r3, [r3, #4]
 746 00ae 03F48063 		and	r3, r3, #1024
ARM GAS  /tmp/ccelol6o.s 			page 33


 747 00b2 002B     		cmp	r3, #0
 748 00b4 07D0     		beq	.L34
1082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 749              		.loc 1 1083 9 is_stmt 1
 750 00b6 7B68     		ldr	r3, [r7, #4]
 751 00b8 9B6A     		ldr	r3, [r3, #40]
 752 00ba 23F44053 		bic	r3, r3, #12288
 753 00be 43F48052 		orr	r2, r3, #4096
 754 00c2 7B68     		ldr	r3, [r7, #4]
 755 00c4 9A62     		str	r2, [r3, #40]
 756              	.L34:
1084:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
1088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 757              		.loc 1 1088 9
 758 00c6 7B68     		ldr	r3, [r7, #4]
 759 00c8 9B6A     		ldr	r3, [r3, #40]
 760 00ca 03F48053 		and	r3, r3, #4096
 761              		.loc 1 1088 8
 762 00ce 002B     		cmp	r3, #0
 763 00d0 06D0     		beq	.L36
1089:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
1091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 764              		.loc 1 1091 7
 765 00d2 7B68     		ldr	r3, [r7, #4]
 766 00d4 DB6A     		ldr	r3, [r3, #44]
 767 00d6 23F00602 		bic	r2, r3, #6
 768 00da 7B68     		ldr	r3, [r7, #4]
 769 00dc DA62     		str	r2, [r3, #44]
 770 00de 02E0     		b	.L37
 771              	.L36:
1092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1094:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1095:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Reset ADC all error code fields */
1096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 772              		.loc 1 1096 7
 773 00e0 7B68     		ldr	r3, [r7, #4]
 774 00e2 0022     		movs	r2, #0
 775 00e4 DA62     		str	r2, [r3, #44]
 776              	.L37:
1097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1098:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1099:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
1100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
1101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
1102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 777              		.loc 1 1102 5
 778 00e6 7B68     		ldr	r3, [r7, #4]
 779 00e8 0022     		movs	r2, #0
 780 00ea 83F82420 		strb	r2, [r3, #36]
1103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Clear regular group conversion flag */
ARM GAS  /tmp/ccelol6o.s 			page 34


1105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
1106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 781              		.loc 1 1106 5
 782 00ee 7B68     		ldr	r3, [r7, #4]
 783 00f0 1B68     		ldr	r3, [r3]
 784 00f2 6FF00202 		mvn	r2, #2
 785 00f6 1A60     		str	r2, [r3]
1107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable conversion of regular group.                                    */
1109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If software start has been selected, conversion starts immediately.    */
1110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If external trigger has been selected, conversion will start at next   */
1111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* trigger event.                                                         */
1112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Case of multimode enabled:                                             */ 
1113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
1114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - if ADC is master, ADC is enabled and conversion is started.         */
1115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If ADC is master, ADC is enabled and conversion is started.            */
1116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Note: Alternate trigger for single conversion could be to force an     */
1117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
1118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 786              		.loc 1 1118 9
 787 00f8 7B68     		ldr	r3, [r7, #4]
 788 00fa 1B68     		ldr	r3, [r3]
 789 00fc 9B68     		ldr	r3, [r3, #8]
 790 00fe 03F46023 		and	r3, r3, #917504
 791              		.loc 1 1118 8
 792 0102 B3F5602F 		cmp	r3, #917504
 793 0106 13D1     		bne	.L38
1119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 794              		.loc 1 1119 9 discriminator 1
 795 0108 7B68     		ldr	r3, [r7, #4]
 796 010a 1B68     		ldr	r3, [r3]
1118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 797              		.loc 1 1118 50 discriminator 1
 798 010c 114A     		ldr	r2, .L42
 799 010e 9342     		cmp	r3, r2
 800 0110 05D1     		bne	.L39
 801              		.loc 1 1119 9 discriminator 2
 802 0112 114B     		ldr	r3, .L42+4
 803 0114 5B68     		ldr	r3, [r3, #4]
 804 0116 03F47023 		and	r3, r3, #983040
1118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 805              		.loc 1 1118 50 discriminator 2
 806 011a 002B     		cmp	r3, #0
 807 011c 08D1     		bne	.L38
 808              	.L39:
1120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Start ADC conversion on regular group with SW start */
1122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 809              		.loc 1 1122 7
 810 011e 7B68     		ldr	r3, [r7, #4]
 811 0120 1B68     		ldr	r3, [r3]
 812 0122 9A68     		ldr	r2, [r3, #8]
 813 0124 7B68     		ldr	r3, [r7, #4]
 814 0126 1B68     		ldr	r3, [r3]
 815 0128 42F4A002 		orr	r2, r2, #5242880
 816 012c 9A60     		str	r2, [r3, #8]
 817 012e 0CE0     		b	.L41
ARM GAS  /tmp/ccelol6o.s 			page 35


 818              	.L38:
1123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Start ADC conversion on regular group with external trigger */
1127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 819              		.loc 1 1127 7
 820 0130 7B68     		ldr	r3, [r7, #4]
 821 0132 1B68     		ldr	r3, [r3]
 822 0134 9A68     		ldr	r2, [r3, #8]
 823 0136 7B68     		ldr	r3, [r7, #4]
 824 0138 1B68     		ldr	r3, [r3]
 825 013a 42F48012 		orr	r2, r2, #1048576
 826 013e 9A60     		str	r2, [r3, #8]
 827 0140 03E0     		b	.L41
 828              	.L30:
1128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
1131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
1133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 829              		.loc 1 1133 5
 830 0142 7B68     		ldr	r3, [r7, #4]
 831 0144 0022     		movs	r2, #0
 832 0146 83F82420 		strb	r2, [r3, #36]
 833              	.L41:
1134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 834              		.loc 1 1137 10
 835 014a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 836              	.L29:
1138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 837              		.loc 1 1138 1
 838 014c 1846     		mov	r0, r3
 839 014e 1037     		adds	r7, r7, #16
 840              	.LCFI25:
 841              		.cfi_def_cfa_offset 8
 842 0150 BD46     		mov	sp, r7
 843              	.LCFI26:
 844              		.cfi_def_cfa_register 13
 845              		@ sp needed
 846 0152 80BD     		pop	{r7, pc}
 847              	.L43:
 848              		.align	2
 849              	.L42:
 850 0154 00280140 		.word	1073817600
 851 0158 00240140 		.word	1073816576
 852              		.cfi_endproc
 853              	.LFE69:
 855              		.section	.text.HAL_ADC_Stop,"ax",%progbits
 856              		.align	1
 857              		.global	HAL_ADC_Stop
 858              		.syntax unified
 859              		.thumb
ARM GAS  /tmp/ccelol6o.s 			page 36


 860              		.thumb_func
 862              	HAL_ADC_Stop:
 863              	.LFB70:
1139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected channels in 
1142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC peripheral.
1143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note:  ADC peripheral disable is forcing stop of potential 
1144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         conversion on injected group. If injected group is under use, it
1145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
1146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status.
1148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
1150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 864              		.loc 1 1150 1
 865              		.cfi_startproc
 866              		@ args = 0, pretend = 0, frame = 16
 867              		@ frame_needed = 1, uses_anonymous_args = 0
 868 0000 80B5     		push	{r7, lr}
 869              	.LCFI27:
 870              		.cfi_def_cfa_offset 8
 871              		.cfi_offset 7, -8
 872              		.cfi_offset 14, -4
 873 0002 84B0     		sub	sp, sp, #16
 874              	.LCFI28:
 875              		.cfi_def_cfa_offset 24
 876 0004 00AF     		add	r7, sp, #0
 877              	.LCFI29:
 878              		.cfi_def_cfa_register 7
 879 0006 7860     		str	r0, [r7, #4]
1151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 880              		.loc 1 1151 21
 881 0008 0023     		movs	r3, #0
 882 000a FB73     		strb	r3, [r7, #15]
1152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      
1156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
1157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 883              		.loc 1 1157 3
 884 000c 7B68     		ldr	r3, [r7, #4]
 885 000e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 886 0012 012B     		cmp	r3, #1
 887 0014 01D1     		bne	.L45
 888              		.loc 1 1157 3 is_stmt 0 discriminator 1
 889 0016 0223     		movs	r3, #2
 890 0018 1AE0     		b	.L46
 891              	.L45:
 892              		.loc 1 1157 3 discriminator 2
 893 001a 7B68     		ldr	r3, [r7, #4]
 894 001c 0122     		movs	r2, #1
 895 001e 83F82420 		strb	r2, [r3, #36]
1158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
1160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
ARM GAS  /tmp/ccelol6o.s 			page 37


1161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 896              		.loc 1 1161 20 is_stmt 1 discriminator 2
 897 0022 7868     		ldr	r0, [r7, #4]
 898 0024 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 899 0028 0346     		mov	r3, r0
 900 002a FB73     		strb	r3, [r7, #15]
1162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
1164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 901              		.loc 1 1164 6 discriminator 2
 902 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 903 002e 002B     		cmp	r3, #0
 904 0030 09D1     		bne	.L47
1165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
1167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 905              		.loc 1 1167 5
 906 0032 7B68     		ldr	r3, [r7, #4]
 907 0034 9B6A     		ldr	r3, [r3, #40]
 908 0036 23F48853 		bic	r3, r3, #4352
 909 003a 23F00103 		bic	r3, r3, #1
 910 003e 43F00102 		orr	r2, r3, #1
 911 0042 7B68     		ldr	r3, [r7, #4]
 912 0044 9A62     		str	r2, [r3, #40]
 913              	.L47:
1168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
1170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
1173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 914              		.loc 1 1173 3
 915 0046 7B68     		ldr	r3, [r7, #4]
 916 0048 0022     		movs	r2, #0
 917 004a 83F82420 		strb	r2, [r3, #36]
1174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 918              		.loc 1 1176 10
 919 004e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 920              	.L46:
1177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 921              		.loc 1 1177 1
 922 0050 1846     		mov	r0, r3
 923 0052 1037     		adds	r7, r7, #16
 924              	.LCFI30:
 925              		.cfi_def_cfa_offset 8
 926 0054 BD46     		mov	sp, r7
 927              	.LCFI31:
 928              		.cfi_def_cfa_register 13
 929              		@ sp needed
 930 0056 80BD     		pop	{r7, pc}
 931              		.cfi_endproc
 932              	.LFE70:
 934              		.section	.text.HAL_ADC_PollForConversion,"ax",%progbits
 935              		.align	1
 936              		.global	HAL_ADC_PollForConversion
ARM GAS  /tmp/ccelol6o.s 			page 38


 937              		.syntax unified
 938              		.thumb
 939              		.thumb_func
 941              	HAL_ADC_PollForConversion:
 942              	.LFB71:
1178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Wait for regular group conversion to be completed.
1181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   This function cannot be used in a particular setup: ADC configured 
1182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         in DMA mode.
1183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         In this case, DMA resets the flag EOC and polling cannot be
1184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         performed on each conversion.
1185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   On STM32F1 devices, limitation in case of sequencer enabled
1186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         (several ranks selected): polling cannot be done on each 
1187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         conversion inside the sequence. In this case, polling is replaced by
1188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         wait for maximum conversion time.
1189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  Timeout: Timeout value in millisecond.
1191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
1192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
1194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 943              		.loc 1 1194 1
 944              		.cfi_startproc
 945              		@ args = 0, pretend = 0, frame = 24
 946              		@ frame_needed = 1, uses_anonymous_args = 0
 947 0000 90B5     		push	{r4, r7, lr}
 948              	.LCFI32:
 949              		.cfi_def_cfa_offset 12
 950              		.cfi_offset 4, -12
 951              		.cfi_offset 7, -8
 952              		.cfi_offset 14, -4
 953 0002 87B0     		sub	sp, sp, #28
 954              	.LCFI33:
 955              		.cfi_def_cfa_offset 40
 956 0004 00AF     		add	r7, sp, #0
 957              	.LCFI34:
 958              		.cfi_def_cfa_register 7
 959 0006 7860     		str	r0, [r7, #4]
 960 0008 3960     		str	r1, [r7]
1195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0U;
 961              		.loc 1 1195 12
 962 000a 0023     		movs	r3, #0
 963 000c 7B61     		str	r3, [r7, #20]
1196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Variables for polling in case of scan mode enabled and polling for each  */
1198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* conversion.                                                              */
1199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 964              		.loc 1 1199 17
 965 000e 0023     		movs	r3, #0
 966 0010 FB60     		str	r3, [r7, #12]
1200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 967              		.loc 1 1200 12
 968 0012 0023     		movs	r3, #0
 969 0014 3B61     		str	r3, [r7, #16]
1201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  
1202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
ARM GAS  /tmp/ccelol6o.s 			page 39


1203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Get tick count */
1206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tickstart = HAL_GetTick();
 970              		.loc 1 1206 15
 971 0016 FFF7FEFF 		bl	HAL_GetTick
 972 001a 7861     		str	r0, [r7, #20]
1207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Verification that ADC configuration is compliant with polling for        */
1209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* each conversion:                                                         */
1210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Particular case is ADC configured in DMA mode                            */
1211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 973              		.loc 1 1211 7
 974 001c 7B68     		ldr	r3, [r7, #4]
 975 001e 1B68     		ldr	r3, [r3]
 976 0020 9B68     		ldr	r3, [r3, #8]
 977 0022 03F48073 		and	r3, r3, #256
 978              		.loc 1 1211 6
 979 0026 002B     		cmp	r3, #0
 980 0028 0BD0     		beq	.L49
1212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update ADC state machine to error */
1214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 981              		.loc 1 1214 5
 982 002a 7B68     		ldr	r3, [r7, #4]
 983 002c 9B6A     		ldr	r3, [r3, #40]
 984 002e 43F02002 		orr	r2, r3, #32
 985 0032 7B68     		ldr	r3, [r7, #4]
 986 0034 9A62     		str	r2, [r3, #40]
1215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
1217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 987              		.loc 1 1217 5
 988 0036 7B68     		ldr	r3, [r7, #4]
 989 0038 0022     		movs	r2, #0
 990 003a 83F82420 		strb	r2, [r3, #36]
1218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     return HAL_ERROR;
 991              		.loc 1 1219 12
 992 003e 0123     		movs	r3, #1
 993 0040 D3E0     		b	.L50
 994              	.L49:
1220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Polling for end of conversion: differentiation if single/sequence        */
1223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* conversion.                                                              */
1224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*  - If single conversion for regular group (Scan mode disabled or enabled */
1225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    with NbrOfConversion =1), flag EOC is used to determine the           */
1226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    conversion completion.                                                */
1227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*  - If sequence conversion for regular group (scan mode enabled and       */
1228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    NbrOfConversion >=2), flag EOC is set only at the end of the          */
1229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    sequence.                                                             */
1230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    To poll for each conversion, the maximum conversion time is computed  */
1231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    from ADC conversion time (selected sampling time + conversion time of */
1232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
1233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
1234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    As flag EOC is not set after each conversion, no timeout status can   */
ARM GAS  /tmp/ccelol6o.s 			page 40


1235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    be set.                                                               */
1236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 995              		.loc 1 1236 7
 996 0042 7B68     		ldr	r3, [r7, #4]
 997 0044 1B68     		ldr	r3, [r3]
 998 0046 5B68     		ldr	r3, [r3, #4]
 999 0048 03F48073 		and	r3, r3, #256
 1000              		.loc 1 1236 6
 1001 004c 002B     		cmp	r3, #0
 1002 004e 31D1     		bne	.L51
1237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 1003              		.loc 1 1237 7 discriminator 1
 1004 0050 7B68     		ldr	r3, [r7, #4]
 1005 0052 1B68     		ldr	r3, [r3]
 1006 0054 DB6A     		ldr	r3, [r3, #44]
 1007 0056 03F47003 		and	r3, r3, #15728640
1236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 1008              		.loc 1 1236 57 discriminator 1
 1009 005a 002B     		cmp	r3, #0
 1010 005c 2AD1     		bne	.L51
1238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Wait until End of Conversion flag is raised */
1240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 1011              		.loc 1 1240 10
 1012 005e 21E0     		b	.L53
 1013              	.L56:
1241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Check if timeout is disabled (set to infinite wait) */
1243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if(Timeout != HAL_MAX_DELAY)
 1014              		.loc 1 1243 9
 1015 0060 3B68     		ldr	r3, [r7]
 1016 0062 B3F1FF3F 		cmp	r3, #-1
 1017 0066 1DD0     		beq	.L53
1244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 1018              		.loc 1 1245 11
 1019 0068 3B68     		ldr	r3, [r7]
 1020 006a 002B     		cmp	r3, #0
 1021 006c 07D0     		beq	.L54
 1022              		.loc 1 1245 33 discriminator 1
 1023 006e FFF7FEFF 		bl	HAL_GetTick
 1024 0072 0246     		mov	r2, r0
 1025              		.loc 1 1245 47 discriminator 1
 1026 0074 7B69     		ldr	r3, [r7, #20]
 1027 0076 D31A     		subs	r3, r2, r3
 1028              		.loc 1 1245 28 discriminator 1
 1029 0078 3A68     		ldr	r2, [r7]
 1030 007a 9A42     		cmp	r2, r3
 1031 007c 12D2     		bcs	.L53
 1032              	.L54:
1246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
1247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* New check to avoid false timeout detection in case of preemption */
1248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 1033              		.loc 1 1248 14
 1034 007e 7B68     		ldr	r3, [r7, #4]
 1035 0080 1B68     		ldr	r3, [r3]
 1036 0082 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccelol6o.s 			page 41


 1037 0084 03F00203 		and	r3, r3, #2
 1038              		.loc 1 1248 13
 1039 0088 002B     		cmp	r3, #0
 1040 008a 0BD1     		bne	.L53
1249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           {
1250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             /* Update ADC state machine to timeout */
1251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 1041              		.loc 1 1251 13
 1042 008c 7B68     		ldr	r3, [r7, #4]
 1043 008e 9B6A     		ldr	r3, [r3, #40]
 1044 0090 43F00402 		orr	r2, r3, #4
 1045 0094 7B68     		ldr	r3, [r7, #4]
 1046 0096 9A62     		str	r2, [r3, #40]
1252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             
1253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             /* Process unlocked */
1254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             __HAL_UNLOCK(hadc);
 1047              		.loc 1 1254 13
 1048 0098 7B68     		ldr	r3, [r7, #4]
 1049 009a 0022     		movs	r2, #0
 1050 009c 83F82420 		strb	r2, [r3, #36]
1255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             
1256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             return HAL_TIMEOUT;
 1051              		.loc 1 1256 20
 1052 00a0 0323     		movs	r3, #3
 1053 00a2 A2E0     		b	.L50
 1054              	.L53:
1240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1055              		.loc 1 1240 11
 1056 00a4 7B68     		ldr	r3, [r7, #4]
 1057 00a6 1B68     		ldr	r3, [r3]
 1058 00a8 1B68     		ldr	r3, [r3]
 1059 00aa 03F00203 		and	r3, r3, #2
 1060 00ae 002B     		cmp	r3, #0
 1061 00b0 D6D0     		beq	.L56
1236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 1062              		.loc 1 1236 6
 1063 00b2 70E0     		b	.L57
 1064              	.L51:
1257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           }
1258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
1259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
1263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Replace polling by wait for maximum conversion time */
1265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
1266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*    and ADC maximum conversion cycles on all channels.                  */
1267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - Wait for the expected ADC clock cycles delay                        */
1268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
1269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                           / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 1065              		.loc 1 1269 43
 1066 00b4 4F4B     		ldr	r3, .L71
 1067 00b6 1C68     		ldr	r4, [r3]
 1068              		.loc 1 1269 45
 1069 00b8 0220     		movs	r0, #2
 1070 00ba FFF7FEFF 		bl	HAL_RCCEx_GetPeriphCLKFreq
ARM GAS  /tmp/ccelol6o.s 			page 42


 1071 00be 0346     		mov	r3, r0
 1072              		.loc 1 1269 43
 1073 00c0 B4FBF3F2 		udiv	r2, r4, r3
1270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                          * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 1074              		.loc 1 1270 44
 1075 00c4 7B68     		ldr	r3, [r7, #4]
 1076 00c6 1B68     		ldr	r3, [r3]
 1077 00c8 1969     		ldr	r1, [r3, #16]
 1078 00ca 4B4B     		ldr	r3, .L71+4
 1079 00cc 0B40     		ands	r3, r3, r1
 1080 00ce 002B     		cmp	r3, #0
 1081 00d0 18D1     		bne	.L58
 1082              		.loc 1 1270 44 is_stmt 0 discriminator 1
 1083 00d2 7B68     		ldr	r3, [r7, #4]
 1084 00d4 1B68     		ldr	r3, [r3]
 1085 00d6 D968     		ldr	r1, [r3, #12]
 1086 00d8 484B     		ldr	r3, .L71+8
 1087 00da 0B40     		ands	r3, r3, r1
 1088 00dc 002B     		cmp	r3, #0
 1089 00de 11D1     		bne	.L58
 1090              		.loc 1 1270 44 discriminator 3
 1091 00e0 7B68     		ldr	r3, [r7, #4]
 1092 00e2 1B68     		ldr	r3, [r3]
 1093 00e4 1969     		ldr	r1, [r3, #16]
 1094 00e6 464B     		ldr	r3, .L71+12
 1095 00e8 0B40     		ands	r3, r3, r1
 1096 00ea 002B     		cmp	r3, #0
 1097 00ec 08D1     		bne	.L59
 1098              		.loc 1 1270 44 discriminator 5
 1099 00ee 7B68     		ldr	r3, [r7, #4]
 1100 00f0 1B68     		ldr	r3, [r3]
 1101 00f2 D968     		ldr	r1, [r3, #12]
 1102 00f4 434B     		ldr	r3, .L71+16
 1103 00f6 0B40     		ands	r3, r3, r1
 1104 00f8 002B     		cmp	r3, #0
 1105 00fa 01D1     		bne	.L59
 1106              		.loc 1 1270 44 discriminator 7
 1107 00fc 1423     		movs	r3, #20
 1108 00fe 20E0     		b	.L61
 1109              	.L59:
 1110              		.loc 1 1270 44 discriminator 8
 1111 0100 2923     		movs	r3, #41
 1112 0102 1EE0     		b	.L61
 1113              	.L58:
 1114              		.loc 1 1270 44 discriminator 4
 1115 0104 7B68     		ldr	r3, [r7, #4]
 1116 0106 1B68     		ldr	r3, [r3]
 1117 0108 1969     		ldr	r1, [r3, #16]
 1118 010a 3D4B     		ldr	r3, .L71+12
 1119 010c 0B40     		ands	r3, r3, r1
 1120 010e 002B     		cmp	r3, #0
 1121 0110 06D1     		bne	.L62
 1122              		.loc 1 1270 44 discriminator 11
 1123 0112 7B68     		ldr	r3, [r7, #4]
 1124 0114 1B68     		ldr	r3, [r3]
 1125 0116 D968     		ldr	r1, [r3, #12]
 1126 0118 3A4B     		ldr	r3, .L71+16
ARM GAS  /tmp/ccelol6o.s 			page 43


 1127 011a 0B40     		ands	r3, r3, r1
 1128 011c 002B     		cmp	r3, #0
 1129 011e 0DD0     		beq	.L63
 1130              	.L62:
 1131              		.loc 1 1270 44 discriminator 14
 1132 0120 7B68     		ldr	r3, [r7, #4]
 1133 0122 1B68     		ldr	r3, [r3]
 1134 0124 1969     		ldr	r1, [r3, #16]
 1135 0126 384B     		ldr	r3, .L71+20
 1136 0128 0B40     		ands	r3, r3, r1
 1137 012a 002B     		cmp	r3, #0
 1138 012c 08D1     		bne	.L64
 1139              		.loc 1 1270 44 discriminator 15
 1140 012e 7B68     		ldr	r3, [r7, #4]
 1141 0130 1B68     		ldr	r3, [r3]
 1142 0132 D968     		ldr	r1, [r3, #12]
 1143 0134 344B     		ldr	r3, .L71+20
 1144 0136 0B40     		ands	r3, r3, r1
 1145 0138 002B     		cmp	r3, #0
 1146 013a 01D1     		bne	.L64
 1147              	.L63:
 1148              		.loc 1 1270 44 discriminator 17
 1149 013c 5423     		movs	r3, #84
 1150 013e 00E0     		b	.L61
 1151              	.L64:
 1152              		.loc 1 1270 44 discriminator 18
 1153 0140 FC23     		movs	r3, #252
 1154              	.L61:
1268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                                           / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 1155              		.loc 1 1268 39 is_stmt 1
 1156 0142 02FB03F3 		mul	r3, r2, r3
 1157 0146 3B61     		str	r3, [r7, #16]
1271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 1158              		.loc 1 1272 10
 1159 0148 21E0     		b	.L66
 1160              	.L69:
1273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Check if timeout is disabled (set to infinite wait) */
1275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if(Timeout != HAL_MAX_DELAY)
 1161              		.loc 1 1275 9
 1162 014a 3B68     		ldr	r3, [r7]
 1163 014c B3F1FF3F 		cmp	r3, #-1
 1164 0150 1AD0     		beq	.L67
1276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 1165              		.loc 1 1277 11
 1166 0152 3B68     		ldr	r3, [r7]
 1167 0154 002B     		cmp	r3, #0
 1168 0156 07D0     		beq	.L68
 1169              		.loc 1 1277 33 discriminator 1
 1170 0158 FFF7FEFF 		bl	HAL_GetTick
 1171 015c 0246     		mov	r2, r0
 1172              		.loc 1 1277 47 discriminator 1
 1173 015e 7B69     		ldr	r3, [r7, #20]
 1174 0160 D31A     		subs	r3, r2, r3
 1175              		.loc 1 1277 28 discriminator 1
ARM GAS  /tmp/ccelol6o.s 			page 44


 1176 0162 3A68     		ldr	r2, [r7]
 1177 0164 9A42     		cmp	r2, r3
 1178 0166 0FD2     		bcs	.L67
 1179              	.L68:
1278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
1279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* New check to avoid false timeout detection in case of preemption */
1280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 1180              		.loc 1 1280 44
 1181 0168 FB68     		ldr	r3, [r7, #12]
 1182              		.loc 1 1280 13
 1183 016a 3A69     		ldr	r2, [r7, #16]
 1184 016c 9A42     		cmp	r2, r3
 1185 016e 0BD9     		bls	.L67
1281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           {
1282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             /* Update ADC state machine to timeout */
1283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 1186              		.loc 1 1283 13
 1187 0170 7B68     		ldr	r3, [r7, #4]
 1188 0172 9B6A     		ldr	r3, [r3, #40]
 1189 0174 43F00402 		orr	r2, r3, #4
 1190 0178 7B68     		ldr	r3, [r7, #4]
 1191 017a 9A62     		str	r2, [r3, #40]
1284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             /* Process unlocked */
1286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             __HAL_UNLOCK(hadc);
 1192              		.loc 1 1286 13
 1193 017c 7B68     		ldr	r3, [r7, #4]
 1194 017e 0022     		movs	r2, #0
 1195 0180 83F82420 		strb	r2, [r3, #36]
1287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             return HAL_TIMEOUT;
 1196              		.loc 1 1288 20
 1197 0184 0323     		movs	r3, #3
 1198 0186 30E0     		b	.L50
 1199              	.L67:
1289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           }
1290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
1291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       Conversion_Timeout_CPU_cycles ++;
 1200              		.loc 1 1292 37
 1201 0188 FB68     		ldr	r3, [r7, #12]
 1202 018a 0133     		adds	r3, r3, #1
 1203 018c FB60     		str	r3, [r7, #12]
 1204              	.L66:
1272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1205              		.loc 1 1272 41
 1206 018e FB68     		ldr	r3, [r7, #12]
 1207 0190 3A69     		ldr	r2, [r7, #16]
 1208 0192 9A42     		cmp	r2, r3
 1209 0194 D9D8     		bhi	.L69
 1210              	.L57:
1293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Clear regular group conversion flag */
1297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 1211              		.loc 1 1297 3
ARM GAS  /tmp/ccelol6o.s 			page 45


 1212 0196 7B68     		ldr	r3, [r7, #4]
 1213 0198 1B68     		ldr	r3, [r3]
 1214 019a 6FF01202 		mvn	r2, #18
 1215 019e 1A60     		str	r2, [r3]
1298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Update ADC state machine */
1300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 1216              		.loc 1 1300 3
 1217 01a0 7B68     		ldr	r3, [r7, #4]
 1218 01a2 9B6A     		ldr	r3, [r3, #40]
 1219 01a4 43F40072 		orr	r2, r3, #512
 1220 01a8 7B68     		ldr	r3, [r7, #4]
 1221 01aa 9A62     		str	r2, [r3, #40]
1301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Determine whether any further conversion upcoming on group regular       */
1303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* by external trigger, continuous mode or scan sequence on going.          */
1304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Note: On STM32F1 devices, in case of sequencer enabled                   */
1305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*       (several ranks selected), end of conversion flag is raised         */
1306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*       at the end of the sequence.                                        */
1307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 1222              		.loc 1 1307 6
 1223 01ac 7B68     		ldr	r3, [r7, #4]
 1224 01ae 1B68     		ldr	r3, [r3]
 1225 01b0 9B68     		ldr	r3, [r3, #8]
 1226 01b2 03F46023 		and	r3, r3, #917504
 1227              		.loc 1 1307 5
 1228 01b6 B3F5602F 		cmp	r3, #917504
 1229 01ba 15D1     		bne	.L70
1308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
 1230              		.loc 1 1308 17 discriminator 1
 1231 01bc 7B68     		ldr	r3, [r7, #4]
 1232 01be 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
1307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)   )
 1233              		.loc 1 1307 49 discriminator 1
 1234 01c0 002B     		cmp	r3, #0
 1235 01c2 11D1     		bne	.L70
1309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {   
1310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
1311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 1236              		.loc 1 1311 5
 1237 01c4 7B68     		ldr	r3, [r7, #4]
 1238 01c6 9B6A     		ldr	r3, [r3, #40]
 1239 01c8 23F48072 		bic	r2, r3, #256
 1240 01cc 7B68     		ldr	r3, [r7, #4]
 1241 01ce 9A62     		str	r2, [r3, #40]
1312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 1242              		.loc 1 1313 9
 1243 01d0 7B68     		ldr	r3, [r7, #4]
 1244 01d2 9B6A     		ldr	r3, [r3, #40]
 1245 01d4 03F48053 		and	r3, r3, #4096
 1246              		.loc 1 1313 8
 1247 01d8 002B     		cmp	r3, #0
 1248 01da 05D1     		bne	.L70
1314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     { 
1315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 1249              		.loc 1 1315 7
ARM GAS  /tmp/ccelol6o.s 			page 46


 1250 01dc 7B68     		ldr	r3, [r7, #4]
 1251 01de 9B6A     		ldr	r3, [r3, #40]
 1252 01e0 43F00102 		orr	r2, r3, #1
 1253 01e4 7B68     		ldr	r3, [r7, #4]
 1254 01e6 9A62     		str	r2, [r3, #40]
 1255              	.L70:
1316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return ADC state */
1320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return HAL_OK;
 1256              		.loc 1 1320 10
 1257 01e8 0023     		movs	r3, #0
 1258              	.L50:
1321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1259              		.loc 1 1321 1
 1260 01ea 1846     		mov	r0, r3
 1261 01ec 1C37     		adds	r7, r7, #28
 1262              	.LCFI35:
 1263              		.cfi_def_cfa_offset 12
 1264 01ee BD46     		mov	sp, r7
 1265              	.LCFI36:
 1266              		.cfi_def_cfa_register 13
 1267              		@ sp needed
 1268 01f0 90BD     		pop	{r4, r7, pc}
 1269              	.L72:
 1270 01f2 00BF     		.align	2
 1271              	.L71:
 1272 01f4 00000000 		.word	SystemCoreClock
 1273 01f8 24499224 		.word	613566756
 1274 01fc 24499200 		.word	9586980
 1275 0200 92244912 		.word	306783378
 1276 0204 92244900 		.word	4793490
 1277 0208 49922400 		.word	2396745
 1278              		.cfi_endproc
 1279              	.LFE71:
 1281              		.section	.text.HAL_ADC_PollForEvent,"ax",%progbits
 1282              		.align	1
 1283              		.global	HAL_ADC_PollForEvent
 1284              		.syntax unified
 1285              		.thumb
 1286              		.thumb_func
 1288              	HAL_ADC_PollForEvent:
 1289              	.LFB72:
1322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Poll for conversion event.
1325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  EventType: the ADC event type.
1327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          This parameter can be one of the following values:
1328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *            @arg ADC_AWD_EVENT: ADC Analog watchdog event.
1329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  Timeout: Timeout value in millisecond.
1330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
1331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef* hadc, uint32_t EventType, uint32_t Timeou
1333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 1290              		.loc 1 1333 1
ARM GAS  /tmp/ccelol6o.s 			page 47


 1291              		.cfi_startproc
 1292              		@ args = 0, pretend = 0, frame = 24
 1293              		@ frame_needed = 1, uses_anonymous_args = 0
 1294 0000 80B5     		push	{r7, lr}
 1295              	.LCFI37:
 1296              		.cfi_def_cfa_offset 8
 1297              		.cfi_offset 7, -8
 1298              		.cfi_offset 14, -4
 1299 0002 86B0     		sub	sp, sp, #24
 1300              	.LCFI38:
 1301              		.cfi_def_cfa_offset 32
 1302 0004 00AF     		add	r7, sp, #0
 1303              	.LCFI39:
 1304              		.cfi_def_cfa_register 7
 1305 0006 F860     		str	r0, [r7, #12]
 1306 0008 B960     		str	r1, [r7, #8]
 1307 000a 7A60     		str	r2, [r7, #4]
1334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0U; 
 1308              		.loc 1 1334 12
 1309 000c 0023     		movs	r3, #0
 1310 000e 7B61     		str	r3, [r7, #20]
1335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_EVENT_TYPE(EventType));
1339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Get tick count */
1341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tickstart = HAL_GetTick();
 1311              		.loc 1 1341 15
 1312 0010 FFF7FEFF 		bl	HAL_GetTick
 1313 0014 7861     		str	r0, [r7, #20]
1342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check selected event flag */
1344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   while(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
 1314              		.loc 1 1344 8
 1315 0016 22E0     		b	.L75
 1316              	.L79:
1345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
1347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
 1317              		.loc 1 1347 7
 1318 0018 7B68     		ldr	r3, [r7, #4]
 1319 001a B3F1FF3F 		cmp	r3, #-1
 1320 001e 1ED0     		beq	.L75
1348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 1321              		.loc 1 1349 9
 1322 0020 7B68     		ldr	r3, [r7, #4]
 1323 0022 002B     		cmp	r3, #0
 1324 0024 07D0     		beq	.L76
 1325              		.loc 1 1349 31 discriminator 1
 1326 0026 FFF7FEFF 		bl	HAL_GetTick
 1327 002a 0246     		mov	r2, r0
 1328              		.loc 1 1349 45 discriminator 1
 1329 002c 7B69     		ldr	r3, [r7, #20]
 1330 002e D31A     		subs	r3, r2, r3
 1331              		.loc 1 1349 26 discriminator 1
ARM GAS  /tmp/ccelol6o.s 			page 48


 1332 0030 7A68     		ldr	r2, [r7, #4]
 1333 0032 9A42     		cmp	r2, r3
 1334 0034 13D2     		bcs	.L75
 1335              	.L76:
1350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* New check to avoid false timeout detection in case of preemption */
1352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
 1336              		.loc 1 1352 12
 1337 0036 FB68     		ldr	r3, [r7, #12]
 1338 0038 1B68     		ldr	r3, [r3]
 1339 003a 1A68     		ldr	r2, [r3]
 1340 003c BB68     		ldr	r3, [r7, #8]
 1341 003e 1340     		ands	r3, r3, r2
 1342              		.loc 1 1352 11
 1343 0040 BA68     		ldr	r2, [r7, #8]
 1344 0042 9A42     		cmp	r2, r3
 1345 0044 0BD0     		beq	.L75
1353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
1354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Update ADC state machine to timeout */
1355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 1346              		.loc 1 1355 11
 1347 0046 FB68     		ldr	r3, [r7, #12]
 1348 0048 9B6A     		ldr	r3, [r3, #40]
 1349 004a 43F00402 		orr	r2, r3, #4
 1350 004e FB68     		ldr	r3, [r7, #12]
 1351 0050 9A62     		str	r2, [r3, #40]
1356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Process unlocked */
1358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           __HAL_UNLOCK(hadc);
 1352              		.loc 1 1358 11
 1353 0052 FB68     		ldr	r3, [r7, #12]
 1354 0054 0022     		movs	r2, #0
 1355 0056 83F82420 		strb	r2, [r3, #36]
1359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           return HAL_TIMEOUT;
 1356              		.loc 1 1360 18
 1357 005a 0323     		movs	r3, #3
 1358 005c 13E0     		b	.L78
 1359              	.L75:
1344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 1360              		.loc 1 1344 9
 1361 005e FB68     		ldr	r3, [r7, #12]
 1362 0060 1B68     		ldr	r3, [r3]
 1363 0062 1A68     		ldr	r2, [r3]
 1364 0064 BB68     		ldr	r3, [r7, #8]
 1365 0066 1340     		ands	r3, r3, r2
1344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
 1366              		.loc 1 1344 45
 1367 0068 BA68     		ldr	r2, [r7, #8]
 1368 006a 9A42     		cmp	r2, r3
 1369 006c D4D1     		bne	.L79
1361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
1362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Analog watchdog (level out of window) event */
ARM GAS  /tmp/ccelol6o.s 			page 49


1367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set ADC state */
1368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 1370              		.loc 1 1368 3
 1371 006e FB68     		ldr	r3, [r7, #12]
 1372 0070 9B6A     		ldr	r3, [r3, #40]
 1373 0072 43F48032 		orr	r2, r3, #65536
 1374 0076 FB68     		ldr	r3, [r7, #12]
 1375 0078 9A62     		str	r2, [r3, #40]
1369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Clear ADC analog watchdog flag */
1371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 1376              		.loc 1 1371 3
 1377 007a FB68     		ldr	r3, [r7, #12]
 1378 007c 1B68     		ldr	r3, [r3]
 1379 007e 6FF00102 		mvn	r2, #1
 1380 0082 1A60     		str	r2, [r3]
1372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return ADC state */
1374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return HAL_OK;
 1381              		.loc 1 1374 10
 1382 0084 0023     		movs	r3, #0
 1383              	.L78:
1375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1384              		.loc 1 1375 1
 1385 0086 1846     		mov	r0, r3
 1386 0088 1837     		adds	r7, r7, #24
 1387              	.LCFI40:
 1388              		.cfi_def_cfa_offset 8
 1389 008a BD46     		mov	sp, r7
 1390              	.LCFI41:
 1391              		.cfi_def_cfa_register 13
 1392              		@ sp needed
 1393 008c 80BD     		pop	{r7, pc}
 1394              		.cfi_endproc
 1395              	.LFE72:
 1397              		.section	.text.HAL_ADC_Start_IT,"ax",%progbits
 1398              		.align	1
 1399              		.global	HAL_ADC_Start_IT
 1400              		.syntax unified
 1401              		.thumb
 1402              		.thumb_func
 1404              	HAL_ADC_Start_IT:
 1405              	.LFB73:
1376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group with interruption.
1379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Interruptions enabled in this function:
1380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          - EOC (end of conversion of regular group)
1381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
1384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
1386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 1406              		.loc 1 1386 1
 1407              		.cfi_startproc
 1408              		@ args = 0, pretend = 0, frame = 16
ARM GAS  /tmp/ccelol6o.s 			page 50


 1409              		@ frame_needed = 1, uses_anonymous_args = 0
 1410 0000 80B5     		push	{r7, lr}
 1411              	.LCFI42:
 1412              		.cfi_def_cfa_offset 8
 1413              		.cfi_offset 7, -8
 1414              		.cfi_offset 14, -4
 1415 0002 84B0     		sub	sp, sp, #16
 1416              	.LCFI43:
 1417              		.cfi_def_cfa_offset 24
 1418 0004 00AF     		add	r7, sp, #0
 1419              	.LCFI44:
 1420              		.cfi_def_cfa_register 7
 1421 0006 7860     		str	r0, [r7, #4]
1387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1422              		.loc 1 1387 21
 1423 0008 0023     		movs	r3, #0
 1424 000a FB73     		strb	r3, [r7, #15]
1388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
1393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 1425              		.loc 1 1393 3
 1426 000c 7B68     		ldr	r3, [r7, #4]
 1427 000e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1428 0012 012B     		cmp	r3, #1
 1429 0014 01D1     		bne	.L81
 1430              		.loc 1 1393 3 is_stmt 0 discriminator 1
 1431 0016 0223     		movs	r3, #2
 1432 0018 A0E0     		b	.L82
 1433              	.L81:
 1434              		.loc 1 1393 3 discriminator 2
 1435 001a 7B68     		ldr	r3, [r7, #4]
 1436 001c 0122     		movs	r2, #1
 1437 001e 83F82420 		strb	r2, [r3, #36]
1394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Enable the ADC peripheral */
1396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_Enable(hadc);
 1438              		.loc 1 1396 20 is_stmt 1 discriminator 2
 1439 0022 7868     		ldr	r0, [r7, #4]
 1440 0024 FFF7FEFF 		bl	ADC_Enable
 1441 0028 0346     		mov	r3, r0
 1442 002a FB73     		strb	r3, [r7, #15]
1397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
1399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 1443              		.loc 1 1399 6 discriminator 2
 1444 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1445 002e 002B     		cmp	r3, #0
 1446 0030 40F08F80 		bne	.L83
1400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state                                                          */
1402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
1403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* - Set state bitfield related to regular operation                      */
1404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 1447              		.loc 1 1404 5
ARM GAS  /tmp/ccelol6o.s 			page 51


 1448 0034 7B68     		ldr	r3, [r7, #4]
 1449 0036 9B6A     		ldr	r3, [r3, #40]
 1450 0038 23F47063 		bic	r3, r3, #3840
 1451 003c 23F00103 		bic	r3, r3, #1
 1452 0040 43F48072 		orr	r2, r3, #256
 1453 0044 7B68     		ldr	r3, [r7, #4]
 1454 0046 9A62     		str	r2, [r3, #40]
1405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC
1406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
1407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set group injected state (from auto-injection) and multimode state     */
1409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* for all cases of multimode: independent mode, multimode ADC master     */
1410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* or multimode ADC slave (for devices with several ADCs):                */
1411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 1455              		.loc 1 1411 9
 1456 0048 7B68     		ldr	r3, [r7, #4]
 1457 004a 1B68     		ldr	r3, [r3]
 1458              		.loc 1 1411 8
 1459 004c 454A     		ldr	r2, .L95
 1460 004e 9342     		cmp	r3, r2
 1461 0050 05D1     		bne	.L84
 1462              		.loc 1 1411 9 discriminator 1
 1463 0052 454B     		ldr	r3, .L95+4
 1464 0054 5B68     		ldr	r3, [r3, #4]
 1465 0056 03F47023 		and	r3, r3, #983040
 1466 005a 002B     		cmp	r3, #0
 1467 005c 15D1     		bne	.L85
 1468              	.L84:
1412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC independent or master) */
1414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 1469              		.loc 1 1414 7
 1470 005e 7B68     		ldr	r3, [r7, #4]
 1471 0060 9B6A     		ldr	r3, [r3, #40]
 1472 0062 23F48012 		bic	r2, r3, #1048576
 1473 0066 7B68     		ldr	r3, [r7, #4]
 1474 0068 9A62     		str	r2, [r3, #40]
1415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 1475              		.loc 1 1418 11
 1476 006a 7B68     		ldr	r3, [r7, #4]
 1477 006c 1B68     		ldr	r3, [r3]
 1478 006e 5B68     		ldr	r3, [r3, #4]
 1479 0070 03F48063 		and	r3, r3, #1024
 1480              		.loc 1 1418 10
 1481 0074 002B     		cmp	r3, #0
 1482 0076 26D0     		beq	.L87
1419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 1483              		.loc 1 1420 9
 1484 0078 7B68     		ldr	r3, [r7, #4]
 1485 007a 9B6A     		ldr	r3, [r3, #40]
 1486 007c 23F44053 		bic	r3, r3, #12288
 1487 0080 43F48052 		orr	r2, r3, #4096
 1488 0084 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccelol6o.s 			page 52


 1489 0086 9A62     		str	r2, [r3, #40]
1418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1490              		.loc 1 1418 10
 1491 0088 1DE0     		b	.L87
 1492              	.L85:
1421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC slave) */
1426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 1493              		.loc 1 1426 7
 1494 008a 7B68     		ldr	r3, [r7, #4]
 1495 008c 9B6A     		ldr	r3, [r3, #40]
 1496 008e 43F48012 		orr	r2, r3, #1048576
 1497 0092 7B68     		ldr	r3, [r7, #4]
 1498 0094 9A62     		str	r2, [r3, #40]
1427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 1499              		.loc 1 1430 11
 1500 0096 7B68     		ldr	r3, [r7, #4]
 1501 0098 1B68     		ldr	r3, [r3]
 1502              		.loc 1 1430 10
 1503 009a 334A     		ldr	r2, .L95+4
 1504 009c 9342     		cmp	r3, r2
 1505 009e 04D0     		beq	.L88
 1506              		.loc 1 1430 11 discriminator 2
 1507 00a0 7B68     		ldr	r3, [r7, #4]
 1508 00a2 1B68     		ldr	r3, [r3]
 1509 00a4 2F4A     		ldr	r2, .L95
 1510 00a6 9342     		cmp	r3, r2
 1511 00a8 0DD1     		bne	.L87
 1512              	.L88:
 1513              		.loc 1 1430 11 is_stmt 0 discriminator 3
 1514 00aa 2F4B     		ldr	r3, .L95+4
 1515 00ac 5B68     		ldr	r3, [r3, #4]
 1516 00ae 03F48063 		and	r3, r3, #1024
 1517 00b2 002B     		cmp	r3, #0
 1518 00b4 07D0     		beq	.L87
1431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 1519              		.loc 1 1432 9 is_stmt 1
 1520 00b6 7B68     		ldr	r3, [r7, #4]
 1521 00b8 9B6A     		ldr	r3, [r3, #40]
 1522 00ba 23F44053 		bic	r3, r3, #12288
 1523 00be 43F48052 		orr	r2, r3, #4096
 1524 00c2 7B68     		ldr	r3, [r7, #4]
 1525 00c4 9A62     		str	r2, [r3, #40]
 1526              	.L87:
1433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
1437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 1527              		.loc 1 1437 9
ARM GAS  /tmp/ccelol6o.s 			page 53


 1528 00c6 7B68     		ldr	r3, [r7, #4]
 1529 00c8 9B6A     		ldr	r3, [r3, #40]
 1530 00ca 03F48053 		and	r3, r3, #4096
 1531              		.loc 1 1437 8
 1532 00ce 002B     		cmp	r3, #0
 1533 00d0 06D0     		beq	.L89
1438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
1440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 1534              		.loc 1 1440 7
 1535 00d2 7B68     		ldr	r3, [r7, #4]
 1536 00d4 DB6A     		ldr	r3, [r3, #44]
 1537 00d6 23F00602 		bic	r2, r3, #6
 1538 00da 7B68     		ldr	r3, [r7, #4]
 1539 00dc DA62     		str	r2, [r3, #44]
 1540 00de 02E0     		b	.L90
 1541              	.L89:
1441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Reset ADC all error code fields */
1445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 1542              		.loc 1 1445 7
 1543 00e0 7B68     		ldr	r3, [r7, #4]
 1544 00e2 0022     		movs	r2, #0
 1545 00e4 DA62     		str	r2, [r3, #44]
 1546              	.L90:
1446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
1449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
1450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
1451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 1547              		.loc 1 1451 5
 1548 00e6 7B68     		ldr	r3, [r7, #4]
 1549 00e8 0022     		movs	r2, #0
 1550 00ea 83F82420 		strb	r2, [r3, #36]
1452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Clear regular group conversion flag and overrun flag */
1454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
1455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 1551              		.loc 1 1455 5
 1552 00ee 7B68     		ldr	r3, [r7, #4]
 1553 00f0 1B68     		ldr	r3, [r3]
 1554 00f2 6FF00202 		mvn	r2, #2
 1555 00f6 1A60     		str	r2, [r3]
1456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable end of conversion interrupt for regular group */
1458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 1556              		.loc 1 1458 5
 1557 00f8 7B68     		ldr	r3, [r7, #4]
 1558 00fa 1B68     		ldr	r3, [r3]
 1559 00fc 5A68     		ldr	r2, [r3, #4]
 1560 00fe 7B68     		ldr	r3, [r7, #4]
 1561 0100 1B68     		ldr	r3, [r3]
 1562 0102 42F02002 		orr	r2, r2, #32
 1563 0106 5A60     		str	r2, [r3, #4]
ARM GAS  /tmp/ccelol6o.s 			page 54


1459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable conversion of regular group.                                    */
1461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If software start has been selected, conversion starts immediately.    */
1462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* If external trigger has been selected, conversion will start at next   */
1463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* trigger event.                                                         */
1464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Case of multimode enabled:                                             */ 
1465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
1466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*  - if ADC is master, ADC is enabled and conversion is started.         */
1467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 1564              		.loc 1 1467 9
 1565 0108 7B68     		ldr	r3, [r7, #4]
 1566 010a 1B68     		ldr	r3, [r3]
 1567 010c 9B68     		ldr	r3, [r3, #8]
 1568 010e 03F46023 		and	r3, r3, #917504
 1569              		.loc 1 1467 8
 1570 0112 B3F5602F 		cmp	r3, #917504
 1571 0116 13D1     		bne	.L91
1468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 1572              		.loc 1 1468 9 discriminator 1
 1573 0118 7B68     		ldr	r3, [r7, #4]
 1574 011a 1B68     		ldr	r3, [r3]
1467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 1575              		.loc 1 1467 50 discriminator 1
 1576 011c 114A     		ldr	r2, .L95
 1577 011e 9342     		cmp	r3, r2
 1578 0120 05D1     		bne	.L92
 1579              		.loc 1 1468 9 discriminator 2
 1580 0122 114B     		ldr	r3, .L95+4
 1581 0124 5B68     		ldr	r3, [r3, #4]
 1582 0126 03F47023 		and	r3, r3, #983040
1467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 1583              		.loc 1 1467 50 discriminator 2
 1584 012a 002B     		cmp	r3, #0
 1585 012c 08D1     		bne	.L91
 1586              	.L92:
1469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Start ADC conversion on regular group with SW start */
1471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 1587              		.loc 1 1471 7
 1588 012e 7B68     		ldr	r3, [r7, #4]
 1589 0130 1B68     		ldr	r3, [r3]
 1590 0132 9A68     		ldr	r2, [r3, #8]
 1591 0134 7B68     		ldr	r3, [r7, #4]
 1592 0136 1B68     		ldr	r3, [r3]
 1593 0138 42F4A002 		orr	r2, r2, #5242880
 1594 013c 9A60     		str	r2, [r3, #8]
 1595 013e 0CE0     		b	.L94
 1596              	.L91:
1472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Start ADC conversion on regular group with external trigger */
1476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 1597              		.loc 1 1476 7
 1598 0140 7B68     		ldr	r3, [r7, #4]
 1599 0142 1B68     		ldr	r3, [r3]
 1600 0144 9A68     		ldr	r2, [r3, #8]
ARM GAS  /tmp/ccelol6o.s 			page 55


 1601 0146 7B68     		ldr	r3, [r7, #4]
 1602 0148 1B68     		ldr	r3, [r3]
 1603 014a 42F48012 		orr	r2, r2, #1048576
 1604 014e 9A60     		str	r2, [r3, #8]
 1605 0150 03E0     		b	.L94
 1606              	.L83:
1477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
1480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process unlocked */
1482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 1607              		.loc 1 1482 5
 1608 0152 7B68     		ldr	r3, [r7, #4]
 1609 0154 0022     		movs	r2, #0
 1610 0156 83F82420 		strb	r2, [r3, #36]
 1611              	.L94:
1483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 1612              		.loc 1 1486 10
 1613 015a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1614              	.L82:
1487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1615              		.loc 1 1487 1
 1616 015c 1846     		mov	r0, r3
 1617 015e 1037     		adds	r7, r7, #16
 1618              	.LCFI45:
 1619              		.cfi_def_cfa_offset 8
 1620 0160 BD46     		mov	sp, r7
 1621              	.LCFI46:
 1622              		.cfi_def_cfa_register 13
 1623              		@ sp needed
 1624 0162 80BD     		pop	{r7, pc}
 1625              	.L96:
 1626              		.align	2
 1627              	.L95:
 1628 0164 00280140 		.word	1073817600
 1629 0168 00240140 		.word	1073816576
 1630              		.cfi_endproc
 1631              	.LFE73:
 1633              		.section	.text.HAL_ADC_Stop_IT,"ax",%progbits
 1634              		.align	1
 1635              		.global	HAL_ADC_Stop_IT
 1636              		.syntax unified
 1637              		.thumb
 1638              		.thumb_func
 1640              	HAL_ADC_Stop_IT:
 1641              	.LFB74:
1488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in 
1491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         case of auto_injection mode), disable interrution of 
1492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         end-of-conversion, disable ADC peripheral.
1493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
ARM GAS  /tmp/ccelol6o.s 			page 56


1495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
1497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 1642              		.loc 1 1497 1
 1643              		.cfi_startproc
 1644              		@ args = 0, pretend = 0, frame = 16
 1645              		@ frame_needed = 1, uses_anonymous_args = 0
 1646 0000 80B5     		push	{r7, lr}
 1647              	.LCFI47:
 1648              		.cfi_def_cfa_offset 8
 1649              		.cfi_offset 7, -8
 1650              		.cfi_offset 14, -4
 1651 0002 84B0     		sub	sp, sp, #16
 1652              	.LCFI48:
 1653              		.cfi_def_cfa_offset 24
 1654 0004 00AF     		add	r7, sp, #0
 1655              	.LCFI49:
 1656              		.cfi_def_cfa_register 7
 1657 0006 7860     		str	r0, [r7, #4]
1498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1658              		.loc 1 1498 21
 1659 0008 0023     		movs	r3, #0
 1660 000a FB73     		strb	r3, [r7, #15]
1499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      
1503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
1504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 1661              		.loc 1 1504 3
 1662 000c 7B68     		ldr	r3, [r7, #4]
 1663 000e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1664 0012 012B     		cmp	r3, #1
 1665 0014 01D1     		bne	.L98
 1666              		.loc 1 1504 3 is_stmt 0 discriminator 1
 1667 0016 0223     		movs	r3, #2
 1668 0018 22E0     		b	.L99
 1669              	.L98:
 1670              		.loc 1 1504 3 discriminator 2
 1671 001a 7B68     		ldr	r3, [r7, #4]
 1672 001c 0122     		movs	r2, #1
 1673 001e 83F82420 		strb	r2, [r3, #36]
1505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
1507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
1508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 1674              		.loc 1 1508 20 is_stmt 1 discriminator 2
 1675 0022 7868     		ldr	r0, [r7, #4]
 1676 0024 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 1677 0028 0346     		mov	r3, r0
 1678 002a FB73     		strb	r3, [r7, #15]
1509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
1511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 1679              		.loc 1 1511 6 discriminator 2
 1680 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1681 002e 002B     		cmp	r3, #0
ARM GAS  /tmp/ccelol6o.s 			page 57


 1682 0030 11D1     		bne	.L100
1512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Disable ADC end of conversion interrupt for regular group */
1514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 1683              		.loc 1 1514 5
 1684 0032 7B68     		ldr	r3, [r7, #4]
 1685 0034 1B68     		ldr	r3, [r3]
 1686 0036 5A68     		ldr	r2, [r3, #4]
 1687 0038 7B68     		ldr	r3, [r7, #4]
 1688 003a 1B68     		ldr	r3, [r3]
 1689 003c 22F02002 		bic	r2, r2, #32
 1690 0040 5A60     		str	r2, [r3, #4]
1515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set ADC state */
1517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 1691              		.loc 1 1517 5
 1692 0042 7B68     		ldr	r3, [r7, #4]
 1693 0044 9B6A     		ldr	r3, [r3, #40]
 1694 0046 23F48853 		bic	r3, r3, #4352
 1695 004a 23F00103 		bic	r3, r3, #1
 1696 004e 43F00102 		orr	r2, r3, #1
 1697 0052 7B68     		ldr	r3, [r7, #4]
 1698 0054 9A62     		str	r2, [r3, #40]
 1699              	.L100:
1518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
1520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
1523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 1700              		.loc 1 1523 3
 1701 0056 7B68     		ldr	r3, [r7, #4]
 1702 0058 0022     		movs	r2, #0
 1703 005a 83F82420 		strb	r2, [r3, #36]
1524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 1704              		.loc 1 1526 10
 1705 005e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1706              	.L99:
1527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1707              		.loc 1 1527 1
 1708 0060 1846     		mov	r0, r3
 1709 0062 1037     		adds	r7, r7, #16
 1710              	.LCFI50:
 1711              		.cfi_def_cfa_offset 8
 1712 0064 BD46     		mov	sp, r7
 1713              	.LCFI51:
 1714              		.cfi_def_cfa_register 13
 1715              		@ sp needed
 1716 0066 80BD     		pop	{r7, pc}
 1717              		.cfi_endproc
 1718              	.LFE74:
 1720              		.section	.text.HAL_ADC_Start_DMA,"ax",%progbits
 1721              		.align	1
 1722              		.global	HAL_ADC_Start_DMA
 1723              		.syntax unified
ARM GAS  /tmp/ccelol6o.s 			page 58


 1724              		.thumb
 1725              		.thumb_func
 1727              	HAL_ADC_Start_DMA:
 1728              	.LFB75:
1528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Enables ADC, starts conversion of regular group and transfers result
1531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         through DMA.
1532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Interruptions enabled in this function:
1533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          - DMA transfer complete
1534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          - DMA half transfer
1535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   For devices with several ADCs: This function is for single-ADC mode 
1537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         only. For multimode, use the dedicated MultimodeStart function.
1538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   On STM32F1 devices, only ADC1 and ADC3 (ADC availability depending
1539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         on devices) have DMA capability.
1540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         ADC2 converted data can be transferred in dual ADC mode using DMA
1541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         of ADC1 (ADC master in multimode).
1542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         In case of using ADC1 with DMA on a device featuring 2 ADC
1543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         instances: ADC1 conversion register DR contains ADC1 conversion 
1544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         result (ADC1 register DR bits 0 to 11) and, additionally, ADC2 last
1545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         conversion result (ADC1 register DR bits 16 to 27). Therefore, to
1546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         have DMA transferring the conversion results of ADC1 only, DMA must
1547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         be configured to transfer size: half word.
1548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  pData: The destination Buffer address.
1550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  Length: The length of data to be transferred from ADC peripheral to memory.
1551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
1554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 1729              		.loc 1 1554 1
 1730              		.cfi_startproc
 1731              		@ args = 0, pretend = 0, frame = 24
 1732              		@ frame_needed = 1, uses_anonymous_args = 0
 1733 0000 80B5     		push	{r7, lr}
 1734              	.LCFI52:
 1735              		.cfi_def_cfa_offset 8
 1736              		.cfi_offset 7, -8
 1737              		.cfi_offset 14, -4
 1738 0002 86B0     		sub	sp, sp, #24
 1739              	.LCFI53:
 1740              		.cfi_def_cfa_offset 32
 1741 0004 00AF     		add	r7, sp, #0
 1742              	.LCFI54:
 1743              		.cfi_def_cfa_register 7
 1744 0006 F860     		str	r0, [r7, #12]
 1745 0008 B960     		str	r1, [r7, #8]
 1746 000a 7A60     		str	r2, [r7, #4]
1555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1747              		.loc 1 1555 21
 1748 000c 0023     		movs	r3, #0
 1749 000e FB75     		strb	r3, [r7, #23]
1556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
1559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
ARM GAS  /tmp/ccelol6o.s 			page 59


1560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Verification if multimode is disabled (for devices with several ADC)     */
1561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* If multimode is enabled, dedicated function multimode conversion         */
1562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* start DMA must be used.                                                  */
1563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 1750              		.loc 1 1563 6
 1751 0010 FB68     		ldr	r3, [r7, #12]
 1752 0012 1B68     		ldr	r3, [r3]
 1753              		.loc 1 1563 5
 1754 0014 644A     		ldr	r2, .L118
 1755 0016 9342     		cmp	r3, r2
 1756 0018 04D0     		beq	.L102
 1757              		.loc 1 1563 6 discriminator 1
 1758 001a FB68     		ldr	r3, [r7, #12]
 1759 001c 1B68     		ldr	r3, [r3]
 1760 001e 634A     		ldr	r2, .L118+4
 1761 0020 9342     		cmp	r3, r2
 1762 0022 06D1     		bne	.L103
 1763              	.L102:
 1764              		.loc 1 1563 6 is_stmt 0 discriminator 3
 1765 0024 604B     		ldr	r3, .L118
 1766 0026 5B68     		ldr	r3, [r3, #4]
 1767 0028 03F47023 		and	r3, r3, #983040
 1768              		.loc 1 1563 36 is_stmt 1 discriminator 3
 1769 002c 002B     		cmp	r3, #0
 1770 002e 40F0B380 		bne	.L104
 1771              	.L103:
1564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Process locked */
1566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_LOCK(hadc);
 1772              		.loc 1 1566 5
 1773 0032 FB68     		ldr	r3, [r7, #12]
 1774 0034 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 1775 0038 012B     		cmp	r3, #1
 1776 003a 01D1     		bne	.L105
 1777              		.loc 1 1566 5 is_stmt 0 discriminator 1
 1778 003c 0223     		movs	r3, #2
 1779 003e AEE0     		b	.L106
 1780              	.L105:
 1781              		.loc 1 1566 5 discriminator 2
 1782 0040 FB68     		ldr	r3, [r7, #12]
 1783 0042 0122     		movs	r2, #1
 1784 0044 83F82420 		strb	r2, [r3, #36]
1567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable the ADC peripheral */
1569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_hal_status = ADC_Enable(hadc);
 1785              		.loc 1 1569 22 is_stmt 1 discriminator 2
 1786 0048 F868     		ldr	r0, [r7, #12]
 1787 004a FFF7FEFF 		bl	ADC_Enable
 1788 004e 0346     		mov	r3, r0
 1789 0050 FB75     		strb	r3, [r7, #23]
1570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 1790              		.loc 1 1572 8 discriminator 2
 1791 0052 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1792 0054 002B     		cmp	r3, #0
 1793 0056 40F09A80 		bne	.L107
ARM GAS  /tmp/ccelol6o.s 			page 60


1573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state                                                        */
1575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 1794              		.loc 1 1577 7
 1795 005a FB68     		ldr	r3, [r7, #12]
 1796 005c 9B6A     		ldr	r3, [r3, #40]
 1797 005e 23F47063 		bic	r3, r3, #3840
 1798 0062 23F00103 		bic	r3, r3, #1
 1799 0066 43F48072 		orr	r2, r3, #256
 1800 006a FB68     		ldr	r3, [r7, #12]
 1801 006c 9A62     		str	r2, [r3, #40]
1578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Set group injected state (from auto-injection) and multimode state     */
1582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* for all cases of multimode: independent mode, multimode ADC master     */
1583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* or multimode ADC slave (for devices with several ADCs):                */
1584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 1802              		.loc 1 1584 9
 1803 006e FB68     		ldr	r3, [r7, #12]
 1804 0070 1B68     		ldr	r3, [r3]
 1805              		.loc 1 1584 8
 1806 0072 4E4A     		ldr	r2, .L118+4
 1807 0074 9342     		cmp	r3, r2
 1808 0076 05D1     		bne	.L108
 1809              		.loc 1 1584 9 discriminator 1
 1810 0078 4B4B     		ldr	r3, .L118
 1811 007a 5B68     		ldr	r3, [r3, #4]
 1812 007c 03F47023 		and	r3, r3, #983040
 1813 0080 002B     		cmp	r3, #0
 1814 0082 15D1     		bne	.L109
 1815              	.L108:
1585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC independent or master) */
1587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 1816              		.loc 1 1587 7
 1817 0084 FB68     		ldr	r3, [r7, #12]
 1818 0086 9B6A     		ldr	r3, [r3, #40]
 1819 0088 23F48012 		bic	r2, r3, #1048576
 1820 008c FB68     		ldr	r3, [r7, #12]
 1821 008e 9A62     		str	r2, [r3, #40]
1588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 1822              		.loc 1 1591 11
 1823 0090 FB68     		ldr	r3, [r7, #12]
 1824 0092 1B68     		ldr	r3, [r3]
 1825 0094 5B68     		ldr	r3, [r3, #4]
 1826 0096 03F48063 		and	r3, r3, #1024
 1827              		.loc 1 1591 10
 1828 009a 002B     		cmp	r3, #0
 1829 009c 26D0     		beq	.L111
1592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
ARM GAS  /tmp/ccelol6o.s 			page 61


 1830              		.loc 1 1593 9
 1831 009e FB68     		ldr	r3, [r7, #12]
 1832 00a0 9B6A     		ldr	r3, [r3, #40]
 1833 00a2 23F44053 		bic	r3, r3, #12288
 1834 00a6 43F48052 		orr	r2, r3, #4096
 1835 00aa FB68     		ldr	r3, [r7, #12]
 1836 00ac 9A62     		str	r2, [r3, #40]
1591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
 1837              		.loc 1 1591 10
 1838 00ae 1DE0     		b	.L111
 1839              	.L109:
1594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state (ADC slave) */
1599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 1840              		.loc 1 1599 7
 1841 00b0 FB68     		ldr	r3, [r7, #12]
 1842 00b2 9B6A     		ldr	r3, [r3, #40]
 1843 00b4 43F48012 		orr	r2, r3, #1048576
 1844 00b8 FB68     		ldr	r3, [r7, #12]
 1845 00ba 9A62     		str	r2, [r3, #40]
1600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If conversions on group regular are also triggering group injected,  */
1602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* update ADC state.                                                    */
1603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 1846              		.loc 1 1603 11
 1847 00bc FB68     		ldr	r3, [r7, #12]
 1848 00be 1B68     		ldr	r3, [r3]
 1849              		.loc 1 1603 10
 1850 00c0 394A     		ldr	r2, .L118
 1851 00c2 9342     		cmp	r3, r2
 1852 00c4 04D0     		beq	.L112
 1853              		.loc 1 1603 11 discriminator 2
 1854 00c6 FB68     		ldr	r3, [r7, #12]
 1855 00c8 1B68     		ldr	r3, [r3]
 1856 00ca 384A     		ldr	r2, .L118+4
 1857 00cc 9342     		cmp	r3, r2
 1858 00ce 0DD1     		bne	.L111
 1859              	.L112:
 1860              		.loc 1 1603 11 is_stmt 0 discriminator 3
 1861 00d0 354B     		ldr	r3, .L118
 1862 00d2 5B68     		ldr	r3, [r3, #4]
 1863 00d4 03F48063 		and	r3, r3, #1024
 1864 00d8 002B     		cmp	r3, #0
 1865 00da 07D0     		beq	.L111
1604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 1866              		.loc 1 1605 9 is_stmt 1
 1867 00dc FB68     		ldr	r3, [r7, #12]
 1868 00de 9B6A     		ldr	r3, [r3, #40]
 1869 00e0 23F44053 		bic	r3, r3, #12288
 1870 00e4 43F48052 		orr	r2, r3, #4096
 1871 00e8 FB68     		ldr	r3, [r7, #12]
 1872 00ea 9A62     		str	r2, [r3, #40]
 1873              	.L111:
ARM GAS  /tmp/ccelol6o.s 			page 62


1606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* State machine update: Check if an injected conversion is ongoing */
1610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 1874              		.loc 1 1610 11
 1875 00ec FB68     		ldr	r3, [r7, #12]
 1876 00ee 9B6A     		ldr	r3, [r3, #40]
 1877 00f0 03F48053 		and	r3, r3, #4096
 1878              		.loc 1 1610 10
 1879 00f4 002B     		cmp	r3, #0
 1880 00f6 06D0     		beq	.L113
1611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Reset ADC error code fields related to conversions on group regular */
1613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 1881              		.loc 1 1613 9
 1882 00f8 FB68     		ldr	r3, [r7, #12]
 1883 00fa DB6A     		ldr	r3, [r3, #44]
 1884 00fc 23F00602 		bic	r2, r3, #6
 1885 0100 FB68     		ldr	r3, [r7, #12]
 1886 0102 DA62     		str	r2, [r3, #44]
 1887 0104 02E0     		b	.L114
 1888              	.L113:
1614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       else
1616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Reset ADC all error code fields */
1618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_CLEAR_ERRORCODE(hadc);
 1889              		.loc 1 1618 9
 1890 0106 FB68     		ldr	r3, [r7, #12]
 1891 0108 0022     		movs	r2, #0
 1892 010a DA62     		str	r2, [r3, #44]
 1893              	.L114:
1619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Process unlocked */
1622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 1894              		.loc 1 1624 7
 1895 010c FB68     		ldr	r3, [r7, #12]
 1896 010e 0022     		movs	r2, #0
 1897 0110 83F82420 		strb	r2, [r3, #36]
1625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set the DMA transfer complete callback */
1627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 1898              		.loc 1 1627 11
 1899 0114 FB68     		ldr	r3, [r7, #12]
 1900 0116 1B6A     		ldr	r3, [r3, #32]
 1901              		.loc 1 1627 42
 1902 0118 254A     		ldr	r2, .L118+8
 1903 011a 9A62     		str	r2, [r3, #40]
1628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set the DMA half transfer complete callback */
1630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 1904              		.loc 1 1630 11
 1905 011c FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccelol6o.s 			page 63


 1906 011e 1B6A     		ldr	r3, [r3, #32]
 1907              		.loc 1 1630 46
 1908 0120 244A     		ldr	r2, .L118+12
 1909 0122 DA62     		str	r2, [r3, #44]
1631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set the DMA error callback */
1633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 1910              		.loc 1 1633 11
 1911 0124 FB68     		ldr	r3, [r7, #12]
 1912 0126 1B6A     		ldr	r3, [r3, #32]
 1913              		.loc 1 1633 43
 1914 0128 234A     		ldr	r2, .L118+16
 1915 012a 1A63     		str	r2, [r3, #48]
1634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC   */
1637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* start (in case of SW start):                                         */
1638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Clear regular group conversion flag and overrun flag */
1640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC           */
1641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* operations)                                                          */
1642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 1916              		.loc 1 1642 7
 1917 012c FB68     		ldr	r3, [r7, #12]
 1918 012e 1B68     		ldr	r3, [r3]
 1919 0130 6FF00202 		mvn	r2, #2
 1920 0134 1A60     		str	r2, [r3]
1643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Enable ADC DMA mode */
1645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 1921              		.loc 1 1645 7
 1922 0136 FB68     		ldr	r3, [r7, #12]
 1923 0138 1B68     		ldr	r3, [r3]
 1924 013a 9A68     		ldr	r2, [r3, #8]
 1925 013c FB68     		ldr	r3, [r7, #12]
 1926 013e 1B68     		ldr	r3, [r3]
 1927 0140 42F48072 		orr	r2, r2, #256
 1928 0144 9A60     		str	r2, [r3, #8]
1646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Start the DMA channel */
1648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 1929              		.loc 1 1648 7
 1930 0146 FB68     		ldr	r3, [r7, #12]
 1931 0148 186A     		ldr	r0, [r3, #32]
 1932              		.loc 1 1648 57
 1933 014a FB68     		ldr	r3, [r7, #12]
 1934 014c 1B68     		ldr	r3, [r3]
 1935              		.loc 1 1648 52
 1936 014e 4C33     		adds	r3, r3, #76
 1937              		.loc 1 1648 7
 1938 0150 1946     		mov	r1, r3
 1939 0152 BA68     		ldr	r2, [r7, #8]
 1940 0154 7B68     		ldr	r3, [r7, #4]
 1941 0156 FFF7FEFF 		bl	HAL_DMA_Start_IT
1649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
ARM GAS  /tmp/ccelol6o.s 			page 64


1652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* trigger event.                                                       */
1654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 1942              		.loc 1 1654 11
 1943 015a FB68     		ldr	r3, [r7, #12]
 1944 015c 1B68     		ldr	r3, [r3]
 1945 015e 9B68     		ldr	r3, [r3, #8]
 1946 0160 03F46023 		and	r3, r3, #917504
 1947              		.loc 1 1654 10
 1948 0164 B3F5602F 		cmp	r3, #917504
 1949 0168 08D1     		bne	.L115
1655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Start ADC conversion on regular group with SW start */
1657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 1950              		.loc 1 1657 9
 1951 016a FB68     		ldr	r3, [r7, #12]
 1952 016c 1B68     		ldr	r3, [r3]
 1953 016e 9A68     		ldr	r2, [r3, #8]
 1954 0170 FB68     		ldr	r3, [r7, #12]
 1955 0172 1B68     		ldr	r3, [r3]
 1956 0174 42F4A002 		orr	r2, r2, #5242880
 1957 0178 9A60     		str	r2, [r3, #8]
1572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1958              		.loc 1 1572 8
 1959 017a 0FE0     		b	.L117
 1960              	.L115:
1658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       else
1660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Start ADC conversion on regular group with external trigger */
1662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 1961              		.loc 1 1662 9
 1962 017c FB68     		ldr	r3, [r7, #12]
 1963 017e 1B68     		ldr	r3, [r3]
 1964 0180 9A68     		ldr	r2, [r3, #8]
 1965 0182 FB68     		ldr	r3, [r7, #12]
 1966 0184 1B68     		ldr	r3, [r3]
 1967 0186 42F48012 		orr	r2, r2, #1048576
 1968 018a 9A60     		str	r2, [r3, #8]
1572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1969              		.loc 1 1572 8
 1970 018c 06E0     		b	.L117
 1971              	.L107:
1663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
1666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Process unlocked */
1668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 1972              		.loc 1 1668 7
 1973 018e FB68     		ldr	r3, [r7, #12]
 1974 0190 0022     		movs	r2, #0
 1975 0192 83F82420 		strb	r2, [r3, #36]
1572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 1976              		.loc 1 1572 8
 1977 0196 01E0     		b	.L117
 1978              	.L104:
ARM GAS  /tmp/ccelol6o.s 			page 65


1669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
1672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 1979              		.loc 1 1673 20
 1980 0198 0123     		movs	r3, #1
 1981 019a FB75     		strb	r3, [r7, #23]
 1982              	.L117:
1674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 1983              		.loc 1 1677 10
 1984 019c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1985              	.L106:
1678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 1986              		.loc 1 1678 1
 1987 019e 1846     		mov	r0, r3
 1988 01a0 1837     		adds	r7, r7, #24
 1989              	.LCFI55:
 1990              		.cfi_def_cfa_offset 8
 1991 01a2 BD46     		mov	sp, r7
 1992              	.LCFI56:
 1993              		.cfi_def_cfa_register 13
 1994              		@ sp needed
 1995 01a4 80BD     		pop	{r7, pc}
 1996              	.L119:
 1997 01a6 00BF     		.align	2
 1998              	.L118:
 1999 01a8 00240140 		.word	1073816576
 2000 01ac 00280140 		.word	1073817600
 2001 01b0 00000000 		.word	ADC_DMAConvCplt
 2002 01b4 00000000 		.word	ADC_DMAHalfConvCplt
 2003 01b8 00000000 		.word	ADC_DMAError
 2004              		.cfi_endproc
 2005              	.LFE75:
 2007              		.section	.text.HAL_ADC_Stop_DMA,"ax",%progbits
 2008              		.align	1
 2009              		.global	HAL_ADC_Stop_DMA
 2010              		.syntax unified
 2011              		.thumb
 2012              		.thumb_func
 2014              	HAL_ADC_Stop_DMA:
 2015              	.LFB76:
1679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in 
1682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC DMA transfer, disable 
1683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         ADC peripheral.
1684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note:  ADC peripheral disable is forcing stop of potential 
1685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         conversion on injected group. If injected group is under use, it
1686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
1687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   For devices with several ADCs: This function is for single-ADC mode 
1688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         only. For multimode, use the dedicated MultimodeStop function.
1689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   On STM32F1 devices, only ADC1 and ADC3 (ADC availability depending
1690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         on devices) have DMA capability.
ARM GAS  /tmp/ccelol6o.s 			page 66


1691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status.
1693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
1695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2016              		.loc 1 1695 1
 2017              		.cfi_startproc
 2018              		@ args = 0, pretend = 0, frame = 16
 2019              		@ frame_needed = 1, uses_anonymous_args = 0
 2020 0000 80B5     		push	{r7, lr}
 2021              	.LCFI57:
 2022              		.cfi_def_cfa_offset 8
 2023              		.cfi_offset 7, -8
 2024              		.cfi_offset 14, -4
 2025 0002 84B0     		sub	sp, sp, #16
 2026              	.LCFI58:
 2027              		.cfi_def_cfa_offset 24
 2028 0004 00AF     		add	r7, sp, #0
 2029              	.LCFI59:
 2030              		.cfi_def_cfa_register 7
 2031 0006 7860     		str	r0, [r7, #4]
1696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2032              		.loc 1 1696 21
 2033 0008 0023     		movs	r3, #0
 2034 000a FB73     		strb	r3, [r7, #15]
1697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
1700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      
1701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
1702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 2035              		.loc 1 1702 3
 2036 000c 7B68     		ldr	r3, [r7, #4]
 2037 000e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 2038 0012 012B     		cmp	r3, #1
 2039 0014 01D1     		bne	.L121
 2040              		.loc 1 1702 3 is_stmt 0 discriminator 1
 2041 0016 0223     		movs	r3, #2
 2042 0018 3AE0     		b	.L122
 2043              	.L121:
 2044              		.loc 1 1702 3 discriminator 2
 2045 001a 7B68     		ldr	r3, [r7, #4]
 2046 001c 0122     		movs	r2, #1
 2047 001e 83F82420 		strb	r2, [r3, #36]
1703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
1705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Disable ADC peripheral */
1706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 2048              		.loc 1 1706 20 is_stmt 1 discriminator 2
 2049 0022 7868     		ldr	r0, [r7, #4]
 2050 0024 FFF7FEFF 		bl	ADC_ConversionStop_Disable
 2051 0028 0346     		mov	r3, r0
 2052 002a FB73     		strb	r3, [r7, #15]
1707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
1709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 2053              		.loc 1 1709 6 discriminator 2
ARM GAS  /tmp/ccelol6o.s 			page 67


 2054 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2055 002e 002B     		cmp	r3, #0
 2056 0030 29D1     		bne	.L123
1710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Disable ADC DMA mode */
1712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 2057              		.loc 1 1712 5
 2058 0032 7B68     		ldr	r3, [r7, #4]
 2059 0034 1B68     		ldr	r3, [r3]
 2060 0036 9A68     		ldr	r2, [r3, #8]
 2061 0038 7B68     		ldr	r3, [r7, #4]
 2062 003a 1B68     		ldr	r3, [r3]
 2063 003c 22F48072 		bic	r2, r2, #256
 2064 0040 9A60     		str	r2, [r3, #8]
1713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop while */
1715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* DMA transfer is on going)                                              */
1716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 2065              		.loc 1 1716 13
 2066 0042 7B68     		ldr	r3, [r7, #4]
 2067 0044 1B6A     		ldr	r3, [r3, #32]
 2068              		.loc 1 1716 25
 2069 0046 93F82130 		ldrb	r3, [r3, #33]
 2070 004a DBB2     		uxtb	r3, r3
 2071              		.loc 1 1716 8
 2072 004c 022B     		cmp	r3, #2
 2073 004e 1AD1     		bne	.L123
1717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 2074              		.loc 1 1718 24
 2075 0050 7B68     		ldr	r3, [r7, #4]
 2076 0052 1B6A     		ldr	r3, [r3, #32]
 2077 0054 1846     		mov	r0, r3
 2078 0056 FFF7FEFF 		bl	HAL_DMA_Abort
 2079 005a 0346     		mov	r3, r0
 2080 005c FB73     		strb	r3, [r7, #15]
1719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Check if DMA channel effectively disabled */
1721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (tmp_hal_status == HAL_OK)
 2081              		.loc 1 1721 10
 2082 005e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2083 0060 002B     		cmp	r3, #0
 2084 0062 0AD1     		bne	.L124
1722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC state */
1724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State,
 2085              		.loc 1 1724 9
 2086 0064 7B68     		ldr	r3, [r7, #4]
 2087 0066 9B6A     		ldr	r3, [r3, #40]
 2088 0068 23F48853 		bic	r3, r3, #4352
 2089 006c 23F00103 		bic	r3, r3, #1
 2090 0070 43F00102 		orr	r2, r3, #1
 2091 0074 7B68     		ldr	r3, [r7, #4]
 2092 0076 9A62     		str	r2, [r3, #40]
 2093 0078 05E0     		b	.L123
 2094              	.L124:
1725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                           HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
ARM GAS  /tmp/ccelol6o.s 			page 68


1726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                           HAL_ADC_STATE_READY);
1727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       else
1729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Update ADC state machine to error */
1731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 2095              		.loc 1 1731 9
 2096 007a 7B68     		ldr	r3, [r7, #4]
 2097 007c 9B6A     		ldr	r3, [r3, #40]
 2098 007e 43F04002 		orr	r2, r3, #64
 2099 0082 7B68     		ldr	r3, [r7, #4]
 2100 0084 9A62     		str	r2, [r3, #40]
 2101              	.L123:
1732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
1737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 2102              		.loc 1 1737 3
 2103 0086 7B68     		ldr	r3, [r7, #4]
 2104 0088 0022     		movs	r2, #0
 2105 008a 83F82420 		strb	r2, [r3, #36]
1738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
1739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
1740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 2106              		.loc 1 1740 10
 2107 008e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2108              	.L122:
1741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2109              		.loc 1 1741 1
 2110 0090 1846     		mov	r0, r3
 2111 0092 1037     		adds	r7, r7, #16
 2112              	.LCFI60:
 2113              		.cfi_def_cfa_offset 8
 2114 0094 BD46     		mov	sp, r7
 2115              	.LCFI61:
 2116              		.cfi_def_cfa_register 13
 2117              		@ sp needed
 2118 0096 80BD     		pop	{r7, pc}
 2119              		.cfi_endproc
 2120              	.LFE76:
 2122              		.section	.text.HAL_ADC_GetValue,"ax",%progbits
 2123              		.align	1
 2124              		.global	HAL_ADC_GetValue
 2125              		.syntax unified
 2126              		.thumb
 2127              		.thumb_func
 2129              	HAL_ADC_GetValue:
 2130              	.LFB77:
1742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Get ADC regular group conversion result.
1745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Reading register DR automatically clears ADC flag EOC
1746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         (ADC group regular end of unitary conversion).
1747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   This function does not clear ADC flag EOS 
1748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         (ADC group regular end of sequence conversion).
ARM GAS  /tmp/ccelol6o.s 			page 69


1749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Occurrence of flag EOS rising:
1750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          - If sequencer is composed of 1 rank, flag EOS is equivalent
1751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *            to flag EOC.
1752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *          - If sequencer is composed of several ranks, during the scan
1753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *            sequence flag EOC only is raised, at the end of the scan sequence
1754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *            both flags EOC and EOS are raised.
1755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         To clear this flag, either use function: 
1756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         in programming model IT: @ref HAL_ADC_IRQHandler(), in programming
1757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         model polling: @ref HAL_ADC_PollForConversion() 
1758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
1759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval ADC group regular conversion data
1761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
1763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2131              		.loc 1 1763 1
 2132              		.cfi_startproc
 2133              		@ args = 0, pretend = 0, frame = 8
 2134              		@ frame_needed = 1, uses_anonymous_args = 0
 2135              		@ link register save eliminated.
 2136 0000 80B4     		push	{r7}
 2137              	.LCFI62:
 2138              		.cfi_def_cfa_offset 4
 2139              		.cfi_offset 7, -4
 2140 0002 83B0     		sub	sp, sp, #12
 2141              	.LCFI63:
 2142              		.cfi_def_cfa_offset 16
 2143 0004 00AF     		add	r7, sp, #0
 2144              	.LCFI64:
 2145              		.cfi_def_cfa_register 7
 2146 0006 7860     		str	r0, [r7, #4]
1764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Note: EOC flag is not cleared here by software because automatically     */
1768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*       cleared by hardware when reading register DR.                      */
1769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return ADC converted value */ 
1771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return hadc->Instance->DR;
 2147              		.loc 1 1771 14
 2148 0008 7B68     		ldr	r3, [r7, #4]
 2149 000a 1B68     		ldr	r3, [r3]
 2150              		.loc 1 1771 24
 2151 000c DB6C     		ldr	r3, [r3, #76]
1772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2152              		.loc 1 1772 1
 2153 000e 1846     		mov	r0, r3
 2154 0010 0C37     		adds	r7, r7, #12
 2155              	.LCFI65:
 2156              		.cfi_def_cfa_offset 4
 2157 0012 BD46     		mov	sp, r7
 2158              	.LCFI66:
 2159              		.cfi_def_cfa_register 13
 2160              		@ sp needed
 2161 0014 80BC     		pop	{r7}
 2162              	.LCFI67:
 2163              		.cfi_restore 7
ARM GAS  /tmp/ccelol6o.s 			page 70


 2164              		.cfi_def_cfa_offset 0
 2165 0016 7047     		bx	lr
 2166              		.cfi_endproc
 2167              	.LFE77:
 2169              		.section	.text.HAL_ADC_IRQHandler,"ax",%progbits
 2170              		.align	1
 2171              		.global	HAL_ADC_IRQHandler
 2172              		.syntax unified
 2173              		.thumb
 2174              		.thumb_func
 2176              	HAL_ADC_IRQHandler:
 2177              	.LFB78:
1773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Handles ADC interrupt request  
1776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
1780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2178              		.loc 1 1780 1
 2179              		.cfi_startproc
 2180              		@ args = 0, pretend = 0, frame = 16
 2181              		@ frame_needed = 1, uses_anonymous_args = 0
 2182 0000 80B5     		push	{r7, lr}
 2183              	.LCFI68:
 2184              		.cfi_def_cfa_offset 8
 2185              		.cfi_offset 7, -8
 2186              		.cfi_offset 14, -4
 2187 0002 84B0     		sub	sp, sp, #16
 2188              	.LCFI69:
 2189              		.cfi_def_cfa_offset 24
 2190 0004 00AF     		add	r7, sp, #0
 2191              	.LCFI70:
 2192              		.cfi_def_cfa_register 7
 2193 0006 7860     		str	r0, [r7, #4]
1781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tmp_sr = hadc->Instance->SR;
 2194              		.loc 1 1781 25
 2195 0008 7B68     		ldr	r3, [r7, #4]
 2196 000a 1B68     		ldr	r3, [r3]
 2197              		.loc 1 1781 12
 2198 000c 1B68     		ldr	r3, [r3]
 2199 000e FB60     		str	r3, [r7, #12]
1782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tmp_cr1 = hadc->Instance->CR1;
 2200              		.loc 1 1782 26
 2201 0010 7B68     		ldr	r3, [r7, #4]
 2202 0012 1B68     		ldr	r3, [r3]
 2203              		.loc 1 1782 12
 2204 0014 5B68     		ldr	r3, [r3, #4]
 2205 0016 BB60     		str	r3, [r7, #8]
1783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
1785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
1787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
1788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
ARM GAS  /tmp/ccelol6o.s 			page 71


1790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* ========== Check End of Conversion flag for regular group ========== */
1791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 2206              		.loc 1 1791 15
 2207 0018 BB68     		ldr	r3, [r7, #8]
 2208 001a 03F02003 		and	r3, r3, #32
 2209              		.loc 1 1791 5
 2210 001e 002B     		cmp	r3, #0
 2211 0020 3ED0     		beq	.L128
1792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 2212              		.loc 1 1793 16
 2213 0022 FB68     		ldr	r3, [r7, #12]
 2214 0024 03F00203 		and	r3, r3, #2
 2215              		.loc 1 1793 7
 2216 0028 002B     		cmp	r3, #0
 2217 002a 39D0     		beq	.L128
1794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Update state machine on conversion status if not in error state */
1796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 2218              		.loc 1 1796 11
 2219 002c 7B68     		ldr	r3, [r7, #4]
 2220 002e 9B6A     		ldr	r3, [r3, #40]
 2221 0030 03F01003 		and	r3, r3, #16
 2222              		.loc 1 1796 10
 2223 0034 002B     		cmp	r3, #0
 2224 0036 05D1     		bne	.L129
1797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC state */
1799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 2225              		.loc 1 1799 9
 2226 0038 7B68     		ldr	r3, [r7, #4]
 2227 003a 9B6A     		ldr	r3, [r3, #40]
 2228 003c 43F40072 		orr	r2, r3, #512
 2229 0040 7B68     		ldr	r3, [r7, #4]
 2230 0042 9A62     		str	r2, [r3, #40]
 2231              	.L129:
1800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Determine whether any further conversion upcoming on group regular   */
1803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* by external trigger, continuous mode or scan sequence on going.      */
1804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Note: On STM32F1 devices, in case of sequencer enabled               */
1805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /*       (several ranks selected), end of conversion flag is raised     */
1806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /*       at the end of the sequence.                                    */
1807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 2232              		.loc 1 1807 10
 2233 0044 7B68     		ldr	r3, [r7, #4]
 2234 0046 1B68     		ldr	r3, [r3]
 2235 0048 9B68     		ldr	r3, [r3, #8]
 2236 004a 03F46023 		and	r3, r3, #917504
 2237              		.loc 1 1807 9
 2238 004e B3F5602F 		cmp	r3, #917504
 2239 0052 1DD1     		bne	.L130
1808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (hadc->Init.ContinuousConvMode == DISABLE)   )
 2240              		.loc 1 1808 21 discriminator 1
 2241 0054 7B68     		ldr	r3, [r7, #4]
 2242 0056 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
1807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (hadc->Init.ContinuousConvMode == DISABLE)   )
ARM GAS  /tmp/ccelol6o.s 			page 72


 2243              		.loc 1 1807 53 discriminator 1
 2244 0058 002B     		cmp	r3, #0
 2245 005a 19D1     		bne	.L130
1809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Disable ADC end of conversion interrupt on group regular */
1811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 2246              		.loc 1 1811 9
 2247 005c 7B68     		ldr	r3, [r7, #4]
 2248 005e 1B68     		ldr	r3, [r3]
 2249 0060 5A68     		ldr	r2, [r3, #4]
 2250 0062 7B68     		ldr	r3, [r7, #4]
 2251 0064 1B68     		ldr	r3, [r3]
 2252 0066 22F02002 		bic	r2, r2, #32
 2253 006a 5A60     		str	r2, [r3, #4]
1812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
1813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC state */
1814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 2254              		.loc 1 1814 9
 2255 006c 7B68     		ldr	r3, [r7, #4]
 2256 006e 9B6A     		ldr	r3, [r3, #40]
 2257 0070 23F48072 		bic	r2, r3, #256
 2258 0074 7B68     		ldr	r3, [r7, #4]
 2259 0076 9A62     		str	r2, [r3, #40]
1815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
1816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 2260              		.loc 1 1816 13
 2261 0078 7B68     		ldr	r3, [r7, #4]
 2262 007a 9B6A     		ldr	r3, [r3, #40]
 2263 007c 03F48053 		and	r3, r3, #4096
 2264              		.loc 1 1816 12
 2265 0080 002B     		cmp	r3, #0
 2266 0082 05D1     		bne	.L130
1817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
1818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 2267              		.loc 1 1818 11
 2268 0084 7B68     		ldr	r3, [r7, #4]
 2269 0086 9B6A     		ldr	r3, [r3, #40]
 2270 0088 43F00102 		orr	r2, r3, #1
 2271 008c 7B68     		ldr	r3, [r7, #4]
 2272 008e 9A62     		str	r2, [r3, #40]
 2273              	.L130:
1819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
1820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Conversion complete callback */
1823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       hadc->ConvCpltCallback(hadc);
1825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #else
1826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_ADC_ConvCpltCallback(hadc);
 2274              		.loc 1 1826 7
 2275 0090 7868     		ldr	r0, [r7, #4]
 2276 0092 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
1827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Clear regular group conversion flag */
1830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 2277              		.loc 1 1830 7
ARM GAS  /tmp/ccelol6o.s 			page 73


 2278 0096 7B68     		ldr	r3, [r7, #4]
 2279 0098 1B68     		ldr	r3, [r3]
 2280 009a 6FF01202 		mvn	r2, #18
 2281 009e 1A60     		str	r2, [r3]
 2282              	.L128:
1831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* ========== Check End of Conversion flag for injected group ========== */
1835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 2283              		.loc 1 1835 15
 2284 00a0 BB68     		ldr	r3, [r7, #8]
 2285 00a2 03F08003 		and	r3, r3, #128
 2286              		.loc 1 1835 5
 2287 00a6 002B     		cmp	r3, #0
 2288 00a8 4DD0     		beq	.L131
1836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 2289              		.loc 1 1837 16
 2290 00aa FB68     		ldr	r3, [r7, #12]
 2291 00ac 03F00403 		and	r3, r3, #4
 2292              		.loc 1 1837 7
 2293 00b0 002B     		cmp	r3, #0
 2294 00b2 48D0     		beq	.L131
1838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Update state machine on conversion status if not in error state */
1840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 2295              		.loc 1 1840 11
 2296 00b4 7B68     		ldr	r3, [r7, #4]
 2297 00b6 9B6A     		ldr	r3, [r3, #40]
 2298 00b8 03F01003 		and	r3, r3, #16
 2299              		.loc 1 1840 10
 2300 00bc 002B     		cmp	r3, #0
 2301 00be 05D1     		bne	.L132
1841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC state */
1843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 2302              		.loc 1 1843 9
 2303 00c0 7B68     		ldr	r3, [r7, #4]
 2304 00c2 9B6A     		ldr	r3, [r3, #40]
 2305 00c4 43F40052 		orr	r2, r3, #8192
 2306 00c8 7B68     		ldr	r3, [r7, #4]
 2307 00ca 9A62     		str	r2, [r3, #40]
 2308              	.L132:
1844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Determine whether any further conversion upcoming on group injected  */
1847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* by external trigger, scan sequence on going or by automatic injected */
1848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* conversion from group regular (same conditions as group regular      */
1849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* interruption disabling above).                                       */
1850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Note: On STM32F1 devices, in case of sequencer enabled               */
1851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /*       (several ranks selected), end of conversion flag is raised     */
1852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /*       at the end of the sequence.                                    */
1853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 2309              		.loc 1 1853 10
 2310 00cc 7B68     		ldr	r3, [r7, #4]
 2311 00ce 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccelol6o.s 			page 74


 2312 00d0 9B68     		ldr	r3, [r3, #8]
 2313 00d2 03F4E043 		and	r3, r3, #28672
 2314              		.loc 1 1853 9
 2315 00d6 B3F5E04F 		cmp	r3, #28672
 2316 00da 12D0     		beq	.L133
1854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 2317              		.loc 1 1854 11 discriminator 1
 2318 00dc 7B68     		ldr	r3, [r7, #4]
 2319 00de 1B68     		ldr	r3, [r3]
 2320 00e0 5B68     		ldr	r3, [r3, #4]
 2321 00e2 03F48063 		and	r3, r3, #1024
1853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 2322              		.loc 1 1853 67 discriminator 1
 2323 00e6 002B     		cmp	r3, #0
 2324 00e8 25D1     		bne	.L134
1855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 2325              		.loc 1 1855 11
 2326 00ea 7B68     		ldr	r3, [r7, #4]
 2327 00ec 1B68     		ldr	r3, [r3]
 2328 00ee 9B68     		ldr	r3, [r3, #8]
 2329 00f0 03F46023 		and	r3, r3, #917504
1854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 2330              		.loc 1 1854 62
 2331 00f4 B3F5602F 		cmp	r3, #917504
 2332 00f8 1DD1     		bne	.L134
1856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 2333              		.loc 1 1856 22
 2334 00fa 7B68     		ldr	r3, [r7, #4]
 2335 00fc 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
1855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****          (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 2336              		.loc 1 1855 54
 2337 00fe 002B     		cmp	r3, #0
 2338 0100 19D1     		bne	.L134
 2339              	.L133:
1857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
1858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Disable ADC end of conversion interrupt on group injected */
1859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 2340              		.loc 1 1859 9
 2341 0102 7B68     		ldr	r3, [r7, #4]
 2342 0104 1B68     		ldr	r3, [r3]
 2343 0106 5A68     		ldr	r2, [r3, #4]
 2344 0108 7B68     		ldr	r3, [r7, #4]
 2345 010a 1B68     		ldr	r3, [r3]
 2346 010c 22F08002 		bic	r2, r2, #128
 2347 0110 5A60     		str	r2, [r3, #4]
1860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
1861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* Set ADC state */
1862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 2348              		.loc 1 1862 9
 2349 0112 7B68     		ldr	r3, [r7, #4]
 2350 0114 9B6A     		ldr	r3, [r3, #40]
 2351 0116 23F48052 		bic	r2, r3, #4096
 2352 011a 7B68     		ldr	r3, [r7, #4]
 2353 011c 9A62     		str	r2, [r3, #40]
1863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 2354              		.loc 1 1864 13
ARM GAS  /tmp/ccelol6o.s 			page 75


 2355 011e 7B68     		ldr	r3, [r7, #4]
 2356 0120 9B6A     		ldr	r3, [r3, #40]
 2357 0122 03F48073 		and	r3, r3, #256
 2358              		.loc 1 1864 12
 2359 0126 002B     		cmp	r3, #0
 2360 0128 05D1     		bne	.L134
1865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         { 
1866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 2361              		.loc 1 1866 11
 2362 012a 7B68     		ldr	r3, [r7, #4]
 2363 012c 9B6A     		ldr	r3, [r3, #40]
 2364 012e 43F00102 		orr	r2, r3, #1
 2365 0132 7B68     		ldr	r3, [r7, #4]
 2366 0134 9A62     		str	r2, [r3, #40]
 2367              	.L134:
1867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
1868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
1869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Conversion complete callback */ 
1871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       hadc->InjectedConvCpltCallback(hadc);
1873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #else
1874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_ADCEx_InjectedConvCpltCallback(hadc);
 2368              		.loc 1 1874 7
 2369 0136 7868     		ldr	r0, [r7, #4]
 2370 0138 FFF7FEFF 		bl	HAL_ADCEx_InjectedConvCpltCallback
1875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Clear injected group conversion flag */
1878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 2371              		.loc 1 1878 7
 2372 013c 7B68     		ldr	r3, [r7, #4]
 2373 013e 1B68     		ldr	r3, [r3]
 2374 0140 6FF00C02 		mvn	r2, #12
 2375 0144 1A60     		str	r2, [r3]
 2376              	.L131:
1879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    
1882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* ========== Check Analog watchdog flags ========== */
1883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 2377              		.loc 1 1883 15
 2378 0146 BB68     		ldr	r3, [r7, #8]
 2379 0148 03F04003 		and	r3, r3, #64
 2380              		.loc 1 1883 5
 2381 014c 002B     		cmp	r3, #0
 2382 014e 12D0     		beq	.L136
1884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
1885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 2383              		.loc 1 1885 16
 2384 0150 FB68     		ldr	r3, [r7, #12]
 2385 0152 03F00103 		and	r3, r3, #1
 2386              		.loc 1 1885 7
 2387 0156 002B     		cmp	r3, #0
 2388 0158 0DD0     		beq	.L136
1886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
1887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state */
ARM GAS  /tmp/ccelol6o.s 			page 76


1888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 2389              		.loc 1 1888 7
 2390 015a 7B68     		ldr	r3, [r7, #4]
 2391 015c 9B6A     		ldr	r3, [r3, #40]
 2392 015e 43F48032 		orr	r2, r3, #65536
 2393 0162 7B68     		ldr	r3, [r7, #4]
 2394 0164 9A62     		str	r2, [r3, #40]
1889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Level out of window callback */ 
1891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       hadc->LevelOutOfWindowCallback(hadc);
1893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #else
1894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       HAL_ADC_LevelOutOfWindowCallback(hadc);
 2395              		.loc 1 1894 7
 2396 0166 7868     		ldr	r0, [r7, #4]
 2397 0168 FFF7FEFF 		bl	HAL_ADC_LevelOutOfWindowCallback
1895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Clear the ADC analog watchdog flag */
1898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 2398              		.loc 1 1898 7
 2399 016c 7B68     		ldr	r3, [r7, #4]
 2400 016e 1B68     		ldr	r3, [r3]
 2401 0170 6FF00102 		mvn	r2, #1
 2402 0174 1A60     		str	r2, [r3]
 2403              	.L136:
1899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
1900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
1901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
1902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2404              		.loc 1 1902 1
 2405 0176 00BF     		nop
 2406 0178 1037     		adds	r7, r7, #16
 2407              	.LCFI71:
 2408              		.cfi_def_cfa_offset 8
 2409 017a BD46     		mov	sp, r7
 2410              	.LCFI72:
 2411              		.cfi_def_cfa_register 13
 2412              		@ sp needed
 2413 017c 80BD     		pop	{r7, pc}
 2414              		.cfi_endproc
 2415              	.LFE78:
 2417              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 2418              		.align	1
 2419              		.weak	HAL_ADC_ConvCpltCallback
 2420              		.syntax unified
 2421              		.thumb
 2422              		.thumb_func
 2424              	HAL_ADC_ConvCpltCallback:
 2425              	.LFB79:
1903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Conversion complete callback in non blocking mode 
1906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
ARM GAS  /tmp/ccelol6o.s 			page 77


1910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2426              		.loc 1 1910 1
 2427              		.cfi_startproc
 2428              		@ args = 0, pretend = 0, frame = 8
 2429              		@ frame_needed = 1, uses_anonymous_args = 0
 2430              		@ link register save eliminated.
 2431 0000 80B4     		push	{r7}
 2432              	.LCFI73:
 2433              		.cfi_def_cfa_offset 4
 2434              		.cfi_offset 7, -4
 2435 0002 83B0     		sub	sp, sp, #12
 2436              	.LCFI74:
 2437              		.cfi_def_cfa_offset 16
 2438 0004 00AF     		add	r7, sp, #0
 2439              	.LCFI75:
 2440              		.cfi_def_cfa_register 7
 2441 0006 7860     		str	r0, [r7, #4]
1911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
1913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_ConvCpltCallback must be implemented in the user file.
1915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    */
1916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2442              		.loc 1 1916 1
 2443 0008 00BF     		nop
 2444 000a 0C37     		adds	r7, r7, #12
 2445              	.LCFI76:
 2446              		.cfi_def_cfa_offset 4
 2447 000c BD46     		mov	sp, r7
 2448              	.LCFI77:
 2449              		.cfi_def_cfa_register 13
 2450              		@ sp needed
 2451 000e 80BC     		pop	{r7}
 2452              	.LCFI78:
 2453              		.cfi_restore 7
 2454              		.cfi_def_cfa_offset 0
 2455 0010 7047     		bx	lr
 2456              		.cfi_endproc
 2457              	.LFE79:
 2459              		.section	.text.HAL_ADC_ConvHalfCpltCallback,"ax",%progbits
 2460              		.align	1
 2461              		.weak	HAL_ADC_ConvHalfCpltCallback
 2462              		.syntax unified
 2463              		.thumb
 2464              		.thumb_func
 2466              	HAL_ADC_ConvHalfCpltCallback:
 2467              	.LFB80:
1917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Conversion DMA half-transfer callback in non blocking mode 
1920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
1924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2468              		.loc 1 1924 1
 2469              		.cfi_startproc
ARM GAS  /tmp/ccelol6o.s 			page 78


 2470              		@ args = 0, pretend = 0, frame = 8
 2471              		@ frame_needed = 1, uses_anonymous_args = 0
 2472              		@ link register save eliminated.
 2473 0000 80B4     		push	{r7}
 2474              	.LCFI79:
 2475              		.cfi_def_cfa_offset 4
 2476              		.cfi_offset 7, -4
 2477 0002 83B0     		sub	sp, sp, #12
 2478              	.LCFI80:
 2479              		.cfi_def_cfa_offset 16
 2480 0004 00AF     		add	r7, sp, #0
 2481              	.LCFI81:
 2482              		.cfi_def_cfa_register 7
 2483 0006 7860     		str	r0, [r7, #4]
1925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
1927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
1929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2484              		.loc 1 1930 1
 2485 0008 00BF     		nop
 2486 000a 0C37     		adds	r7, r7, #12
 2487              	.LCFI82:
 2488              		.cfi_def_cfa_offset 4
 2489 000c BD46     		mov	sp, r7
 2490              	.LCFI83:
 2491              		.cfi_def_cfa_register 13
 2492              		@ sp needed
 2493 000e 80BC     		pop	{r7}
 2494              	.LCFI84:
 2495              		.cfi_restore 7
 2496              		.cfi_def_cfa_offset 0
 2497 0010 7047     		bx	lr
 2498              		.cfi_endproc
 2499              	.LFE80:
 2501              		.section	.text.HAL_ADC_LevelOutOfWindowCallback,"ax",%progbits
 2502              		.align	1
 2503              		.weak	HAL_ADC_LevelOutOfWindowCallback
 2504              		.syntax unified
 2505              		.thumb
 2506              		.thumb_func
 2508              	HAL_ADC_LevelOutOfWindowCallback:
 2509              	.LFB81:
1931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Analog watchdog callback in non blocking mode. 
1934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
1938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2510              		.loc 1 1938 1
 2511              		.cfi_startproc
 2512              		@ args = 0, pretend = 0, frame = 8
 2513              		@ frame_needed = 1, uses_anonymous_args = 0
 2514              		@ link register save eliminated.
ARM GAS  /tmp/ccelol6o.s 			page 79


 2515 0000 80B4     		push	{r7}
 2516              	.LCFI85:
 2517              		.cfi_def_cfa_offset 4
 2518              		.cfi_offset 7, -4
 2519 0002 83B0     		sub	sp, sp, #12
 2520              	.LCFI86:
 2521              		.cfi_def_cfa_offset 16
 2522 0004 00AF     		add	r7, sp, #0
 2523              	.LCFI87:
 2524              		.cfi_def_cfa_register 7
 2525 0006 7860     		str	r0, [r7, #4]
1939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
1941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
1943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2526              		.loc 1 1944 1
 2527 0008 00BF     		nop
 2528 000a 0C37     		adds	r7, r7, #12
 2529              	.LCFI88:
 2530              		.cfi_def_cfa_offset 4
 2531 000c BD46     		mov	sp, r7
 2532              	.LCFI89:
 2533              		.cfi_def_cfa_register 13
 2534              		@ sp needed
 2535 000e 80BC     		pop	{r7}
 2536              	.LCFI90:
 2537              		.cfi_restore 7
 2538              		.cfi_def_cfa_offset 0
 2539 0010 7047     		bx	lr
 2540              		.cfi_endproc
 2541              	.LFE81:
 2543              		.section	.text.HAL_ADC_ErrorCallback,"ax",%progbits
 2544              		.align	1
 2545              		.weak	HAL_ADC_ErrorCallback
 2546              		.syntax unified
 2547              		.thumb
 2548              		.thumb_func
 2550              	HAL_ADC_ErrorCallback:
 2551              	.LFB82:
1945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  ADC error callback in non blocking mode
1948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *        (ADC conversion with interruption or transfer by DMA)
1949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
1951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** __weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
1953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2552              		.loc 1 1953 1
 2553              		.cfi_startproc
 2554              		@ args = 0, pretend = 0, frame = 8
 2555              		@ frame_needed = 1, uses_anonymous_args = 0
 2556              		@ link register save eliminated.
 2557 0000 80B4     		push	{r7}
 2558              	.LCFI91:
ARM GAS  /tmp/ccelol6o.s 			page 80


 2559              		.cfi_def_cfa_offset 4
 2560              		.cfi_offset 7, -4
 2561 0002 83B0     		sub	sp, sp, #12
 2562              	.LCFI92:
 2563              		.cfi_def_cfa_offset 16
 2564 0004 00AF     		add	r7, sp, #0
 2565              	.LCFI93:
 2566              		.cfi_def_cfa_register 7
 2567 0006 7860     		str	r0, [r7, #4]
1954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   UNUSED(hadc);
1956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             function HAL_ADC_ErrorCallback must be implemented in the user file.
1958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2568              		.loc 1 1959 1
 2569 0008 00BF     		nop
 2570 000a 0C37     		adds	r7, r7, #12
 2571              	.LCFI94:
 2572              		.cfi_def_cfa_offset 4
 2573 000c BD46     		mov	sp, r7
 2574              	.LCFI95:
 2575              		.cfi_def_cfa_register 13
 2576              		@ sp needed
 2577 000e 80BC     		pop	{r7}
 2578              	.LCFI96:
 2579              		.cfi_restore 7
 2580              		.cfi_def_cfa_offset 0
 2581 0010 7047     		bx	lr
 2582              		.cfi_endproc
 2583              	.LFE82:
 2585              		.section	.text.HAL_ADC_ConfigChannel,"ax",%progbits
 2586              		.align	1
 2587              		.global	HAL_ADC_ConfigChannel
 2588              		.syntax unified
 2589              		.thumb
 2590              		.thumb_func
 2592              	HAL_ADC_ConfigChannel:
 2593              	.LFB83:
1960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
1964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group3 Peripheral Control functions
1967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *  @brief    Peripheral Control functions
1968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *
1969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @verbatim   
1970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
1971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ##### Peripheral Control functions #####
1972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================  
1973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]  This section provides functions allowing to:
1974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Configure channels on regular group
1975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Configure the analog watchdog
1976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
1977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @endverbatim
ARM GAS  /tmp/ccelol6o.s 			page 81


1978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
1979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
1980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
1981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
1982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Configures the the selected channel to be linked to the regular
1983:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         group.
1984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   In case of usage of internal measurement channels:
1985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Vbat/VrefInt/TempSensor.
1986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         These internal paths can be be disabled using function 
1987:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         HAL_ADC_DeInit().
1988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
1989:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         This function initializes channel into regular group, following  
1990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         calls to this function can be used to reconfigure some parameters 
1991:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         of structure "ADC_ChannelConfTypeDef" on the fly, without resetting 
1992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         the ADC.
1993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
1994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         For parameters constraints, see comments of structure 
1995:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         "ADC_ChannelConfTypeDef".
1996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
1997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  sConfig: Structure of ADC channel for regular group.
1998:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
1999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
2001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** { 
 2594              		.loc 1 2001 1
 2595              		.cfi_startproc
 2596              		@ args = 0, pretend = 0, frame = 16
 2597              		@ frame_needed = 1, uses_anonymous_args = 0
 2598              		@ link register save eliminated.
 2599 0000 80B4     		push	{r7}
 2600              	.LCFI97:
 2601              		.cfi_def_cfa_offset 4
 2602              		.cfi_offset 7, -4
 2603 0002 85B0     		sub	sp, sp, #20
 2604              	.LCFI98:
 2605              		.cfi_def_cfa_offset 24
 2606 0004 00AF     		add	r7, sp, #0
 2607              	.LCFI99:
 2608              		.cfi_def_cfa_register 7
 2609 0006 7860     		str	r0, [r7, #4]
 2610 0008 3960     		str	r1, [r7]
2002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2611              		.loc 1 2002 21
 2612 000a 0023     		movs	r3, #0
 2613 000c FB73     		strb	r3, [r7, #15]
2003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0U;
 2614              		.loc 1 2003 17
 2615 000e 0023     		movs	r3, #0
 2616 0010 BB60     		str	r3, [r7, #8]
2004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
2006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2007:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_CHANNEL(sConfig->Channel));
2008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
2009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
2010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
ARM GAS  /tmp/ccelol6o.s 			page 82


2012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 2617              		.loc 1 2012 3
 2618 0012 7B68     		ldr	r3, [r7, #4]
 2619 0014 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 2620 0018 012B     		cmp	r3, #1
 2621 001a 01D1     		bne	.L142
 2622              		.loc 1 2012 3 is_stmt 0 discriminator 1
 2623 001c 0223     		movs	r3, #2
 2624 001e DCE0     		b	.L143
 2625              	.L142:
 2626              		.loc 1 2012 3 discriminator 2
 2627 0020 7B68     		ldr	r3, [r7, #4]
 2628 0022 0122     		movs	r2, #1
 2629 0024 83F82420 		strb	r2, [r3, #36]
2013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Regular sequence configuration */
2016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* For Rank 1 to 6 */
2017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (sConfig->Rank < 7U)
 2630              		.loc 1 2017 14 is_stmt 1 discriminator 2
 2631 0028 3B68     		ldr	r3, [r7]
 2632 002a 5B68     		ldr	r3, [r3, #4]
 2633              		.loc 1 2017 6 discriminator 2
 2634 002c 062B     		cmp	r3, #6
 2635 002e 1CD8     		bhi	.L144
2018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR3                        ,
 2636              		.loc 1 2019 5
 2637 0030 7B68     		ldr	r3, [r7, #4]
 2638 0032 1B68     		ldr	r3, [r3]
 2639 0034 596B     		ldr	r1, [r3, #52]
 2640 0036 3B68     		ldr	r3, [r7]
 2641 0038 5A68     		ldr	r2, [r3, #4]
 2642 003a 1346     		mov	r3, r2
 2643 003c 9B00     		lsls	r3, r3, #2
 2644 003e 1344     		add	r3, r3, r2
 2645 0040 053B     		subs	r3, r3, #5
 2646 0042 1F22     		movs	r2, #31
 2647 0044 02FA03F3 		lsl	r3, r2, r3
 2648 0048 DB43     		mvns	r3, r3
 2649 004a 1940     		ands	r1, r1, r3
 2650 004c 3B68     		ldr	r3, [r7]
 2651 004e 1868     		ldr	r0, [r3]
 2652 0050 3B68     		ldr	r3, [r7]
 2653 0052 5A68     		ldr	r2, [r3, #4]
 2654 0054 1346     		mov	r3, r2
 2655 0056 9B00     		lsls	r3, r3, #2
 2656 0058 1344     		add	r3, r3, r2
 2657 005a 053B     		subs	r3, r3, #5
 2658 005c 00FA03F2 		lsl	r2, r0, r3
 2659 0060 7B68     		ldr	r3, [r7, #4]
 2660 0062 1B68     		ldr	r3, [r3]
 2661 0064 0A43     		orrs	r2, r2, r1
 2662 0066 5A63     		str	r2, [r3, #52]
 2663 0068 3CE0     		b	.L145
 2664              	.L144:
2020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
ARM GAS  /tmp/ccelol6o.s 			page 83


2021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
2022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* For Rank 7 to 12 */
2024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else if (sConfig->Rank < 13U)
 2665              		.loc 1 2024 19
 2666 006a 3B68     		ldr	r3, [r7]
 2667 006c 5B68     		ldr	r3, [r3, #4]
 2668              		.loc 1 2024 11
 2669 006e 0C2B     		cmp	r3, #12
 2670 0070 1CD8     		bhi	.L146
2025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR2                        ,
 2671              		.loc 1 2026 5
 2672 0072 7B68     		ldr	r3, [r7, #4]
 2673 0074 1B68     		ldr	r3, [r3]
 2674 0076 196B     		ldr	r1, [r3, #48]
 2675 0078 3B68     		ldr	r3, [r7]
 2676 007a 5A68     		ldr	r2, [r3, #4]
 2677 007c 1346     		mov	r3, r2
 2678 007e 9B00     		lsls	r3, r3, #2
 2679 0080 1344     		add	r3, r3, r2
 2680 0082 233B     		subs	r3, r3, #35
 2681 0084 1F22     		movs	r2, #31
 2682 0086 02FA03F3 		lsl	r3, r2, r3
 2683 008a DB43     		mvns	r3, r3
 2684 008c 1940     		ands	r1, r1, r3
 2685 008e 3B68     		ldr	r3, [r7]
 2686 0090 1868     		ldr	r0, [r3]
 2687 0092 3B68     		ldr	r3, [r7]
 2688 0094 5A68     		ldr	r2, [r3, #4]
 2689 0096 1346     		mov	r3, r2
 2690 0098 9B00     		lsls	r3, r3, #2
 2691 009a 1344     		add	r3, r3, r2
 2692 009c 233B     		subs	r3, r3, #35
 2693 009e 00FA03F2 		lsl	r2, r0, r3
 2694 00a2 7B68     		ldr	r3, [r7, #4]
 2695 00a4 1B68     		ldr	r3, [r3]
 2696 00a6 0A43     		orrs	r2, r2, r1
 2697 00a8 1A63     		str	r2, [r3, #48]
 2698 00aa 1BE0     		b	.L145
 2699              	.L146:
2027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank)    ,
2028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
2029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* For Rank 13 to 16 */
2031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
2032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SQR1                        ,
 2700              		.loc 1 2033 5
 2701 00ac 7B68     		ldr	r3, [r7, #4]
 2702 00ae 1B68     		ldr	r3, [r3]
 2703 00b0 D96A     		ldr	r1, [r3, #44]
 2704 00b2 3B68     		ldr	r3, [r7]
 2705 00b4 5A68     		ldr	r2, [r3, #4]
 2706 00b6 1346     		mov	r3, r2
 2707 00b8 9B00     		lsls	r3, r3, #2
 2708 00ba 1344     		add	r3, r3, r2
ARM GAS  /tmp/ccelol6o.s 			page 84


 2709 00bc 413B     		subs	r3, r3, #65
 2710 00be 1F22     		movs	r2, #31
 2711 00c0 02FA03F3 		lsl	r3, r2, r3
 2712 00c4 DB43     		mvns	r3, r3
 2713 00c6 1940     		ands	r1, r1, r3
 2714 00c8 3B68     		ldr	r3, [r7]
 2715 00ca 1868     		ldr	r0, [r3]
 2716 00cc 3B68     		ldr	r3, [r7]
 2717 00ce 5A68     		ldr	r2, [r3, #4]
 2718 00d0 1346     		mov	r3, r2
 2719 00d2 9B00     		lsls	r3, r3, #2
 2720 00d4 1344     		add	r3, r3, r2
 2721 00d6 413B     		subs	r3, r3, #65
 2722 00d8 00FA03F2 		lsl	r2, r0, r3
 2723 00dc 7B68     		ldr	r3, [r7, #4]
 2724 00de 1B68     		ldr	r3, [r3]
 2725 00e0 0A43     		orrs	r2, r2, r1
 2726 00e2 DA62     		str	r2, [r3, #44]
 2727              	.L145:
2034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank)   ,
2035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
2036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Channel sampling time configuration */
2040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* For channels 10 to 17 */
2041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (sConfig->Channel >= ADC_CHANNEL_10)
 2728              		.loc 1 2041 14
 2729 00e4 3B68     		ldr	r3, [r7]
 2730 00e6 1B68     		ldr	r3, [r3]
 2731              		.loc 1 2041 6
 2732 00e8 092B     		cmp	r3, #9
 2733 00ea 1CD9     		bls	.L147
2042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SMPR1                             ,
 2734              		.loc 1 2043 5
 2735 00ec 7B68     		ldr	r3, [r7, #4]
 2736 00ee 1B68     		ldr	r3, [r3]
 2737 00f0 D968     		ldr	r1, [r3, #12]
 2738 00f2 3B68     		ldr	r3, [r7]
 2739 00f4 1A68     		ldr	r2, [r3]
 2740 00f6 1346     		mov	r3, r2
 2741 00f8 5B00     		lsls	r3, r3, #1
 2742 00fa 1344     		add	r3, r3, r2
 2743 00fc 1E3B     		subs	r3, r3, #30
 2744 00fe 0722     		movs	r2, #7
 2745 0100 02FA03F3 		lsl	r3, r2, r3
 2746 0104 DB43     		mvns	r3, r3
 2747 0106 1940     		ands	r1, r1, r3
 2748 0108 3B68     		ldr	r3, [r7]
 2749 010a 9868     		ldr	r0, [r3, #8]
 2750 010c 3B68     		ldr	r3, [r7]
 2751 010e 1A68     		ldr	r2, [r3]
 2752 0110 1346     		mov	r3, r2
 2753 0112 5B00     		lsls	r3, r3, #1
 2754 0114 1344     		add	r3, r3, r2
 2755 0116 1E3B     		subs	r3, r3, #30
ARM GAS  /tmp/ccelol6o.s 			page 85


 2756 0118 00FA03F2 		lsl	r2, r0, r3
 2757 011c 7B68     		ldr	r3, [r7, #4]
 2758 011e 1B68     		ldr	r3, [r3]
 2759 0120 0A43     		orrs	r2, r2, r1
 2760 0122 DA60     		str	r2, [r3, #12]
 2761 0124 19E0     		b	.L148
 2762              	.L147:
2044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
2045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
2046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else /* For channels 0 to 9 */
2048:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->SMPR2                             ,
 2763              		.loc 1 2049 5
 2764 0126 7B68     		ldr	r3, [r7, #4]
 2765 0128 1B68     		ldr	r3, [r3]
 2766 012a 1969     		ldr	r1, [r3, #16]
 2767 012c 3B68     		ldr	r3, [r7]
 2768 012e 1A68     		ldr	r2, [r3]
 2769 0130 1346     		mov	r3, r2
 2770 0132 5B00     		lsls	r3, r3, #1
 2771 0134 1344     		add	r3, r3, r2
 2772 0136 0722     		movs	r2, #7
 2773 0138 02FA03F3 		lsl	r3, r2, r3
 2774 013c DB43     		mvns	r3, r3
 2775 013e 1940     		ands	r1, r1, r3
 2776 0140 3B68     		ldr	r3, [r7]
 2777 0142 9868     		ldr	r0, [r3, #8]
 2778 0144 3B68     		ldr	r3, [r7]
 2779 0146 1A68     		ldr	r2, [r3]
 2780 0148 1346     		mov	r3, r2
 2781 014a 5B00     		lsls	r3, r3, #1
 2782 014c 1344     		add	r3, r3, r2
 2783 014e 00FA03F2 		lsl	r2, r0, r3
 2784 0152 7B68     		ldr	r3, [r7, #4]
 2785 0154 1B68     		ldr	r3, [r3]
 2786 0156 0A43     		orrs	r2, r2, r1
 2787 0158 1A61     		str	r2, [r3, #16]
 2788              	.L148:
2050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel)       ,
2051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****                ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
2052:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
2055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* and VREFINT measurement path.                                            */
2056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 2789              		.loc 1 2056 15
 2790 015a 3B68     		ldr	r3, [r7]
 2791 015c 1B68     		ldr	r3, [r3]
 2792              		.loc 1 2056 6
 2793 015e 102B     		cmp	r3, #16
 2794 0160 03D0     		beq	.L149
2057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 2795              		.loc 1 2057 15 discriminator 1
 2796 0162 3B68     		ldr	r3, [r7]
 2797 0164 1B68     		ldr	r3, [r3]
2056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
ARM GAS  /tmp/ccelol6o.s 			page 86


 2798              		.loc 1 2056 52 discriminator 1
 2799 0166 112B     		cmp	r3, #17
 2800 0168 32D1     		bne	.L150
 2801              	.L149:
2058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
2060:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* measurement channels (VrefInt/TempSensor). If these channels are       */
2061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* intended to be set on other ADC instances, an error is reported.       */
2062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if (hadc->Instance == ADC1)
 2802              		.loc 1 2062 13
 2803 016a 7B68     		ldr	r3, [r7, #4]
 2804 016c 1B68     		ldr	r3, [r3]
 2805              		.loc 1 2062 8
 2806 016e 1D4A     		ldr	r2, .L154
 2807 0170 9342     		cmp	r3, r2
 2808 0172 25D1     		bne	.L151
2063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
2064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 2809              		.loc 1 2064 11
 2810 0174 7B68     		ldr	r3, [r7, #4]
 2811 0176 1B68     		ldr	r3, [r3]
 2812 0178 9B68     		ldr	r3, [r3, #8]
 2813 017a 03F40003 		and	r3, r3, #8388608
 2814              		.loc 1 2064 10
 2815 017e 002B     		cmp	r3, #0
 2816 0180 26D1     		bne	.L150
2065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
2066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 2817              		.loc 1 2066 9
 2818 0182 7B68     		ldr	r3, [r7, #4]
 2819 0184 1B68     		ldr	r3, [r3]
 2820 0186 9A68     		ldr	r2, [r3, #8]
 2821 0188 7B68     		ldr	r3, [r7, #4]
 2822 018a 1B68     		ldr	r3, [r3]
 2823 018c 42F40002 		orr	r2, r2, #8388608
 2824 0190 9A60     		str	r2, [r3, #8]
2067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         
2068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 2825              		.loc 1 2068 20
 2826 0192 3B68     		ldr	r3, [r7]
 2827 0194 1B68     		ldr	r3, [r3]
 2828              		.loc 1 2068 12
 2829 0196 102B     		cmp	r3, #16
 2830 0198 1AD1     		bne	.L150
2069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
2070:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Delay for temperature sensor stabilization time */
2071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Compute number of CPU cycles to wait for */
2072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 2831              		.loc 1 2072 73
 2832 019a 134B     		ldr	r3, .L154+4
 2833 019c 1B68     		ldr	r3, [r3]
 2834 019e 134A     		ldr	r2, .L154+8
 2835 01a0 A2FB0323 		umull	r2, r3, r2, r3
 2836 01a4 9A0C     		lsrs	r2, r3, #18
 2837              		.loc 1 2072 54
 2838 01a6 1346     		mov	r3, r2
 2839 01a8 9B00     		lsls	r3, r3, #2
ARM GAS  /tmp/ccelol6o.s 			page 87


 2840 01aa 1344     		add	r3, r3, r2
 2841 01ac 5B00     		lsls	r3, r3, #1
 2842              		.loc 1 2072 27
 2843 01ae BB60     		str	r3, [r7, #8]
2073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           while(wait_loop_index != 0U)
 2844              		.loc 1 2073 16
 2845 01b0 02E0     		b	.L152
 2846              	.L153:
2074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           {
2075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             wait_loop_index--;
 2847              		.loc 1 2075 28
 2848 01b2 BB68     		ldr	r3, [r7, #8]
 2849 01b4 013B     		subs	r3, r3, #1
 2850 01b6 BB60     		str	r3, [r7, #8]
 2851              	.L152:
2073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           while(wait_loop_index != 0U)
 2852              		.loc 1 2073 33
 2853 01b8 BB68     		ldr	r3, [r7, #8]
 2854 01ba 002B     		cmp	r3, #0
 2855 01bc F9D1     		bne	.L153
 2856 01be 07E0     		b	.L150
 2857              	.L151:
2076:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           }
2077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
2078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
2079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
2080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     else
2081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
2082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Update ADC state machine to error */
2083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 2858              		.loc 1 2083 7
 2859 01c0 7B68     		ldr	r3, [r7, #4]
 2860 01c2 9B6A     		ldr	r3, [r3, #40]
 2861 01c4 43F02002 		orr	r2, r3, #32
 2862 01c8 7B68     		ldr	r3, [r7, #4]
 2863 01ca 9A62     		str	r2, [r3, #40]
2084:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
2085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       tmp_hal_status = HAL_ERROR;
 2864              		.loc 1 2085 22
 2865 01cc 0123     		movs	r3, #1
 2866 01ce FB73     		strb	r3, [r7, #15]
 2867              	.L150:
2086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
2087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2089:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
2090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 2868              		.loc 1 2090 3
 2869 01d0 7B68     		ldr	r3, [r7, #4]
 2870 01d2 0022     		movs	r2, #0
 2871 01d4 83F82420 		strb	r2, [r3, #36]
2091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
2093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return tmp_hal_status;
 2872              		.loc 1 2093 10
 2873 01d8 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2874              	.L143:
ARM GAS  /tmp/ccelol6o.s 			page 88


2094:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 2875              		.loc 1 2094 1
 2876 01da 1846     		mov	r0, r3
 2877 01dc 1437     		adds	r7, r7, #20
 2878              	.LCFI100:
 2879              		.cfi_def_cfa_offset 4
 2880 01de BD46     		mov	sp, r7
 2881              	.LCFI101:
 2882              		.cfi_def_cfa_register 13
 2883              		@ sp needed
 2884 01e0 80BC     		pop	{r7}
 2885              	.LCFI102:
 2886              		.cfi_restore 7
 2887              		.cfi_def_cfa_offset 0
 2888 01e2 7047     		bx	lr
 2889              	.L155:
 2890              		.align	2
 2891              	.L154:
 2892 01e4 00240140 		.word	1073816576
 2893 01e8 00000000 		.word	SystemCoreClock
 2894 01ec 83DE1B43 		.word	1125899907
 2895              		.cfi_endproc
 2896              	.LFE83:
 2898              		.section	.text.HAL_ADC_AnalogWDGConfig,"ax",%progbits
 2899              		.align	1
 2900              		.global	HAL_ADC_AnalogWDGConfig
 2901              		.syntax unified
 2902              		.thumb
 2903              		.thumb_func
 2905              	HAL_ADC_AnalogWDGConfig:
 2906              	.LFB84:
2095:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Configures the analog watchdog.
2098:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Analog watchdog thresholds can be modified while ADC conversion
2099:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         is on going.
2100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         In this case, some constraints must be taken into account:
2101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         the programmed threshold values are effective from the next
2102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         ADC EOC (end of unitary conversion).
2103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         Considering that registers write delay may happen due to
2104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         bus activity, this might cause an uncertainty on the
2105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         effective timing of the new programmed threshold values.
2106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
2107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
2108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status
2109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* Analog
2111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 2907              		.loc 1 2111 1
 2908              		.cfi_startproc
 2909              		@ args = 0, pretend = 0, frame = 8
 2910              		@ frame_needed = 1, uses_anonymous_args = 0
 2911              		@ link register save eliminated.
 2912 0000 80B4     		push	{r7}
 2913              	.LCFI103:
 2914              		.cfi_def_cfa_offset 4
 2915              		.cfi_offset 7, -4
ARM GAS  /tmp/ccelol6o.s 			page 89


 2916 0002 83B0     		sub	sp, sp, #12
 2917              	.LCFI104:
 2918              		.cfi_def_cfa_offset 16
 2919 0004 00AF     		add	r7, sp, #0
 2920              	.LCFI105:
 2921              		.cfi_def_cfa_register 7
 2922 0006 7860     		str	r0, [r7, #4]
 2923 0008 3960     		str	r1, [r7]
2112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Check the parameters */
2113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
2115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
2116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(AnalogWDGConfig->HighThreshold));
2117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(AnalogWDGConfig->LowThreshold));
2118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 2924              		.loc 1 2119 22
 2925 000a 3B68     		ldr	r3, [r7]
 2926 000c 1B68     		ldr	r3, [r3]
 2927              		.loc 1 2119 5
 2928 000e 244A     		ldr	r2, .L162
 2929 0010 9342     		cmp	r3, r2
 2930 0012 03D0     		beq	.L157
2120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 2931              		.loc 1 2120 22 discriminator 1
 2932 0014 3B68     		ldr	r3, [r7]
 2933 0016 1B68     		ldr	r3, [r3]
2119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 2934              		.loc 1 2119 75 discriminator 1
 2935 0018 224A     		ldr	r2, .L162+4
 2936 001a 9342     		cmp	r3, r2
 2937              	.L157:
2121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REGINJEC)  )
2122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
2124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process locked */
2127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_LOCK(hadc);
 2938              		.loc 1 2127 3
 2939 001c 7B68     		ldr	r3, [r7, #4]
 2940 001e 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 2941 0022 012B     		cmp	r3, #1
 2942 0024 01D1     		bne	.L158
 2943              		.loc 1 2127 3 is_stmt 0 discriminator 1
 2944 0026 0223     		movs	r3, #2
 2945 0028 35E0     		b	.L159
 2946              	.L158:
 2947              		.loc 1 2127 3 discriminator 2
 2948 002a 7B68     		ldr	r3, [r7, #4]
 2949 002c 0122     		movs	r2, #1
 2950 002e 83F82420 		strb	r2, [r3, #36]
2128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Analog watchdog configuration */
2130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Configure ADC Analog watchdog interrupt */
2132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if(AnalogWDGConfig->ITMode == ENABLE)
ARM GAS  /tmp/ccelol6o.s 			page 90


 2951              		.loc 1 2132 21 is_stmt 1 discriminator 2
 2952 0032 3B68     		ldr	r3, [r7]
 2953 0034 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 2954              		.loc 1 2132 5 discriminator 2
 2955 0036 012B     		cmp	r3, #1
 2956 0038 08D1     		bne	.L160
2133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable the ADC Analog watchdog interrupt */
2135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 2957              		.loc 1 2135 5
 2958 003a 7B68     		ldr	r3, [r7, #4]
 2959 003c 1B68     		ldr	r3, [r3]
 2960 003e 5A68     		ldr	r2, [r3, #4]
 2961 0040 7B68     		ldr	r3, [r7, #4]
 2962 0042 1B68     		ldr	r3, [r3]
 2963 0044 42F04002 		orr	r2, r2, #64
 2964 0048 5A60     		str	r2, [r3, #4]
 2965 004a 07E0     		b	.L161
 2966              	.L160:
2136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
2138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Disable the ADC Analog watchdog interrupt */
2140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 2967              		.loc 1 2140 5
 2968 004c 7B68     		ldr	r3, [r7, #4]
 2969 004e 1B68     		ldr	r3, [r3]
 2970 0050 5A68     		ldr	r2, [r3, #4]
 2971 0052 7B68     		ldr	r3, [r7, #4]
 2972 0054 1B68     		ldr	r3, [r3]
 2973 0056 22F04002 		bic	r2, r2, #64
 2974 005a 5A60     		str	r2, [r3, #4]
 2975              	.L161:
2141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Configuration of analog watchdog:                                        */
2144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
2145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    one or all channels.                                                  */
2146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*  - Set the Analog watchdog channel (is not used if watchdog              */
2147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
2148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   MODIFY_REG(hadc->Instance->CR1            ,
 2976              		.loc 1 2148 3
 2977 005c 7B68     		ldr	r3, [r7, #4]
 2978 005e 1B68     		ldr	r3, [r3]
 2979 0060 5A68     		ldr	r2, [r3, #4]
 2980 0062 114B     		ldr	r3, .L162+8
 2981 0064 1340     		ands	r3, r3, r2
 2982 0066 3A68     		ldr	r2, [r7]
 2983 0068 1168     		ldr	r1, [r2]
 2984 006a 3A68     		ldr	r2, [r7]
 2985 006c 5268     		ldr	r2, [r2, #4]
 2986 006e 1143     		orrs	r1, r1, r2
 2987 0070 7A68     		ldr	r2, [r7, #4]
 2988 0072 1268     		ldr	r2, [r2]
 2989 0074 0B43     		orrs	r3, r3, r1
 2990 0076 5360     		str	r3, [r2, #4]
2149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC_CR1_AWDSGL |
ARM GAS  /tmp/ccelol6o.s 			page 91


2150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC_CR1_JAWDEN |
2151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC_CR1_AWDEN  |
2152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              ADC_CR1_AWDCH                  ,
2153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              AnalogWDGConfig->WatchdogMode |
2154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****              AnalogWDGConfig->Channel        );
2155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set the high threshold */
2157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   WRITE_REG(hadc->Instance->HTR, AnalogWDGConfig->HighThreshold);
 2991              		.loc 1 2157 3
 2992 0078 7B68     		ldr	r3, [r7, #4]
 2993 007a 1B68     		ldr	r3, [r3]
 2994 007c 3A68     		ldr	r2, [r7]
 2995 007e D268     		ldr	r2, [r2, #12]
 2996 0080 5A62     		str	r2, [r3, #36]
2158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set the low threshold */
2160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   WRITE_REG(hadc->Instance->LTR, AnalogWDGConfig->LowThreshold);
 2997              		.loc 1 2160 3
 2998 0082 7B68     		ldr	r3, [r7, #4]
 2999 0084 1B68     		ldr	r3, [r3]
 3000 0086 3A68     		ldr	r2, [r7]
 3001 0088 1269     		ldr	r2, [r2, #16]
 3002 008a 9A62     		str	r2, [r3, #40]
2161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Process unlocked */
2163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 3003              		.loc 1 2163 3
 3004 008c 7B68     		ldr	r3, [r7, #4]
 3005 008e 0022     		movs	r2, #0
 3006 0090 83F82420 		strb	r2, [r3, #36]
2164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return function status */
2166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return HAL_OK;
 3007              		.loc 1 2166 10
 3008 0094 0023     		movs	r3, #0
 3009              	.L159:
2167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3010              		.loc 1 2167 1
 3011 0096 1846     		mov	r0, r3
 3012 0098 0C37     		adds	r7, r7, #12
 3013              	.LCFI106:
 3014              		.cfi_def_cfa_offset 4
 3015 009a BD46     		mov	sp, r7
 3016              	.LCFI107:
 3017              		.cfi_def_cfa_register 13
 3018              		@ sp needed
 3019 009c 80BC     		pop	{r7}
 3020              	.LCFI108:
 3021              		.cfi_restore 7
 3022              		.cfi_def_cfa_offset 0
 3023 009e 7047     		bx	lr
 3024              	.L163:
 3025              		.align	2
 3026              	.L162:
 3027 00a0 00028000 		.word	8389120
 3028 00a4 00024000 		.word	4194816
 3029 00a8 E0FD3FFF 		.word	-12583456
ARM GAS  /tmp/ccelol6o.s 			page 92


 3030              		.cfi_endproc
 3031              	.LFE84:
 3033              		.section	.text.HAL_ADC_GetState,"ax",%progbits
 3034              		.align	1
 3035              		.global	HAL_ADC_GetState
 3036              		.syntax unified
 3037              		.thumb
 3038              		.thumb_func
 3040              	HAL_ADC_GetState:
 3041              	.LFB85:
2168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
2172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group4 Peripheral State functions
2176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *  @brief    Peripheral State functions
2177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  *
2178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @verbatim
2179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================
2180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****             ##### Peripheral State and Errors functions #####
2181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  ===============================================================================  
2182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     [..]
2183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     This subsection provides functions to get in run-time the status of the  
2184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     peripheral.
2185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Check the ADC state
2186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       (+) Check the ADC error code
2187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** @endverbatim
2189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
2190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  return the ADC state
2194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
2195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL state
2196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
2198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 3042              		.loc 1 2198 1
 3043              		.cfi_startproc
 3044              		@ args = 0, pretend = 0, frame = 8
 3045              		@ frame_needed = 1, uses_anonymous_args = 0
 3046              		@ link register save eliminated.
 3047 0000 80B4     		push	{r7}
 3048              	.LCFI109:
 3049              		.cfi_def_cfa_offset 4
 3050              		.cfi_offset 7, -4
 3051 0002 83B0     		sub	sp, sp, #12
 3052              	.LCFI110:
 3053              		.cfi_def_cfa_offset 16
 3054 0004 00AF     		add	r7, sp, #0
 3055              	.LCFI111:
 3056              		.cfi_def_cfa_register 7
 3057 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccelol6o.s 			page 93


2199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return ADC state */
2200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return hadc->State;
 3058              		.loc 1 2200 14
 3059 0008 7B68     		ldr	r3, [r7, #4]
 3060 000a 9B6A     		ldr	r3, [r3, #40]
2201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3061              		.loc 1 2201 1
 3062 000c 1846     		mov	r0, r3
 3063 000e 0C37     		adds	r7, r7, #12
 3064              	.LCFI112:
 3065              		.cfi_def_cfa_offset 4
 3066 0010 BD46     		mov	sp, r7
 3067              	.LCFI113:
 3068              		.cfi_def_cfa_register 13
 3069              		@ sp needed
 3070 0012 80BC     		pop	{r7}
 3071              	.LCFI114:
 3072              		.cfi_restore 7
 3073              		.cfi_def_cfa_offset 0
 3074 0014 7047     		bx	lr
 3075              		.cfi_endproc
 3076              	.LFE85:
 3078              		.section	.text.HAL_ADC_GetError,"ax",%progbits
 3079              		.align	1
 3080              		.global	HAL_ADC_GetError
 3081              		.syntax unified
 3082              		.thumb
 3083              		.thumb_func
 3085              	HAL_ADC_GetError:
 3086              	.LFB86:
2202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Return the ADC error code
2205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
2206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval ADC Error Code
2207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
2209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 3087              		.loc 1 2209 1
 3088              		.cfi_startproc
 3089              		@ args = 0, pretend = 0, frame = 8
 3090              		@ frame_needed = 1, uses_anonymous_args = 0
 3091              		@ link register save eliminated.
 3092 0000 80B4     		push	{r7}
 3093              	.LCFI115:
 3094              		.cfi_def_cfa_offset 4
 3095              		.cfi_offset 7, -4
 3096 0002 83B0     		sub	sp, sp, #12
 3097              	.LCFI116:
 3098              		.cfi_def_cfa_offset 16
 3099 0004 00AF     		add	r7, sp, #0
 3100              	.LCFI117:
 3101              		.cfi_def_cfa_register 7
 3102 0006 7860     		str	r0, [r7, #4]
2210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return hadc->ErrorCode;
 3103              		.loc 1 2210 14
 3104 0008 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccelol6o.s 			page 94


 3105 000a DB6A     		ldr	r3, [r3, #44]
2211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3106              		.loc 1 2211 1
 3107 000c 1846     		mov	r0, r3
 3108 000e 0C37     		adds	r7, r7, #12
 3109              	.LCFI118:
 3110              		.cfi_def_cfa_offset 4
 3111 0010 BD46     		mov	sp, r7
 3112              	.LCFI119:
 3113              		.cfi_def_cfa_register 13
 3114              		@ sp needed
 3115 0012 80BC     		pop	{r7}
 3116              	.LCFI120:
 3117              		.cfi_restore 7
 3118              		.cfi_def_cfa_offset 0
 3119 0014 7047     		bx	lr
 3120              		.cfi_endproc
 3121              	.LFE86:
 3123              		.section	.text.ADC_Enable,"ax",%progbits
 3124              		.align	1
 3125              		.global	ADC_Enable
 3126              		.syntax unified
 3127              		.thumb
 3128              		.thumb_func
 3130              	ADC_Enable:
 3131              	.LFB87:
2212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
2215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @}
2219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
2222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @{
2223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Enable the selected ADC.
2227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC must be disabled
2228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
2229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
2230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status.
2231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
2233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 3132              		.loc 1 2233 1
 3133              		.cfi_startproc
 3134              		@ args = 0, pretend = 0, frame = 16
 3135              		@ frame_needed = 1, uses_anonymous_args = 0
 3136 0000 80B5     		push	{r7, lr}
 3137              	.LCFI121:
 3138              		.cfi_def_cfa_offset 8
 3139              		.cfi_offset 7, -8
 3140              		.cfi_offset 14, -4
ARM GAS  /tmp/ccelol6o.s 			page 95


 3141 0002 84B0     		sub	sp, sp, #16
 3142              	.LCFI122:
 3143              		.cfi_def_cfa_offset 24
 3144 0004 00AF     		add	r7, sp, #0
 3145              	.LCFI123:
 3146              		.cfi_def_cfa_register 7
 3147 0006 7860     		str	r0, [r7, #4]
2234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0U;
 3148              		.loc 1 2234 12
 3149 0008 0023     		movs	r3, #0
 3150 000a FB60     		str	r3, [r7, #12]
2235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0U;
 3151              		.loc 1 2235 17
 3152 000c 0023     		movs	r3, #0
 3153 000e BB60     		str	r3, [r7, #8]
2236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
2238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* enabling phase not yet completed: flag ADC ready not yet set).           */
2239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
2240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* causes: ADC clock not running, ...).                                     */
2241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) == RESET)
 3154              		.loc 1 2241 7
 3155 0010 7B68     		ldr	r3, [r7, #4]
 3156 0012 1B68     		ldr	r3, [r3]
 3157 0014 9B68     		ldr	r3, [r3, #8]
 3158 0016 03F00103 		and	r3, r3, #1
 3159              		.loc 1 2241 6
 3160 001a 012B     		cmp	r3, #1
 3161 001c 40D0     		beq	.L169
2242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Enable the Peripheral */
2244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
 3162              		.loc 1 2244 5
 3163 001e 7B68     		ldr	r3, [r7, #4]
 3164 0020 1B68     		ldr	r3, [r3]
 3165 0022 9A68     		ldr	r2, [r3, #8]
 3166 0024 7B68     		ldr	r3, [r7, #4]
 3167 0026 1B68     		ldr	r3, [r3]
 3168 0028 42F00102 		orr	r2, r2, #1
 3169 002c 9A60     		str	r2, [r3, #8]
2245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
2246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Delay for ADC stabilization time */
2247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Compute number of CPU cycles to wait for */
2248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 3170              		.loc 1 2248 42
 3171 002e 1F4B     		ldr	r3, .L176
 3172 0030 1B68     		ldr	r3, [r3]
 3173 0032 1F4A     		ldr	r2, .L176+4
 3174 0034 A2FB0323 		umull	r2, r3, r2, r3
 3175 0038 9B0C     		lsrs	r3, r3, #18
 3176              		.loc 1 2248 21
 3177 003a BB60     		str	r3, [r7, #8]
2249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(wait_loop_index != 0U)
 3178              		.loc 1 2249 10
 3179 003c 02E0     		b	.L170
 3180              	.L171:
2250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
ARM GAS  /tmp/ccelol6o.s 			page 96


2251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       wait_loop_index--;
 3181              		.loc 1 2251 22
 3182 003e BB68     		ldr	r3, [r7, #8]
 3183 0040 013B     		subs	r3, r3, #1
 3184 0042 BB60     		str	r3, [r7, #8]
 3185              	.L170:
2249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(wait_loop_index != 0U)
 3186              		.loc 1 2249 27
 3187 0044 BB68     		ldr	r3, [r7, #8]
 3188 0046 002B     		cmp	r3, #0
 3189 0048 F9D1     		bne	.L171
2252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
2253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
2254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Get tick count */
2255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tickstart = HAL_GetTick();
 3190              		.loc 1 2255 17
 3191 004a FFF7FEFF 		bl	HAL_GetTick
 3192 004e F860     		str	r0, [r7, #12]
2256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Wait for ADC effectively enabled */
2258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(ADC_IS_ENABLE(hadc) == RESET)
 3193              		.loc 1 2258 10
 3194 0050 1FE0     		b	.L172
 3195              	.L175:
2259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
2260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 3196              		.loc 1 2260 11
 3197 0052 FFF7FEFF 		bl	HAL_GetTick
 3198 0056 0246     		mov	r2, r0
 3199              		.loc 1 2260 25
 3200 0058 FB68     		ldr	r3, [r7, #12]
 3201 005a D31A     		subs	r3, r2, r3
 3202              		.loc 1 2260 9
 3203 005c 022B     		cmp	r3, #2
 3204 005e 18D9     		bls	.L172
2261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
2262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* New check to avoid false timeout detection in case of preemption */
2263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if(ADC_IS_ENABLE(hadc) == RESET)
 3205              		.loc 1 2263 12
 3206 0060 7B68     		ldr	r3, [r7, #4]
 3207 0062 1B68     		ldr	r3, [r3]
 3208 0064 9B68     		ldr	r3, [r3, #8]
 3209 0066 03F00103 		and	r3, r3, #1
 3210              		.loc 1 2263 11
 3211 006a 012B     		cmp	r3, #1
 3212 006c 11D0     		beq	.L172
2264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
2265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Update ADC state machine to error */
2266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 3213              		.loc 1 2266 11
 3214 006e 7B68     		ldr	r3, [r7, #4]
 3215 0070 9B6A     		ldr	r3, [r3, #40]
 3216 0072 43F01002 		orr	r2, r3, #16
 3217 0076 7B68     		ldr	r3, [r7, #4]
 3218 0078 9A62     		str	r2, [r3, #40]
2267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Set ADC error code to ADC IP internal error */
ARM GAS  /tmp/ccelol6o.s 			page 97


2269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 3219              		.loc 1 2269 11
 3220 007a 7B68     		ldr	r3, [r7, #4]
 3221 007c DB6A     		ldr	r3, [r3, #44]
 3222 007e 43F00102 		orr	r2, r3, #1
 3223 0082 7B68     		ldr	r3, [r7, #4]
 3224 0084 DA62     		str	r2, [r3, #44]
2270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Process unlocked */
2272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           __HAL_UNLOCK(hadc);
 3225              		.loc 1 2272 11
 3226 0086 7B68     		ldr	r3, [r7, #4]
 3227 0088 0022     		movs	r2, #0
 3228 008a 83F82420 		strb	r2, [r3, #36]
2273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           return HAL_ERROR;
 3229              		.loc 1 2274 18
 3230 008e 0123     		movs	r3, #1
 3231 0090 07E0     		b	.L174
 3232              	.L172:
2258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 3233              		.loc 1 2258 11
 3234 0092 7B68     		ldr	r3, [r7, #4]
 3235 0094 1B68     		ldr	r3, [r3]
 3236 0096 9B68     		ldr	r3, [r3, #8]
 3237 0098 03F00103 		and	r3, r3, #1
2258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 3238              		.loc 1 2258 31
 3239 009c 012B     		cmp	r3, #1
 3240 009e D8D1     		bne	.L175
 3241              	.L169:
2275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
2276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
2277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
2278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****    
2280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return HAL status */
2281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return HAL_OK;
 3242              		.loc 1 2281 10
 3243 00a0 0023     		movs	r3, #0
 3244              	.L174:
2282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3245              		.loc 1 2282 1
 3246 00a2 1846     		mov	r0, r3
 3247 00a4 1037     		adds	r7, r7, #16
 3248              	.LCFI124:
 3249              		.cfi_def_cfa_offset 8
 3250 00a6 BD46     		mov	sp, r7
 3251              	.LCFI125:
 3252              		.cfi_def_cfa_register 13
 3253              		@ sp needed
 3254 00a8 80BD     		pop	{r7, pc}
 3255              	.L177:
 3256 00aa 00BF     		.align	2
 3257              	.L176:
 3258 00ac 00000000 		.word	SystemCoreClock
 3259 00b0 83DE1B43 		.word	1125899907
ARM GAS  /tmp/ccelol6o.s 			page 98


 3260              		.cfi_endproc
 3261              	.LFE87:
 3263              		.section	.text.ADC_ConversionStop_Disable,"ax",%progbits
 3264              		.align	1
 3265              		.global	ADC_ConversionStop_Disable
 3266              		.syntax unified
 3267              		.thumb
 3268              		.thumb_func
 3270              	ADC_ConversionStop_Disable:
 3271              	.LFB88:
2283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  Stop ADC conversion and disable the selected ADC
2286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
2287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   *         stopped to disable the ADC.
2288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hadc: ADC handle
2289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval HAL status.
2290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
2292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 3272              		.loc 1 2292 1
 3273              		.cfi_startproc
 3274              		@ args = 0, pretend = 0, frame = 16
 3275              		@ frame_needed = 1, uses_anonymous_args = 0
 3276 0000 80B5     		push	{r7, lr}
 3277              	.LCFI126:
 3278              		.cfi_def_cfa_offset 8
 3279              		.cfi_offset 7, -8
 3280              		.cfi_offset 14, -4
 3281 0002 84B0     		sub	sp, sp, #16
 3282              	.LCFI127:
 3283              		.cfi_def_cfa_offset 24
 3284 0004 00AF     		add	r7, sp, #0
 3285              	.LCFI128:
 3286              		.cfi_def_cfa_register 7
 3287 0006 7860     		str	r0, [r7, #4]
2293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   uint32_t tickstart = 0U;
 3288              		.loc 1 2293 12
 3289 0008 0023     		movs	r3, #0
 3290 000a FB60     		str	r3, [r7, #12]
2294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Verification if ADC is not already disabled */
2296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (ADC_IS_ENABLE(hadc) != RESET)
 3291              		.loc 1 2296 7
 3292 000c 7B68     		ldr	r3, [r7, #4]
 3293 000e 1B68     		ldr	r3, [r3]
 3294 0010 9B68     		ldr	r3, [r3, #8]
 3295 0012 03F00103 		and	r3, r3, #1
 3296              		.loc 1 2296 6
 3297 0016 012B     		cmp	r3, #1
 3298 0018 2ED1     		bne	.L179
2297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Disable the ADC peripheral */
2299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     __HAL_ADC_DISABLE(hadc);
 3299              		.loc 1 2299 5
 3300 001a 7B68     		ldr	r3, [r7, #4]
 3301 001c 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccelol6o.s 			page 99


 3302 001e 9A68     		ldr	r2, [r3, #8]
 3303 0020 7B68     		ldr	r3, [r7, #4]
 3304 0022 1B68     		ldr	r3, [r3]
 3305 0024 22F00102 		bic	r2, r2, #1
 3306 0028 9A60     		str	r2, [r3, #8]
2300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****      
2301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Get tick count */
2302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     tickstart = HAL_GetTick();
 3307              		.loc 1 2302 17
 3308 002a FFF7FEFF 		bl	HAL_GetTick
 3309 002e F860     		str	r0, [r7, #12]
2303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
2304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Wait for ADC effectively disabled */
2305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     while(ADC_IS_ENABLE(hadc) != RESET)
 3310              		.loc 1 2305 10
 3311 0030 1BE0     		b	.L180
 3312              	.L183:
2306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
2307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 3313              		.loc 1 2307 11
 3314 0032 FFF7FEFF 		bl	HAL_GetTick
 3315 0036 0246     		mov	r2, r0
 3316              		.loc 1 2307 25
 3317 0038 FB68     		ldr	r3, [r7, #12]
 3318 003a D31A     		subs	r3, r2, r3
 3319              		.loc 1 2307 9
 3320 003c 022B     		cmp	r3, #2
 3321 003e 14D9     		bls	.L180
2308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
2309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         /* New check to avoid false timeout detection in case of preemption */
2310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         if(ADC_IS_ENABLE(hadc) != RESET)
 3322              		.loc 1 2310 12
 3323 0040 7B68     		ldr	r3, [r7, #4]
 3324 0042 1B68     		ldr	r3, [r3]
 3325 0044 9B68     		ldr	r3, [r3, #8]
 3326 0046 03F00103 		and	r3, r3, #1
 3327              		.loc 1 2310 11
 3328 004a 012B     		cmp	r3, #1
 3329 004c 0DD1     		bne	.L180
2311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         {
2312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Update ADC state machine to error */
2313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 3330              		.loc 1 2313 11
 3331 004e 7B68     		ldr	r3, [r7, #4]
 3332 0050 9B6A     		ldr	r3, [r3, #40]
 3333 0052 43F01002 		orr	r2, r3, #16
 3334 0056 7B68     		ldr	r3, [r7, #4]
 3335 0058 9A62     		str	r2, [r3, #40]
2314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           /* Set ADC error code to ADC IP internal error */
2316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 3336              		.loc 1 2316 11
 3337 005a 7B68     		ldr	r3, [r7, #4]
 3338 005c DB6A     		ldr	r3, [r3, #44]
 3339 005e 43F00102 		orr	r2, r3, #1
 3340 0062 7B68     		ldr	r3, [r7, #4]
 3341 0064 DA62     		str	r2, [r3, #44]
ARM GAS  /tmp/ccelol6o.s 			page 100


2317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****           return HAL_ERROR;
 3342              		.loc 1 2318 18
 3343 0066 0123     		movs	r3, #1
 3344 0068 07E0     		b	.L182
 3345              	.L180:
2305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 3346              		.loc 1 2305 11
 3347 006a 7B68     		ldr	r3, [r7, #4]
 3348 006c 1B68     		ldr	r3, [r3]
 3349 006e 9B68     		ldr	r3, [r3, #8]
 3350 0070 03F00103 		and	r3, r3, #1
2305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
 3351              		.loc 1 2305 31
 3352 0074 012B     		cmp	r3, #1
 3353 0076 DCD0     		beq	.L183
 3354              	.L179:
2319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         }
2320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
2321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
2322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Return HAL status */
2325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   return HAL_OK;
 3355              		.loc 1 2325 10
 3356 0078 0023     		movs	r3, #0
 3357              	.L182:
2326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3358              		.loc 1 2326 1
 3359 007a 1846     		mov	r0, r3
 3360 007c 1037     		adds	r7, r7, #16
 3361              	.LCFI129:
 3362              		.cfi_def_cfa_offset 8
 3363 007e BD46     		mov	sp, r7
 3364              	.LCFI130:
 3365              		.cfi_def_cfa_register 13
 3366              		@ sp needed
 3367 0080 80BD     		pop	{r7, pc}
 3368              		.cfi_endproc
 3369              	.LFE88:
 3371              		.section	.text.ADC_DMAConvCplt,"ax",%progbits
 3372              		.align	1
 3373              		.global	ADC_DMAConvCplt
 3374              		.syntax unified
 3375              		.thumb
 3376              		.thumb_func
 3378              	ADC_DMAConvCplt:
 3379              	.LFB89:
2327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  DMA transfer complete callback. 
2330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
2331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
2332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
2334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 3380              		.loc 1 2334 1
ARM GAS  /tmp/ccelol6o.s 			page 101


 3381              		.cfi_startproc
 3382              		@ args = 0, pretend = 0, frame = 16
 3383              		@ frame_needed = 1, uses_anonymous_args = 0
 3384 0000 80B5     		push	{r7, lr}
 3385              	.LCFI131:
 3386              		.cfi_def_cfa_offset 8
 3387              		.cfi_offset 7, -8
 3388              		.cfi_offset 14, -4
 3389 0002 84B0     		sub	sp, sp, #16
 3390              	.LCFI132:
 3391              		.cfi_def_cfa_offset 24
 3392 0004 00AF     		add	r7, sp, #0
 3393              	.LCFI133:
 3394              		.cfi_def_cfa_register 7
 3395 0006 7860     		str	r0, [r7, #4]
2335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3396              		.loc 1 2336 22
 3397 0008 7B68     		ldr	r3, [r7, #4]
 3398 000a 5B6A     		ldr	r3, [r3, #36]
 3399 000c FB60     		str	r3, [r7, #12]
2337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****  
2338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Update state machine on conversion status if not in error state */
2339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 3400              		.loc 1 2339 7
 3401 000e FB68     		ldr	r3, [r7, #12]
 3402 0010 9B6A     		ldr	r3, [r3, #40]
 3403 0012 03F05003 		and	r3, r3, #80
 3404              		.loc 1 2339 6
 3405 0016 002B     		cmp	r3, #0
 3406 0018 27D1     		bne	.L185
2340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Update ADC state machine */
2342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 3407              		.loc 1 2342 5
 3408 001a FB68     		ldr	r3, [r7, #12]
 3409 001c 9B6A     		ldr	r3, [r3, #40]
 3410 001e 43F40072 		orr	r2, r3, #512
 3411 0022 FB68     		ldr	r3, [r7, #12]
 3412 0024 9A62     		str	r2, [r3, #40]
2343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
2344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular     */
2345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going.        */
2346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Note: On STM32F1 devices, in case of sequencer enabled                 */
2347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       (several ranks selected), end of conversion flag is raised       */
2348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /*       at the end of the sequence.                                      */
2349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 3413              		.loc 1 2349 8
 3414 0026 FB68     		ldr	r3, [r7, #12]
 3415 0028 1B68     		ldr	r3, [r3]
 3416 002a 9B68     		ldr	r3, [r3, #8]
 3417 002c 03F46023 		and	r3, r3, #917504
 3418              		.loc 1 2349 7
 3419 0030 B3F5602F 		cmp	r3, #917504
 3420 0034 15D1     		bne	.L186
2350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 3421              		.loc 1 2350 19 discriminator 1
ARM GAS  /tmp/ccelol6o.s 			page 102


 3422 0036 FB68     		ldr	r3, [r7, #12]
 3423 0038 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
2349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)   )
 3424              		.loc 1 2349 51 discriminator 1
 3425 003a 002B     		cmp	r3, #0
 3426 003c 11D1     		bne	.L186
2351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     {
2352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       /* Set ADC state */
2353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 3427              		.loc 1 2353 7
 3428 003e FB68     		ldr	r3, [r7, #12]
 3429 0040 9B6A     		ldr	r3, [r3, #40]
 3430 0042 23F48072 		bic	r2, r3, #256
 3431 0046 FB68     		ldr	r3, [r7, #12]
 3432 0048 9A62     		str	r2, [r3, #40]
2354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       
2355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 3433              		.loc 1 2355 11
 3434 004a FB68     		ldr	r3, [r7, #12]
 3435 004c 9B6A     		ldr	r3, [r3, #40]
 3436 004e 03F48053 		and	r3, r3, #4096
 3437              		.loc 1 2355 10
 3438 0052 002B     		cmp	r3, #0
 3439 0054 05D1     		bne	.L186
2356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       {
2357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 3440              		.loc 1 2357 9
 3441 0056 FB68     		ldr	r3, [r7, #12]
 3442 0058 9B6A     		ldr	r3, [r3, #40]
 3443 005a 43F00102 		orr	r2, r3, #1
 3444 005e FB68     		ldr	r3, [r7, #12]
 3445 0060 9A62     		str	r2, [r3, #40]
 3446              	.L186:
2358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****       }
2359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     }
2360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     
2361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Conversion complete callback */
2362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->ConvCpltCallback(hadc);
2364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #else
2365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
 3447              		.loc 1 2365 5
 3448 0062 F868     		ldr	r0, [r7, #12]
 3449 0064 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
2366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   else
2369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   {
2370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     /* Call DMA error callback */
2371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->DMA_Handle->XferErrorCallback(hdma);
2372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
2373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3450              		.loc 1 2373 1
 3451 0068 04E0     		b	.L188
 3452              	.L185:
2371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 3453              		.loc 1 2371 9
ARM GAS  /tmp/ccelol6o.s 			page 103


 3454 006a FB68     		ldr	r3, [r7, #12]
 3455 006c 1B6A     		ldr	r3, [r3, #32]
2371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 3456              		.loc 1 2371 21
 3457 006e 1B6B     		ldr	r3, [r3, #48]
2371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   }
 3458              		.loc 1 2371 5
 3459 0070 7868     		ldr	r0, [r7, #4]
 3460 0072 9847     		blx	r3
 3461              	.LVL0:
 3462              	.L188:
 3463              		.loc 1 2373 1
 3464 0074 00BF     		nop
 3465 0076 1037     		adds	r7, r7, #16
 3466              	.LCFI134:
 3467              		.cfi_def_cfa_offset 8
 3468 0078 BD46     		mov	sp, r7
 3469              	.LCFI135:
 3470              		.cfi_def_cfa_register 13
 3471              		@ sp needed
 3472 007a 80BD     		pop	{r7, pc}
 3473              		.cfi_endproc
 3474              	.LFE89:
 3476              		.section	.text.ADC_DMAHalfConvCplt,"ax",%progbits
 3477              		.align	1
 3478              		.global	ADC_DMAHalfConvCplt
 3479              		.syntax unified
 3480              		.thumb
 3481              		.thumb_func
 3483              	ADC_DMAHalfConvCplt:
 3484              	.LFB90:
2374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  DMA half transfer complete callback. 
2377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
2378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
2379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
2381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 3485              		.loc 1 2381 1
 3486              		.cfi_startproc
 3487              		@ args = 0, pretend = 0, frame = 16
 3488              		@ frame_needed = 1, uses_anonymous_args = 0
 3489 0000 80B5     		push	{r7, lr}
 3490              	.LCFI136:
 3491              		.cfi_def_cfa_offset 8
 3492              		.cfi_offset 7, -8
 3493              		.cfi_offset 14, -4
 3494 0002 84B0     		sub	sp, sp, #16
 3495              	.LCFI137:
 3496              		.cfi_def_cfa_offset 24
 3497 0004 00AF     		add	r7, sp, #0
 3498              	.LCFI138:
 3499              		.cfi_def_cfa_register 7
 3500 0006 7860     		str	r0, [r7, #4]
2382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
ARM GAS  /tmp/ccelol6o.s 			page 104


 3501              		.loc 1 2383 22
 3502 0008 7B68     		ldr	r3, [r7, #4]
 3503 000a 5B6A     		ldr	r3, [r3, #36]
 3504 000c FB60     		str	r3, [r7, #12]
2384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Half conversion callback */
2386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****     hadc->ConvHalfCpltCallback(hadc);
2388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #else
2389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_ADC_ConvHalfCpltCallback(hadc);
 3505              		.loc 1 2389 3
 3506 000e F868     		ldr	r0, [r7, #12]
 3507 0010 FFF7FEFF 		bl	HAL_ADC_ConvHalfCpltCallback
2390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3508              		.loc 1 2391 1
 3509 0014 00BF     		nop
 3510 0016 1037     		adds	r7, r7, #16
 3511              	.LCFI139:
 3512              		.cfi_def_cfa_offset 8
 3513 0018 BD46     		mov	sp, r7
 3514              	.LCFI140:
 3515              		.cfi_def_cfa_register 13
 3516              		@ sp needed
 3517 001a 80BD     		pop	{r7, pc}
 3518              		.cfi_endproc
 3519              	.LFE90:
 3521              		.section	.text.ADC_DMAError,"ax",%progbits
 3522              		.align	1
 3523              		.global	ADC_DMAError
 3524              		.syntax unified
 3525              		.thumb
 3526              		.thumb_func
 3528              	ADC_DMAError:
 3529              	.LFB91:
2392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** 
2393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** /**
2394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @brief  DMA error callback 
2395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @param  hdma: pointer to DMA handle.
2396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   * @retval None
2397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   */
2398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** void ADC_DMAError(DMA_HandleTypeDef *hdma)   
2399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** {
 3530              		.loc 1 2399 1
 3531              		.cfi_startproc
 3532              		@ args = 0, pretend = 0, frame = 16
 3533              		@ frame_needed = 1, uses_anonymous_args = 0
 3534 0000 80B5     		push	{r7, lr}
 3535              	.LCFI141:
 3536              		.cfi_def_cfa_offset 8
 3537              		.cfi_offset 7, -8
 3538              		.cfi_offset 14, -4
 3539 0002 84B0     		sub	sp, sp, #16
 3540              	.LCFI142:
 3541              		.cfi_def_cfa_offset 24
 3542 0004 00AF     		add	r7, sp, #0
 3543              	.LCFI143:
ARM GAS  /tmp/ccelol6o.s 			page 105


 3544              		.cfi_def_cfa_register 7
 3545 0006 7860     		str	r0, [r7, #4]
2400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
2401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3546              		.loc 1 2401 22
 3547 0008 7B68     		ldr	r3, [r7, #4]
 3548 000a 5B6A     		ldr	r3, [r3, #36]
 3549 000c FB60     		str	r3, [r7, #12]
2402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set ADC state */
2404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 3550              		.loc 1 2404 3
 3551 000e FB68     		ldr	r3, [r7, #12]
 3552 0010 9B6A     		ldr	r3, [r3, #40]
 3553 0012 43F04002 		orr	r2, r3, #64
 3554 0016 FB68     		ldr	r3, [r7, #12]
 3555 0018 9A62     		str	r2, [r3, #40]
2405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Set ADC error code to DMA error */
2407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 3556              		.loc 1 2407 3
 3557 001a FB68     		ldr	r3, [r7, #12]
 3558 001c DB6A     		ldr	r3, [r3, #44]
 3559 001e 43F00402 		orr	r2, r3, #4
 3560 0022 FB68     		ldr	r3, [r7, #12]
 3561 0024 DA62     		str	r2, [r3, #44]
2408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   
2409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   /* Error callback */
2410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   hadc->ErrorCallback(hadc);
2412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #else
2413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c ****   HAL_ADC_ErrorCallback(hadc);
 3562              		.loc 1 2413 3
 3563 0026 F868     		ldr	r0, [r7, #12]
 3564 0028 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
2414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_adc.c **** }
 3565              		.loc 1 2415 1
 3566 002c 00BF     		nop
 3567 002e 1037     		adds	r7, r7, #16
 3568              	.LCFI144:
 3569              		.cfi_def_cfa_offset 8
 3570 0030 BD46     		mov	sp, r7
 3571              	.LCFI145:
 3572              		.cfi_def_cfa_register 13
 3573              		@ sp needed
 3574 0032 80BD     		pop	{r7, pc}
 3575              		.cfi_endproc
 3576              	.LFE91:
 3578              		.text
 3579              	.Letext0:
 3580              		.file 2 "/opt/arm-gnu-toolchain-12.2.rel1-x86_64-arm-none-eabi/arm-none-eabi/include/machine/_defa
 3581              		.file 3 "/opt/arm-gnu-toolchain-12.2.rel1-x86_64-arm-none-eabi/arm-none-eabi/include/sys/_stdint.h
 3582              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 3583              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 3584              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 3585              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
ARM GAS  /tmp/ccelol6o.s 			page 106


 3586              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 3587              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 3588              		.file 10 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 3589              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc_ex.h"
 3590              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /tmp/ccelol6o.s 			page 107


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_adc.c
     /tmp/ccelol6o.s:19     .text.HAL_ADC_Init:0000000000000000 $t
     /tmp/ccelol6o.s:25     .text.HAL_ADC_Init:0000000000000000 HAL_ADC_Init
     /tmp/ccelol6o.s:550    .text.HAL_ADC_MspInit:0000000000000000 HAL_ADC_MspInit
     /tmp/ccelol6o.s:3270   .text.ADC_ConversionStop_Disable:0000000000000000 ADC_ConversionStop_Disable
     /tmp/ccelol6o.s:307    .text.HAL_ADC_Init:00000000000001a8 $d
     /tmp/ccelol6o.s:313    .text.HAL_ADC_DeInit:0000000000000000 $t
     /tmp/ccelol6o.s:319    .text.HAL_ADC_DeInit:0000000000000000 HAL_ADC_DeInit
     /tmp/ccelol6o.s:592    .text.HAL_ADC_MspDeInit:0000000000000000 HAL_ADC_MspDeInit
     /tmp/ccelol6o.s:538    .text.HAL_ADC_DeInit:000000000000017c $d
     /tmp/ccelol6o.s:544    .text.HAL_ADC_MspInit:0000000000000000 $t
     /tmp/ccelol6o.s:586    .text.HAL_ADC_MspDeInit:0000000000000000 $t
     /tmp/ccelol6o.s:628    .text.HAL_ADC_Start:0000000000000000 $t
     /tmp/ccelol6o.s:634    .text.HAL_ADC_Start:0000000000000000 HAL_ADC_Start
     /tmp/ccelol6o.s:3130   .text.ADC_Enable:0000000000000000 ADC_Enable
     /tmp/ccelol6o.s:850    .text.HAL_ADC_Start:0000000000000154 $d
     /tmp/ccelol6o.s:856    .text.HAL_ADC_Stop:0000000000000000 $t
     /tmp/ccelol6o.s:862    .text.HAL_ADC_Stop:0000000000000000 HAL_ADC_Stop
     /tmp/ccelol6o.s:935    .text.HAL_ADC_PollForConversion:0000000000000000 $t
     /tmp/ccelol6o.s:941    .text.HAL_ADC_PollForConversion:0000000000000000 HAL_ADC_PollForConversion
     /tmp/ccelol6o.s:1272   .text.HAL_ADC_PollForConversion:00000000000001f4 $d
     /tmp/ccelol6o.s:1282   .text.HAL_ADC_PollForEvent:0000000000000000 $t
     /tmp/ccelol6o.s:1288   .text.HAL_ADC_PollForEvent:0000000000000000 HAL_ADC_PollForEvent
     /tmp/ccelol6o.s:1398   .text.HAL_ADC_Start_IT:0000000000000000 $t
     /tmp/ccelol6o.s:1404   .text.HAL_ADC_Start_IT:0000000000000000 HAL_ADC_Start_IT
     /tmp/ccelol6o.s:1628   .text.HAL_ADC_Start_IT:0000000000000164 $d
     /tmp/ccelol6o.s:1634   .text.HAL_ADC_Stop_IT:0000000000000000 $t
     /tmp/ccelol6o.s:1640   .text.HAL_ADC_Stop_IT:0000000000000000 HAL_ADC_Stop_IT
     /tmp/ccelol6o.s:1721   .text.HAL_ADC_Start_DMA:0000000000000000 $t
     /tmp/ccelol6o.s:1727   .text.HAL_ADC_Start_DMA:0000000000000000 HAL_ADC_Start_DMA
     /tmp/ccelol6o.s:1999   .text.HAL_ADC_Start_DMA:00000000000001a8 $d
     /tmp/ccelol6o.s:3378   .text.ADC_DMAConvCplt:0000000000000000 ADC_DMAConvCplt
     /tmp/ccelol6o.s:3483   .text.ADC_DMAHalfConvCplt:0000000000000000 ADC_DMAHalfConvCplt
     /tmp/ccelol6o.s:3528   .text.ADC_DMAError:0000000000000000 ADC_DMAError
     /tmp/ccelol6o.s:2008   .text.HAL_ADC_Stop_DMA:0000000000000000 $t
     /tmp/ccelol6o.s:2014   .text.HAL_ADC_Stop_DMA:0000000000000000 HAL_ADC_Stop_DMA
     /tmp/ccelol6o.s:2123   .text.HAL_ADC_GetValue:0000000000000000 $t
     /tmp/ccelol6o.s:2129   .text.HAL_ADC_GetValue:0000000000000000 HAL_ADC_GetValue
     /tmp/ccelol6o.s:2170   .text.HAL_ADC_IRQHandler:0000000000000000 $t
     /tmp/ccelol6o.s:2176   .text.HAL_ADC_IRQHandler:0000000000000000 HAL_ADC_IRQHandler
     /tmp/ccelol6o.s:2424   .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/ccelol6o.s:2508   .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 HAL_ADC_LevelOutOfWindowCallback
     /tmp/ccelol6o.s:2418   .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/ccelol6o.s:2460   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 $t
     /tmp/ccelol6o.s:2466   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 HAL_ADC_ConvHalfCpltCallback
     /tmp/ccelol6o.s:2502   .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 $t
     /tmp/ccelol6o.s:2544   .text.HAL_ADC_ErrorCallback:0000000000000000 $t
     /tmp/ccelol6o.s:2550   .text.HAL_ADC_ErrorCallback:0000000000000000 HAL_ADC_ErrorCallback
     /tmp/ccelol6o.s:2586   .text.HAL_ADC_ConfigChannel:0000000000000000 $t
     /tmp/ccelol6o.s:2592   .text.HAL_ADC_ConfigChannel:0000000000000000 HAL_ADC_ConfigChannel
     /tmp/ccelol6o.s:2892   .text.HAL_ADC_ConfigChannel:00000000000001e4 $d
     /tmp/ccelol6o.s:2899   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 $t
     /tmp/ccelol6o.s:2905   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 HAL_ADC_AnalogWDGConfig
     /tmp/ccelol6o.s:3027   .text.HAL_ADC_AnalogWDGConfig:00000000000000a0 $d
     /tmp/ccelol6o.s:3034   .text.HAL_ADC_GetState:0000000000000000 $t
     /tmp/ccelol6o.s:3040   .text.HAL_ADC_GetState:0000000000000000 HAL_ADC_GetState
ARM GAS  /tmp/ccelol6o.s 			page 108


     /tmp/ccelol6o.s:3079   .text.HAL_ADC_GetError:0000000000000000 $t
     /tmp/ccelol6o.s:3085   .text.HAL_ADC_GetError:0000000000000000 HAL_ADC_GetError
     /tmp/ccelol6o.s:3124   .text.ADC_Enable:0000000000000000 $t
     /tmp/ccelol6o.s:3258   .text.ADC_Enable:00000000000000ac $d
     /tmp/ccelol6o.s:3264   .text.ADC_ConversionStop_Disable:0000000000000000 $t
     /tmp/ccelol6o.s:3372   .text.ADC_DMAConvCplt:0000000000000000 $t
     /tmp/ccelol6o.s:3477   .text.ADC_DMAHalfConvCplt:0000000000000000 $t
     /tmp/ccelol6o.s:3522   .text.ADC_DMAError:0000000000000000 $t

UNDEFINED SYMBOLS
HAL_GetTick
HAL_RCCEx_GetPeriphCLKFreq
SystemCoreClock
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_ADCEx_InjectedConvCpltCallback
