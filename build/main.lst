ARM GAS  /tmp/ccX00Dbd.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/main.c"
  18              		.global	hadc1
  19              		.section	.bss.hadc1,"aw",%nobits
  20              		.align	2
  23              	hadc1:
  24 0000 00000000 		.space	48
  24      00000000 
  24      00000000 
  24      00000000 
  24      00000000 
  25              		.section	.text.main,"ax",%progbits
  26              		.align	1
  27              		.global	main
  28              		.syntax unified
  29              		.thumb
  30              		.thumb_func
  32              	main:
  33              	.LFB65:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2022 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
ARM GAS  /tmp/ccX00Dbd.s 			page 2


  24:Core/Src/main.c **** #include "button.h"
  25:Core/Src/main.c **** /* USER CODE END Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** /* USER CODE END PTD */
  31:Core/Src/main.c **** 
  32:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  33:Core/Src/main.c **** /* USER CODE BEGIN PD */
  34:Core/Src/main.c **** /* USER CODE END PD */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  37:Core/Src/main.c **** /* USER CODE BEGIN PM */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* USER CODE END PM */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  42:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* USER CODE BEGIN PV */
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* USER CODE END PV */
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  49:Core/Src/main.c **** void SystemClock_Config(void);
  50:Core/Src/main.c **** static void MX_GPIO_Init(void);
  51:Core/Src/main.c **** static void MX_ADC1_Init(void);
  52:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** /* USER CODE END PFP */
  55:Core/Src/main.c **** 
  56:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  57:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  58:Core/Src/main.c **** void set_pins_from_read(uint32_t read);
  59:Core/Src/main.c **** 
  60:Core/Src/main.c **** /* USER CODE END 0 */
  61:Core/Src/main.c **** 
  62:Core/Src/main.c **** /**
  63:Core/Src/main.c ****   * @brief  The application entry point.
  64:Core/Src/main.c ****   * @retval int
  65:Core/Src/main.c ****   */
  66:Core/Src/main.c **** int main(void)
  67:Core/Src/main.c **** {
  34              		.loc 1 67 1
  35              		.cfi_startproc
  36              		@ args = 0, pretend = 0, frame = 8
  37              		@ frame_needed = 1, uses_anonymous_args = 0
  38 0000 80B5     		push	{r7, lr}
  39              	.LCFI0:
  40              		.cfi_def_cfa_offset 8
  41              		.cfi_offset 7, -8
  42              		.cfi_offset 14, -4
  43 0002 82B0     		sub	sp, sp, #8
  44              	.LCFI1:
  45              		.cfi_def_cfa_offset 16
  46 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccX00Dbd.s 			page 3


  47              	.LCFI2:
  48              		.cfi_def_cfa_register 7
  68:Core/Src/main.c **** 
  69:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  70:Core/Src/main.c ****   uint32_t read;
  71:Core/Src/main.c **** 
  72:Core/Src/main.c ****   /* USER CODE END 1 */
  73:Core/Src/main.c **** 
  74:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  75:Core/Src/main.c **** 
  76:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  77:Core/Src/main.c ****   HAL_Init();
  49              		.loc 1 77 3
  50 0006 FFF7FEFF 		bl	HAL_Init
  78:Core/Src/main.c **** 
  79:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  80:Core/Src/main.c **** 
  81:Core/Src/main.c ****   /* USER CODE END Init */
  82:Core/Src/main.c **** 
  83:Core/Src/main.c ****   /* Configure the system clock */
  84:Core/Src/main.c ****   SystemClock_Config();
  51              		.loc 1 84 3
  52 000a FFF7FEFF 		bl	SystemClock_Config
  85:Core/Src/main.c **** 
  86:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
  87:Core/Src/main.c **** 
  88:Core/Src/main.c ****   /* USER CODE END SysInit */
  89:Core/Src/main.c **** 
  90:Core/Src/main.c ****   /* Initialize all configured peripherals */
  91:Core/Src/main.c ****   MX_GPIO_Init();
  53              		.loc 1 91 3
  54 000e FFF7FEFF 		bl	MX_GPIO_Init
  92:Core/Src/main.c ****   MX_ADC1_Init();
  55              		.loc 1 92 3
  56 0012 FFF7FEFF 		bl	MX_ADC1_Init
  57              	.L2:
  93:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
  94:Core/Src/main.c **** 
  95:Core/Src/main.c ****   /* USER CODE END 2 */
  96:Core/Src/main.c **** 
  97:Core/Src/main.c ****   /* Infinite loop */
  98:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
  99:Core/Src/main.c ****   while (1)
 100:Core/Src/main.c ****   {
 101:Core/Src/main.c ****     HAL_Delay(100);
  58              		.loc 1 101 5 discriminator 1
  59 0016 6420     		movs	r0, #100
  60 0018 FFF7FEFF 		bl	HAL_Delay
 102:Core/Src/main.c ****     HAL_ADC_Start(&hadc1);
  61              		.loc 1 102 5 discriminator 1
  62 001c 0748     		ldr	r0, .L3
  63 001e FFF7FEFF 		bl	HAL_ADC_Start
 103:Core/Src/main.c ****     HAL_ADC_PollForConversion(&hadc1, 100);
  64              		.loc 1 103 5 discriminator 1
  65 0022 6421     		movs	r1, #100
  66 0024 0548     		ldr	r0, .L3
  67 0026 FFF7FEFF 		bl	HAL_ADC_PollForConversion
ARM GAS  /tmp/ccX00Dbd.s 			page 4


 104:Core/Src/main.c ****     read = HAL_ADC_GetValue(&hadc1);
  68              		.loc 1 104 12 discriminator 1
  69 002a 0448     		ldr	r0, .L3
  70 002c FFF7FEFF 		bl	HAL_ADC_GetValue
  71 0030 7860     		str	r0, [r7, #4]
 105:Core/Src/main.c ****     set_pins_from_read(read);
  72              		.loc 1 105 5 discriminator 1
  73 0032 7868     		ldr	r0, [r7, #4]
  74 0034 FFF7FEFF 		bl	set_pins_from_read
 101:Core/Src/main.c ****     HAL_ADC_Start(&hadc1);
  75              		.loc 1 101 5 discriminator 1
  76 0038 00BF     		nop
  77 003a ECE7     		b	.L2
  78              	.L4:
  79              		.align	2
  80              	.L3:
  81 003c 00000000 		.word	hadc1
  82              		.cfi_endproc
  83              	.LFE65:
  85              		.section	.text.SystemClock_Config,"ax",%progbits
  86              		.align	1
  87              		.global	SystemClock_Config
  88              		.syntax unified
  89              		.thumb
  90              		.thumb_func
  92              	SystemClock_Config:
  93              	.LFB66:
 106:Core/Src/main.c ****   }
 107:Core/Src/main.c ****   
 108:Core/Src/main.c ****     /* USER CODE END WHILE */
 109:Core/Src/main.c **** 
 110:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 111:Core/Src/main.c ****  
 112:Core/Src/main.c ****   /* USER CODE END 3 */
 113:Core/Src/main.c **** }
 114:Core/Src/main.c **** 
 115:Core/Src/main.c **** /**
 116:Core/Src/main.c ****   * @brief System Clock Configuration
 117:Core/Src/main.c ****   * @retval None
 118:Core/Src/main.c ****   */
 119:Core/Src/main.c **** void SystemClock_Config(void)
 120:Core/Src/main.c **** {
  94              		.loc 1 120 1
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 80
  97              		@ frame_needed = 1, uses_anonymous_args = 0
  98 0000 80B5     		push	{r7, lr}
  99              	.LCFI3:
 100              		.cfi_def_cfa_offset 8
 101              		.cfi_offset 7, -8
 102              		.cfi_offset 14, -4
 103 0002 94B0     		sub	sp, sp, #80
 104              	.LCFI4:
 105              		.cfi_def_cfa_offset 88
 106 0004 00AF     		add	r7, sp, #0
 107              	.LCFI5:
 108              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccX00Dbd.s 			page 5


 121:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 109              		.loc 1 121 22
 110 0006 07F12803 		add	r3, r7, #40
 111 000a 2822     		movs	r2, #40
 112 000c 0021     		movs	r1, #0
 113 000e 1846     		mov	r0, r3
 114 0010 FFF7FEFF 		bl	memset
 122:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 115              		.loc 1 122 22
 116 0014 07F11403 		add	r3, r7, #20
 117 0018 0022     		movs	r2, #0
 118 001a 1A60     		str	r2, [r3]
 119 001c 5A60     		str	r2, [r3, #4]
 120 001e 9A60     		str	r2, [r3, #8]
 121 0020 DA60     		str	r2, [r3, #12]
 122 0022 1A61     		str	r2, [r3, #16]
 123:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 123              		.loc 1 123 28
 124 0024 3B1D     		adds	r3, r7, #4
 125 0026 0022     		movs	r2, #0
 126 0028 1A60     		str	r2, [r3]
 127 002a 5A60     		str	r2, [r3, #4]
 128 002c 9A60     		str	r2, [r3, #8]
 129 002e DA60     		str	r2, [r3, #12]
 124:Core/Src/main.c **** 
 125:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 126:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 127:Core/Src/main.c ****   */
 128:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 130              		.loc 1 128 36
 131 0030 0123     		movs	r3, #1
 132 0032 BB62     		str	r3, [r7, #40]
 129:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 133              		.loc 1 129 30
 134 0034 4FF48033 		mov	r3, #65536
 135 0038 FB62     		str	r3, [r7, #44]
 130:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 136              		.loc 1 130 36
 137 003a 0023     		movs	r3, #0
 138 003c 3B63     		str	r3, [r7, #48]
 131:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 139              		.loc 1 131 30
 140 003e 0123     		movs	r3, #1
 141 0040 BB63     		str	r3, [r7, #56]
 132:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 142              		.loc 1 132 34
 143 0042 0223     		movs	r3, #2
 144 0044 7B64     		str	r3, [r7, #68]
 133:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 145              		.loc 1 133 35
 146 0046 4FF48033 		mov	r3, #65536
 147 004a BB64     		str	r3, [r7, #72]
 134:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 148              		.loc 1 134 32
 149 004c 4FF4E013 		mov	r3, #1835008
 150 0050 FB64     		str	r3, [r7, #76]
 135:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
ARM GAS  /tmp/ccX00Dbd.s 			page 6


 151              		.loc 1 135 7
 152 0052 07F12803 		add	r3, r7, #40
 153 0056 1846     		mov	r0, r3
 154 0058 FFF7FEFF 		bl	HAL_RCC_OscConfig
 155 005c 0346     		mov	r3, r0
 156              		.loc 1 135 6
 157 005e 002B     		cmp	r3, #0
 158 0060 01D0     		beq	.L6
 136:Core/Src/main.c ****   {
 137:Core/Src/main.c ****     Error_Handler();
 159              		.loc 1 137 5
 160 0062 FFF7FEFF 		bl	Error_Handler
 161              	.L6:
 138:Core/Src/main.c ****   }
 139:Core/Src/main.c **** 
 140:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 141:Core/Src/main.c ****   */
 142:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 162              		.loc 1 142 31
 163 0066 0F23     		movs	r3, #15
 164 0068 7B61     		str	r3, [r7, #20]
 143:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 144:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 165              		.loc 1 144 34
 166 006a 0223     		movs	r3, #2
 167 006c BB61     		str	r3, [r7, #24]
 145:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 168              		.loc 1 145 35
 169 006e 0023     		movs	r3, #0
 170 0070 FB61     		str	r3, [r7, #28]
 146:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 171              		.loc 1 146 36
 172 0072 4FF48063 		mov	r3, #1024
 173 0076 3B62     		str	r3, [r7, #32]
 147:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 174              		.loc 1 147 36
 175 0078 0023     		movs	r3, #0
 176 007a 7B62     		str	r3, [r7, #36]
 148:Core/Src/main.c **** 
 149:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 177              		.loc 1 149 7
 178 007c 07F11403 		add	r3, r7, #20
 179 0080 0221     		movs	r1, #2
 180 0082 1846     		mov	r0, r3
 181 0084 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 182 0088 0346     		mov	r3, r0
 183              		.loc 1 149 6
 184 008a 002B     		cmp	r3, #0
 185 008c 01D0     		beq	.L7
 150:Core/Src/main.c ****   {
 151:Core/Src/main.c ****     Error_Handler();
 186              		.loc 1 151 5
 187 008e FFF7FEFF 		bl	Error_Handler
 188              	.L7:
 152:Core/Src/main.c ****   }
 153:Core/Src/main.c ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 189              		.loc 1 153 38
ARM GAS  /tmp/ccX00Dbd.s 			page 7


 190 0092 0223     		movs	r3, #2
 191 0094 7B60     		str	r3, [r7, #4]
 154:Core/Src/main.c ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 192              		.loc 1 154 35
 193 0096 4FF40043 		mov	r3, #32768
 194 009a FB60     		str	r3, [r7, #12]
 155:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 195              		.loc 1 155 7
 196 009c 3B1D     		adds	r3, r7, #4
 197 009e 1846     		mov	r0, r3
 198 00a0 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 199 00a4 0346     		mov	r3, r0
 200              		.loc 1 155 6
 201 00a6 002B     		cmp	r3, #0
 202 00a8 01D0     		beq	.L9
 156:Core/Src/main.c ****   {
 157:Core/Src/main.c ****     Error_Handler();
 203              		.loc 1 157 5
 204 00aa FFF7FEFF 		bl	Error_Handler
 205              	.L9:
 158:Core/Src/main.c ****   }
 159:Core/Src/main.c **** }
 206              		.loc 1 159 1
 207 00ae 00BF     		nop
 208 00b0 5037     		adds	r7, r7, #80
 209              	.LCFI6:
 210              		.cfi_def_cfa_offset 8
 211 00b2 BD46     		mov	sp, r7
 212              	.LCFI7:
 213              		.cfi_def_cfa_register 13
 214              		@ sp needed
 215 00b4 80BD     		pop	{r7, pc}
 216              		.cfi_endproc
 217              	.LFE66:
 219              		.section	.text.MX_ADC1_Init,"ax",%progbits
 220              		.align	1
 221              		.syntax unified
 222              		.thumb
 223              		.thumb_func
 225              	MX_ADC1_Init:
 226              	.LFB67:
 160:Core/Src/main.c **** 
 161:Core/Src/main.c **** /**
 162:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 163:Core/Src/main.c ****   * @param None
 164:Core/Src/main.c ****   * @retval None
 165:Core/Src/main.c ****   */
 166:Core/Src/main.c **** static void MX_ADC1_Init(void)
 167:Core/Src/main.c **** {
 227              		.loc 1 167 1
 228              		.cfi_startproc
 229              		@ args = 0, pretend = 0, frame = 16
 230              		@ frame_needed = 1, uses_anonymous_args = 0
 231 0000 80B5     		push	{r7, lr}
 232              	.LCFI8:
 233              		.cfi_def_cfa_offset 8
 234              		.cfi_offset 7, -8
ARM GAS  /tmp/ccX00Dbd.s 			page 8


 235              		.cfi_offset 14, -4
 236 0002 84B0     		sub	sp, sp, #16
 237              	.LCFI9:
 238              		.cfi_def_cfa_offset 24
 239 0004 00AF     		add	r7, sp, #0
 240              	.LCFI10:
 241              		.cfi_def_cfa_register 7
 168:Core/Src/main.c **** 
 169:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 170:Core/Src/main.c **** 
 171:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 172:Core/Src/main.c **** 
 173:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 242              		.loc 1 173 26
 243 0006 3B1D     		adds	r3, r7, #4
 244 0008 0022     		movs	r2, #0
 245 000a 1A60     		str	r2, [r3]
 246 000c 5A60     		str	r2, [r3, #4]
 247 000e 9A60     		str	r2, [r3, #8]
 174:Core/Src/main.c **** 
 175:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 176:Core/Src/main.c **** 
 177:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 178:Core/Src/main.c **** 
 179:Core/Src/main.c ****   /** Common config
 180:Core/Src/main.c ****   */
 181:Core/Src/main.c ****   hadc1.Instance = ADC1;
 248              		.loc 1 181 18
 249 0010 184B     		ldr	r3, .L14
 250 0012 194A     		ldr	r2, .L14+4
 251 0014 1A60     		str	r2, [r3]
 182:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 252              		.loc 1 182 27
 253 0016 174B     		ldr	r3, .L14
 254 0018 0022     		movs	r2, #0
 255 001a 9A60     		str	r2, [r3, #8]
 183:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 256              		.loc 1 183 33
 257 001c 154B     		ldr	r3, .L14
 258 001e 0022     		movs	r2, #0
 259 0020 1A73     		strb	r2, [r3, #12]
 184:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 260              		.loc 1 184 36
 261 0022 144B     		ldr	r3, .L14
 262 0024 0022     		movs	r2, #0
 263 0026 1A75     		strb	r2, [r3, #20]
 185:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 264              		.loc 1 185 31
 265 0028 124B     		ldr	r3, .L14
 266 002a 4FF46022 		mov	r2, #917504
 267 002e DA61     		str	r2, [r3, #28]
 186:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 268              		.loc 1 186 24
 269 0030 104B     		ldr	r3, .L14
 270 0032 0022     		movs	r2, #0
 271 0034 5A60     		str	r2, [r3, #4]
 187:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
ARM GAS  /tmp/ccX00Dbd.s 			page 9


 272              		.loc 1 187 30
 273 0036 0F4B     		ldr	r3, .L14
 274 0038 0122     		movs	r2, #1
 275 003a 1A61     		str	r2, [r3, #16]
 188:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 276              		.loc 1 188 7
 277 003c 0D48     		ldr	r0, .L14
 278 003e FFF7FEFF 		bl	HAL_ADC_Init
 279 0042 0346     		mov	r3, r0
 280              		.loc 1 188 6
 281 0044 002B     		cmp	r3, #0
 282 0046 01D0     		beq	.L11
 189:Core/Src/main.c ****   {
 190:Core/Src/main.c ****     Error_Handler();
 283              		.loc 1 190 5
 284 0048 FFF7FEFF 		bl	Error_Handler
 285              	.L11:
 191:Core/Src/main.c ****   }
 192:Core/Src/main.c **** 
 193:Core/Src/main.c ****   /** Configure Regular Channel
 194:Core/Src/main.c ****   */
 195:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_8;
 286              		.loc 1 195 19
 287 004c 0823     		movs	r3, #8
 288 004e 7B60     		str	r3, [r7, #4]
 196:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 289              		.loc 1 196 16
 290 0050 0123     		movs	r3, #1
 291 0052 BB60     		str	r3, [r7, #8]
 197:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 292              		.loc 1 197 24
 293 0054 0023     		movs	r3, #0
 294 0056 FB60     		str	r3, [r7, #12]
 198:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 295              		.loc 1 198 7
 296 0058 3B1D     		adds	r3, r7, #4
 297 005a 1946     		mov	r1, r3
 298 005c 0548     		ldr	r0, .L14
 299 005e FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 300 0062 0346     		mov	r3, r0
 301              		.loc 1 198 6
 302 0064 002B     		cmp	r3, #0
 303 0066 01D0     		beq	.L13
 199:Core/Src/main.c ****   {
 200:Core/Src/main.c ****     Error_Handler();
 304              		.loc 1 200 5
 305 0068 FFF7FEFF 		bl	Error_Handler
 306              	.L13:
 201:Core/Src/main.c ****   }
 202:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 203:Core/Src/main.c **** 
 204:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 205:Core/Src/main.c **** 
 206:Core/Src/main.c **** }
 307              		.loc 1 206 1
 308 006c 00BF     		nop
 309 006e 1037     		adds	r7, r7, #16
ARM GAS  /tmp/ccX00Dbd.s 			page 10


 310              	.LCFI11:
 311              		.cfi_def_cfa_offset 8
 312 0070 BD46     		mov	sp, r7
 313              	.LCFI12:
 314              		.cfi_def_cfa_register 13
 315              		@ sp needed
 316 0072 80BD     		pop	{r7, pc}
 317              	.L15:
 318              		.align	2
 319              	.L14:
 320 0074 00000000 		.word	hadc1
 321 0078 00240140 		.word	1073816576
 322              		.cfi_endproc
 323              	.LFE67:
 325              		.section	.text.MX_GPIO_Init,"ax",%progbits
 326              		.align	1
 327              		.syntax unified
 328              		.thumb
 329              		.thumb_func
 331              	MX_GPIO_Init:
 332              	.LFB68:
 207:Core/Src/main.c **** 
 208:Core/Src/main.c **** /**
 209:Core/Src/main.c ****   * @brief GPIO Initialization Function
 210:Core/Src/main.c ****   * @param None
 211:Core/Src/main.c ****   * @retval None
 212:Core/Src/main.c ****   */
 213:Core/Src/main.c **** static void MX_GPIO_Init(void)
 214:Core/Src/main.c **** {
 333              		.loc 1 214 1
 334              		.cfi_startproc
 335              		@ args = 0, pretend = 0, frame = 32
 336              		@ frame_needed = 1, uses_anonymous_args = 0
 337 0000 80B5     		push	{r7, lr}
 338              	.LCFI13:
 339              		.cfi_def_cfa_offset 8
 340              		.cfi_offset 7, -8
 341              		.cfi_offset 14, -4
 342 0002 88B0     		sub	sp, sp, #32
 343              	.LCFI14:
 344              		.cfi_def_cfa_offset 40
 345 0004 00AF     		add	r7, sp, #0
 346              	.LCFI15:
 347              		.cfi_def_cfa_register 7
 215:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 348              		.loc 1 215 20
 349 0006 07F11003 		add	r3, r7, #16
 350 000a 0022     		movs	r2, #0
 351 000c 1A60     		str	r2, [r3]
 352 000e 5A60     		str	r2, [r3, #4]
 353 0010 9A60     		str	r2, [r3, #8]
 354 0012 DA60     		str	r2, [r3, #12]
 355              	.LBB4:
 216:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_1 */
 217:Core/Src/main.c **** 
 218:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_1 */
 219:Core/Src/main.c **** 
ARM GAS  /tmp/ccX00Dbd.s 			page 11


 220:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 221:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 356              		.loc 1 221 3
 357 0014 2D4B     		ldr	r3, .L17
 358 0016 9B69     		ldr	r3, [r3, #24]
 359 0018 2C4A     		ldr	r2, .L17
 360 001a 43F01003 		orr	r3, r3, #16
 361 001e 9361     		str	r3, [r2, #24]
 362 0020 2A4B     		ldr	r3, .L17
 363 0022 9B69     		ldr	r3, [r3, #24]
 364 0024 03F01003 		and	r3, r3, #16
 365 0028 FB60     		str	r3, [r7, #12]
 366 002a FB68     		ldr	r3, [r7, #12]
 367              	.LBE4:
 368              	.LBB5:
 222:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 369              		.loc 1 222 3
 370 002c 274B     		ldr	r3, .L17
 371 002e 9B69     		ldr	r3, [r3, #24]
 372 0030 264A     		ldr	r2, .L17
 373 0032 43F02003 		orr	r3, r3, #32
 374 0036 9361     		str	r3, [r2, #24]
 375 0038 244B     		ldr	r3, .L17
 376 003a 9B69     		ldr	r3, [r3, #24]
 377 003c 03F02003 		and	r3, r3, #32
 378 0040 BB60     		str	r3, [r7, #8]
 379 0042 BB68     		ldr	r3, [r7, #8]
 380              	.LBE5:
 381              	.LBB6:
 223:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 382              		.loc 1 223 3
 383 0044 214B     		ldr	r3, .L17
 384 0046 9B69     		ldr	r3, [r3, #24]
 385 0048 204A     		ldr	r2, .L17
 386 004a 43F00403 		orr	r3, r3, #4
 387 004e 9361     		str	r3, [r2, #24]
 388 0050 1E4B     		ldr	r3, .L17
 389 0052 9B69     		ldr	r3, [r3, #24]
 390 0054 03F00403 		and	r3, r3, #4
 391 0058 7B60     		str	r3, [r7, #4]
 392 005a 7B68     		ldr	r3, [r7, #4]
 393              	.LBE6:
 394              	.LBB7:
 224:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 395              		.loc 1 224 3
 396 005c 1B4B     		ldr	r3, .L17
 397 005e 9B69     		ldr	r3, [r3, #24]
 398 0060 1A4A     		ldr	r2, .L17
 399 0062 43F00803 		orr	r3, r3, #8
 400 0066 9361     		str	r3, [r2, #24]
 401 0068 184B     		ldr	r3, .L17
 402 006a 9B69     		ldr	r3, [r3, #24]
 403 006c 03F00803 		and	r3, r3, #8
 404 0070 3B60     		str	r3, [r7]
 405 0072 3B68     		ldr	r3, [r7]
 406              	.LBE7:
 225:Core/Src/main.c **** 
ARM GAS  /tmp/ccX00Dbd.s 			page 12


 226:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 227:Core/Src/main.c ****   HAL_GPIO_WritePin(KIT_LED_GPIO_Port, KIT_LED_Pin, GPIO_PIN_RESET);
 407              		.loc 1 227 3
 408 0074 0022     		movs	r2, #0
 409 0076 4FF40051 		mov	r1, #8192
 410 007a 1548     		ldr	r0, .L17+4
 411 007c FFF7FEFF 		bl	HAL_GPIO_WritePin
 228:Core/Src/main.c **** 
 229:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 230:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 412              		.loc 1 230 3
 413 0080 0022     		movs	r2, #0
 414 0082 F821     		movs	r1, #248
 415 0084 1348     		ldr	r0, .L17+8
 416 0086 FFF7FEFF 		bl	HAL_GPIO_WritePin
 231:Core/Src/main.c ****                           |GPIO_PIN_7, GPIO_PIN_RESET);
 232:Core/Src/main.c **** 
 233:Core/Src/main.c ****   /*Configure GPIO pin : KIT_LED_Pin */
 234:Core/Src/main.c ****   GPIO_InitStruct.Pin = KIT_LED_Pin;
 417              		.loc 1 234 23
 418 008a 4FF40053 		mov	r3, #8192
 419 008e 3B61     		str	r3, [r7, #16]
 235:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 420              		.loc 1 235 24
 421 0090 0123     		movs	r3, #1
 422 0092 7B61     		str	r3, [r7, #20]
 236:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 423              		.loc 1 236 24
 424 0094 0023     		movs	r3, #0
 425 0096 BB61     		str	r3, [r7, #24]
 237:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 426              		.loc 1 237 25
 427 0098 0223     		movs	r3, #2
 428 009a FB61     		str	r3, [r7, #28]
 238:Core/Src/main.c ****   HAL_GPIO_Init(KIT_LED_GPIO_Port, &GPIO_InitStruct);
 429              		.loc 1 238 3
 430 009c 07F11003 		add	r3, r7, #16
 431 00a0 1946     		mov	r1, r3
 432 00a2 0B48     		ldr	r0, .L17+4
 433 00a4 FFF7FEFF 		bl	HAL_GPIO_Init
 239:Core/Src/main.c **** 
 240:Core/Src/main.c ****   /*Configure GPIO pins : PA3 PA4 PA5 PA6
 241:Core/Src/main.c ****                            PA7 */
 242:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 434              		.loc 1 242 23
 435 00a8 F823     		movs	r3, #248
 436 00aa 3B61     		str	r3, [r7, #16]
 243:Core/Src/main.c ****                           |GPIO_PIN_7;
 244:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 437              		.loc 1 244 24
 438 00ac 0123     		movs	r3, #1
 439 00ae 7B61     		str	r3, [r7, #20]
 245:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 440              		.loc 1 245 24
 441 00b0 0023     		movs	r3, #0
 442 00b2 BB61     		str	r3, [r7, #24]
 246:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
ARM GAS  /tmp/ccX00Dbd.s 			page 13


 443              		.loc 1 246 25
 444 00b4 0223     		movs	r3, #2
 445 00b6 FB61     		str	r3, [r7, #28]
 247:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 446              		.loc 1 247 3
 447 00b8 07F11003 		add	r3, r7, #16
 448 00bc 1946     		mov	r1, r3
 449 00be 0548     		ldr	r0, .L17+8
 450 00c0 FFF7FEFF 		bl	HAL_GPIO_Init
 248:Core/Src/main.c **** 
 249:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_2 */
 250:Core/Src/main.c **** 
 251:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_2 */
 252:Core/Src/main.c **** }
 451              		.loc 1 252 1
 452 00c4 00BF     		nop
 453 00c6 2037     		adds	r7, r7, #32
 454              	.LCFI16:
 455              		.cfi_def_cfa_offset 8
 456 00c8 BD46     		mov	sp, r7
 457              	.LCFI17:
 458              		.cfi_def_cfa_register 13
 459              		@ sp needed
 460 00ca 80BD     		pop	{r7, pc}
 461              	.L18:
 462              		.align	2
 463              	.L17:
 464 00cc 00100240 		.word	1073876992
 465 00d0 00100140 		.word	1073811456
 466 00d4 00080140 		.word	1073809408
 467              		.cfi_endproc
 468              	.LFE68:
 470              		.section	.rodata
 471              		.align	2
 472              	.LC0:
 473 0000 08102040 		.ascii	"\010\020 @\200\000"
 473      8000
 474 0006 0000     		.space	2
 475              		.section	.text.set_pins_from_read,"ax",%progbits
 476              		.align	1
 477              		.global	set_pins_from_read
 478              		.syntax unified
 479              		.thumb
 480              		.thumb_func
 482              	set_pins_from_read:
 483              	.LFB69:
 253:Core/Src/main.c **** 
 254:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 255:Core/Src/main.c **** void set_pins_from_read(uint32_t read)
 256:Core/Src/main.c **** {
 484              		.loc 1 256 1
 485              		.cfi_startproc
 486              		@ args = 0, pretend = 0, frame = 24
 487              		@ frame_needed = 1, uses_anonymous_args = 0
 488 0000 80B5     		push	{r7, lr}
 489              	.LCFI18:
 490              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccX00Dbd.s 			page 14


 491              		.cfi_offset 7, -8
 492              		.cfi_offset 14, -4
 493 0002 86B0     		sub	sp, sp, #24
 494              	.LCFI19:
 495              		.cfi_def_cfa_offset 32
 496 0004 00AF     		add	r7, sp, #0
 497              	.LCFI20:
 498              		.cfi_def_cfa_register 7
 499 0006 7860     		str	r0, [r7, #4]
 257:Core/Src/main.c **** 	// Desligar todos os pinos
 258:Core/Src/main.c **** 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, 0);
 500              		.loc 1 258 2
 501 0008 0022     		movs	r2, #0
 502 000a F821     		movs	r1, #248
 503 000c 1A48     		ldr	r0, .L23
 504 000e FFF7FEFF 		bl	HAL_GPIO_WritePin
 259:Core/Src/main.c **** 
 260:Core/Src/main.c **** 	uint8_t pin_array[8] = {GPIO_PIN_3, GPIO_PIN_4, GPIO_PIN_5, GPIO_PIN_6, GPIO_PIN_7};
 505              		.loc 1 260 10
 506 0012 1A4A     		ldr	r2, .L23+4
 507 0014 07F10803 		add	r3, r7, #8
 508 0018 92E80300 		ldm	r2, {r0, r1}
 509 001c 1860     		str	r0, [r3]
 510 001e 0433     		adds	r3, r3, #4
 511 0020 1980     		strh	r1, [r3]	@ movhi
 512 0022 0023     		movs	r3, #0
 513 0024 FB81     		strh	r3, [r7, #14]	@ movhi
 261:Core/Src/main.c **** 	uint8_t pins_to_turn_on = 0x0;
 514              		.loc 1 261 10
 515 0026 0023     		movs	r3, #0
 516 0028 FB75     		strb	r3, [r7, #23]
 517              	.LBB8:
 262:Core/Src/main.c **** 
 263:Core/Src/main.c **** 	/*for (int i = 0; i < 5; i++) {
 264:Core/Src/main.c **** 		uint8_t current_bit = (count >> i) & 1;
 265:Core/Src/main.c **** 		if (current_bit == 1) {
 266:Core/Src/main.c **** 			pins_to_turn_on |= pin_array[i];
 267:Core/Src/main.c **** 		}
 268:Core/Src/main.c **** 	}
 269:Core/Src/main.c ****     */
 270:Core/Src/main.c ****    for (int i = 0; i < 5; i++) {
 518              		.loc 1 270 13
 519 002a 0023     		movs	r3, #0
 520 002c 3B61     		str	r3, [r7, #16]
 521              		.loc 1 270 4
 522 002e 14E0     		b	.L20
 523              	.L22:
 271:Core/Src/main.c ****     if (read >= (149 + i * 946)) {
 524              		.loc 1 271 26
 525 0030 3B69     		ldr	r3, [r7, #16]
 526 0032 40F2B232 		movw	r2, #946
 527 0036 02FB03F3 		mul	r3, r2, r3
 528              		.loc 1 271 22
 529 003a 9533     		adds	r3, r3, #149
 530 003c 1A46     		mov	r2, r3
 531              		.loc 1 271 8
 532 003e 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccX00Dbd.s 			page 15


 533 0040 9342     		cmp	r3, r2
 534 0042 07D3     		bcc	.L21
 272:Core/Src/main.c ****       pins_to_turn_on |= pin_array[i];
 535              		.loc 1 272 35
 536 0044 07F10802 		add	r2, r7, #8
 537 0048 3B69     		ldr	r3, [r7, #16]
 538 004a 1344     		add	r3, r3, r2
 539 004c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 540              		.loc 1 272 23
 541 004e FB7D     		ldrb	r3, [r7, #23]
 542 0050 1343     		orrs	r3, r3, r2
 543 0052 FB75     		strb	r3, [r7, #23]
 544              	.L21:
 270:Core/Src/main.c ****     if (read >= (149 + i * 946)) {
 545              		.loc 1 270 28 discriminator 2
 546 0054 3B69     		ldr	r3, [r7, #16]
 547 0056 0133     		adds	r3, r3, #1
 548 0058 3B61     		str	r3, [r7, #16]
 549              	.L20:
 270:Core/Src/main.c ****     if (read >= (149 + i * 946)) {
 550              		.loc 1 270 22 discriminator 1
 551 005a 3B69     		ldr	r3, [r7, #16]
 552 005c 042B     		cmp	r3, #4
 553 005e E7DD     		ble	.L22
 554              	.LBE8:
 273:Core/Src/main.c ****     }
 274:Core/Src/main.c ****    }
 275:Core/Src/main.c **** 
 276:Core/Src/main.c **** 	HAL_GPIO_WritePin(GPIOA, pins_to_turn_on, 1);
 555              		.loc 1 276 2
 556 0060 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 557 0062 9BB2     		uxth	r3, r3
 558 0064 0122     		movs	r2, #1
 559 0066 1946     		mov	r1, r3
 560 0068 0348     		ldr	r0, .L23
 561 006a FFF7FEFF 		bl	HAL_GPIO_WritePin
 277:Core/Src/main.c **** }
 562              		.loc 1 277 1
 563 006e 00BF     		nop
 564 0070 1837     		adds	r7, r7, #24
 565              	.LCFI21:
 566              		.cfi_def_cfa_offset 8
 567 0072 BD46     		mov	sp, r7
 568              	.LCFI22:
 569              		.cfi_def_cfa_register 13
 570              		@ sp needed
 571 0074 80BD     		pop	{r7, pc}
 572              	.L24:
 573 0076 00BF     		.align	2
 574              	.L23:
 575 0078 00080140 		.word	1073809408
 576 007c 00000000 		.word	.LC0
 577              		.cfi_endproc
 578              	.LFE69:
 580              		.section	.text.Error_Handler,"ax",%progbits
 581              		.align	1
 582              		.global	Error_Handler
ARM GAS  /tmp/ccX00Dbd.s 			page 16


 583              		.syntax unified
 584              		.thumb
 585              		.thumb_func
 587              	Error_Handler:
 588              	.LFB70:
 278:Core/Src/main.c ****   
 279:Core/Src/main.c **** /* USER CODE END 4 */
 280:Core/Src/main.c **** 
 281:Core/Src/main.c **** /**
 282:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 283:Core/Src/main.c ****   * @retval None
 284:Core/Src/main.c ****   */
 285:Core/Src/main.c **** void Error_Handler(void)
 286:Core/Src/main.c **** {
 589              		.loc 1 286 1
 590              		.cfi_startproc
 591              		@ args = 0, pretend = 0, frame = 0
 592              		@ frame_needed = 1, uses_anonymous_args = 0
 593              		@ link register save eliminated.
 594 0000 80B4     		push	{r7}
 595              	.LCFI23:
 596              		.cfi_def_cfa_offset 4
 597              		.cfi_offset 7, -4
 598 0002 00AF     		add	r7, sp, #0
 599              	.LCFI24:
 600              		.cfi_def_cfa_register 7
 601              	.LBB9:
 602              	.LBB10:
 603              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
ARM GAS  /tmp/ccX00Dbd.s 			page 17


  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccX00Dbd.s 			page 18


  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
ARM GAS  /tmp/ccX00Dbd.s 			page 19


 604              		.loc 2 142 3
 605              		.syntax unified
 606              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 607 0004 72B6     		cpsid i
 608              	@ 0 "" 2
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 609              		.loc 2 143 1
 610              		.thumb
 611              		.syntax unified
 612 0006 00BF     		nop
 613              	.L26:
 614              	.LBE10:
 615              	.LBE9:
 287:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 288:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 289:Core/Src/main.c ****   __disable_irq();
 290:Core/Src/main.c ****   while (1)
 616              		.loc 1 290 9 discriminator 1
 617 0008 00BF     		nop
 618 000a FDE7     		b	.L26
 619              		.cfi_endproc
 620              	.LFE70:
 622              		.text
 623              	.Letext0:
 624              		.file 3 "/opt/arm-gnu-toolchain-12.2.rel1-x86_64-arm-none-eabi/arm-none-eabi/include/machine/_defa
 625              		.file 4 "/opt/arm-gnu-toolchain-12.2.rel1-x86_64-arm-none-eabi/arm-none-eabi/include/sys/_stdint.h
 626              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 627              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 628              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 629              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 630              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 631              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 632              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 633              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 634              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /tmp/ccX00Dbd.s 			page 20


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccX00Dbd.s:23     .bss.hadc1:0000000000000000 hadc1
     /tmp/ccX00Dbd.s:20     .bss.hadc1:0000000000000000 $d
     /tmp/ccX00Dbd.s:26     .text.main:0000000000000000 $t
     /tmp/ccX00Dbd.s:32     .text.main:0000000000000000 main
     /tmp/ccX00Dbd.s:92     .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccX00Dbd.s:331    .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccX00Dbd.s:225    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccX00Dbd.s:482    .text.set_pins_from_read:0000000000000000 set_pins_from_read
     /tmp/ccX00Dbd.s:81     .text.main:000000000000003c $d
     /tmp/ccX00Dbd.s:86     .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccX00Dbd.s:587    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccX00Dbd.s:220    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccX00Dbd.s:320    .text.MX_ADC1_Init:0000000000000074 $d
     /tmp/ccX00Dbd.s:326    .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccX00Dbd.s:464    .text.MX_GPIO_Init:00000000000000cc $d
     /tmp/ccX00Dbd.s:471    .rodata:0000000000000000 $d
     /tmp/ccX00Dbd.s:476    .text.set_pins_from_read:0000000000000000 $t
     /tmp/ccX00Dbd.s:575    .text.set_pins_from_read:0000000000000078 $d
     /tmp/ccX00Dbd.s:581    .text.Error_Handler:0000000000000000 $t

UNDEFINED SYMBOLS
HAL_Init
HAL_Delay
HAL_ADC_Start
HAL_ADC_PollForConversion
HAL_ADC_GetValue
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_GPIO_WritePin
HAL_GPIO_Init
